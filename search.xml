<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mac的OpenVPN连接错误Error calling protect() method on socket</title>
      <link href="/2025-07-17-mac-openvpn-issue.html"/>
      <url>/2025-07-17-mac-openvpn-issue.html</url>
      
        <content type="html"><![CDATA[<p>个人用的Mac M2Max电脑，最近连接OpenVPN一直报错Error calling protect() method on socket，网上搜了一下解决方案，只需要执行以下3条命令即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line"></span><br><span class="line">launchctl load -w /Library/LaunchDaemons/org.openvpn.client.plist</span><br><span class="line"></span><br><span class="line">untill reboot // 这条执行报错也无所谓</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后重启一下OpenVPN即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> -- OpenVPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ChatGPT对话大纲目录插件</title>
      <link href="/2025-07-07-chatgpt-conversation-outline.html"/>
      <url>/2025-07-07-chatgpt-conversation-outline.html</url>
      
        <content type="html"><![CDATA[<p>在高频使用ChatGPT对话的过程中发现，当某个对话特别长时，想要找到某段具体内容会非常困难。这时候如果能像Notion一样在页面上显示大纲会方便很多，因为ChatGPT返回的内容都是markdown风格的，标题，副标题，列表等元素可以用作很好的大纲素材。</p><span id="more"></span><p>于是我花了一些时间，开发上架了ChatGPT对话目录插件，插件功能如下，它可以显示大纲目录的同时，当你点击某个目录项时，还会跳转到目录项对应网页的位置。</p><p><img src="/2025-07-07-chatgpt-conversation-outline/img1.webp"><br>想要下载体验的可以从<span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWV3ZWJzdG9yZS5nb29nbGUuY29tL2RldGFpbC9jaGF0Z3B0JUU1JUFGJUI5JUU4JUFGJTlEJUU3JTlCJUFFJUU1JUJEJTk1JUU1JUFFJTlBJUU0JUJEJThEL2ppaG1iZmhhbm5nZm5wbmZiYWtmYWdrY2NwaWZoaGFwP2hsPWVuLVVTJnV0bV9zb3VyY2U9ZXh0X3NpZGViYXI=">插件商店地址<i class="fa fa-external-link-alt"></i></span>免费安装，有任何反馈欢迎评论。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ChromeExtension </tag>
            
            <tag> 产品 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把telegram变成自己的私人图床</title>
      <link href="/2025-06-15-tg-image-storage.html"/>
      <url>/2025-06-15-tg-image-storage.html</url>
      
        <content type="html"><![CDATA[<p>最近看到一个<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpeWV3dXFpdS9uZXctbG1hZ2U=">开源项目<i class="fa fa-external-link-alt"></i></span>，通过把Cloudflare和电报结合，打造成属于自己的私人图床，效果如下</p><span id="more"></span><p><img src="/2025-06-15-tg-image-storage/img1.webp"><br>它的优势是免费，无限空间，永不过期，下面教大家如何配置。</p><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ol><li><p>Cloudflare账号</p></li><li><p>电报账号</p></li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>cloudflare配置</p><ol><li><p>首先克隆<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpeWV3dXFpdS9uZXctbG1hZ2U=">开源项目<i class="fa fa-external-link-alt"></i></span>到本地</p></li><li><p>进入项目目录，命令行执行<code>npm install</code></p></li><li><p>执行<code>npx wrangler login</code> ，会自动跳转浏览器打开cloudflare网页，确认授权即可</p></li><li><p>执行<code>npx wrangler kv namespace create &quot;img_url&quot;</code> 和<code>npx wrangler kv namespace create &quot;users&quot;</code>，记下执行后命令行打印的两个id<br><img src="/2025-06-15-tg-image-storage/img2.webp"></p></li></ol><p>电报配置</p><ol><li><p>搜索BotFather，输入&#x2F;newbot，创建完bot后记录下bot token<br><img src="/2025-06-15-tg-image-storage/img3.webp"></p></li><li><p>创建一个channel，把上一部创建的bot添加进channel，这里搜索的时候最好填入完整的bot info里的username<br><img src="/2025-06-15-tg-image-storage/img4.webp"></p></li><li><p>再在channel里添加一个get_id_bot，然后在channel里触发get_id_bot的功能，获取到channel的id，其格式是-100后面随机的数字</p></li></ol><p>最后需要修改项目根目录下wrangler.toml文件，把前面记录的几个id分别填进去</p><p><img src="/2025-06-15-tg-image-storage/img5.webp"><br>填完之后执行<code>npm run deploy</code> ，然后进入cloudflare的compute workers，就能看到正在运行的网站了，点击visit即可访问。</p><p><img src="/2025-06-15-tg-image-storage/img6.webp"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Cloudflare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google cloud storage multipart upload遇到的坑</title>
      <link href="/2025-05-27-gcs-multipart-upload.html"/>
      <url>/2025-05-27-gcs-multipart-upload.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近在优化上传本地文件的功能，目前的实现是通过resumable upload，实现了串行分块上传，但是在上传大文件时的速度有点慢，不能充分利用上带宽，于是在调研了一波后，决定改成gcs提供的另一种multipart upload，可以并行上传多个分段，加速上传时间。</p><span id="more"></span><h1 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h1><p>根据gcs的<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL3N0b3JhZ2UvZG9jcy94bWwtYXBpL3Bvc3Qtb2JqZWN0LW11bHRpcGFydA==">文档<i class="fa fa-external-link-alt"></i></span>指示，步骤是</p><ol><li>先init multipart upload，得到uploadId，</li></ol><p>2然后再并行调用PUT接口上传分片，这一步会在response headers里返回Etag，需要把所有分片的Etag都保存下来，</p><ol start="3"><li>最后在complete接口里组装成一个xml body。根据文档提供的例子很快把第一版代码写好了。</li></ol><h1 id="坑1"><a href="#坑1" class="headerlink" title="坑1"></a>坑1</h1><p>文档里的例子Host的结构为<code>bucket.storage.googleapis.com</code> ，在浏览器上使用fetch调用会报错CORS，于是查看Host字段的说明，发现可以配置custom domain，于是在GCP里配置了load balance，在cloudflare里配置了dns，最后调用接口为<code>https://opus-clip-staging.opus.pro</code>，但是调用还是报错，这回不是CORS，而是404，错误信息是no such object in bucket opus-clip-staging.opus.pro，貌似GCS把我配置的全域名当作bucket名称了，这里也不清楚GCS是如何解析bucket名称的，神奇的是调用第二步的put接口时，GCS又能正确识别bucket，只有在调用第一步和第三步时会把bucket认错。这个错误目前还是有办法解决的，只需要在我们自己的后端服务上提供2个接口，接口里调用GCS的真正的接口，前端在第一步和第三步调用后端服务的接口即可。</p><h1 id="坑2"><a href="#坑2" class="headerlink" title="坑2"></a>坑2</h1><p>在把接口搬到后端前，我打算先把complete接口调通，于是在Apifox里尝试调用接口如下</p><p><img src="/2025-05-27-gcs-multipart-upload/1.webp"><br>这里的xml body我尝试过删除全部行，去掉多余符号，都是报这个错误，谷歌搜了好多都搜不到这个错误，于是求助GCP的同事，看看他们有什么解决办法</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>他们一开始提供了一个<span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0Byb3N5cGFybWFyL2dvb2dsZS1jbG91ZC1zdG9yYWdlLXVwbG9hZC1hLWxhcmdlLWZpbGUtdXNpbmctY3VybC04NzJkZDFlNGUzMjM=">博客<i class="fa fa-external-link-alt"></i></span>，我尝试按着博客上的例子在curl里请求，最后成功调通了，于是决定按着博客的方式修改。首先修改调用接口host，改回<code>bucket.storage.googleapis.com</code> ，接着搜索GCS cors，搜到<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL3N0b3JhZ2UvZG9jcy9jb3JzLWNvbmZpZ3VyYXRpb25z">官方文档<i class="fa fa-external-link-alt"></i></span>的配置，一通配置下来，发现调用还是CORS，这时GCP的同事也没有其他解决办法，于是只好继续看文档，这时我在另一篇<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL3N0b3JhZ2UvZG9jcy9jcm9zcy1vcmlnaW4=">文档<i class="fa fa-external-link-alt"></i></span>里发现了这样一段</p><p><img src="/2025-05-27-gcs-multipart-upload/2.webp"><br>大致意思是有些请求会先preflight，且preflight里会携带 requested headers，GCS会检查requested headers，如果检查不通过，就会直接拒绝，那么这里的检查目标又是什么呢？继续往下看，又出现一段话</p><p><img src="/2025-05-27-gcs-multipart-upload/3.webp"><br>原来是跟cors配置里的responseHeaders的值做检查，那这时候就需要看一下OPTIONS请求里的值到底是什么，于是点开Chrome network，点击上传</p><p><img src="/2025-05-27-gcs-multipart-upload/4.webp"><br>什么OPTIONS，哪来的OPTIONS？Chrome根本就不显示OPTIONS。ok那我们换个浏览器</p><p><img src="/2025-05-27-gcs-multipart-upload/5.webp"><br><img src="/2025-05-27-gcs-multipart-upload/6.webp"><br>可以看到在Access-Control-Request-Headers有2个值，ok那我们在cors config里把这2个值加上再试一次（这里还有个点要注意，Etag在response header里，想要在前端获取到header，需要Etag在response里的Access-Control-Expose-Headers里，但是cors config里并没有这个配置字段，仔细看了一下接口返回的Access-Control-Expose-Headers里有个authorize，跟cors config里配置的responseHeaders里的一样，于是抱着试一试的想法把Etag也加进去，发现是可以的。以及每个part不能小于5mb，否则在最后的complete接口会返回invalid argument错误）</p><p><img src="/2025-05-27-gcs-multipart-upload/7.webp"><br>完美通过</p>]]></content>
      
      
      
        <tags>
            
            <tag> Google Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025五一江西九江/南昌游记</title>
      <link href="/2025-05-19-jiangxi-travel.html"/>
      <url>/2025-05-19-jiangxi-travel.html</url>
      
        <content type="html"><![CDATA[<p>又到了一年一度的五一长假，在四月初就开始规划五一去哪旅游了。最初是想去福州，因为想去平潭岛看海。但是看了一圈五一时间的酒店，涨价特别离谱，感觉比平时贵了一倍，稍微好一点的酒店都要4，5百。而且想了一下福州是个比较热门的旅游城市，到时候肯定会人挤人，旅游体验估计也不会太好，就取消了去福州的计划（当然肯定会去，只不过要换个时间避开节假日）。</p><p>同时五一期间飞机票涨价也特别离谱，所以排除要坐飞机去的城市，省会城市，传统旅游城市。并且期望上海出发高铁5小时内能到，就这样选到了江西九江和南昌。而且庐山还是三山之一，李白的《望庐山瀑布》也是小学时候经常背诵的古诗，南昌又是个英雄城市，所以值得一去。</p><span id="more"></span><h1 id="九江"><a href="#九江" class="headerlink" title="九江"></a>九江</h1><h2 id="4-30"><a href="#4-30" class="headerlink" title="4.30"></a>4.30</h2><p>晚上17：43从上海虹桥出发，晚上10：49到达九江，耗时5小时。酒店定在九江学院附近，一方面是这里酒店价格比较便宜，而且离庐山景区也比较近。</p><p>由于在高铁上没吃到，到酒店已经凌晨了，肚子很饿，就随便点了酒店附近一家米粉外卖。没想到这随便一点的米粉都这么好吃，粉很软，牛肉汤很鲜，作为一名平时都不喝汤的人，差点把整碗汤喝完了。而且价格真的很实惠，我连优惠券都没用，又是凌晨配送费比较高的时候，这碗牛肉汤粉才25，在上海还没吃到这么好吃的米粉，这让我对江西米粉的期待更高了。</p><h2 id="5-1三叠泉"><a href="#5-1三叠泉" class="headerlink" title="5.1三叠泉"></a>5.1三叠泉</h2><p>今天的规划是去庐山三叠泉，在出发前就已经想好这次来只爬一个三叠泉，剩下时间都去山脚下的景点，所以门票就没有买160的通票，而且在美团上买了庐山东线几个景点的联票，价格106</p><p><img src="/img1.jpg"><br>中午去了酒店附近一家九江炒菜馆，点了鸡脚，蟹脚捞粉和炒粉。蟹脚捞粉很好吃，米粉上充满了蟹脚的鲜味，就是蟹脚吃起来不太方便，徒手掰很容易把手划伤了。炒粉也很香，而且一份10块分量十足。</p><p>从饭店打车到庐山东门30公里60块左右（不得不说九江打车真是便宜，平时不打车的我在九江库库打车）到东门游客中心需要换票，把网上买的电子票换成纸质门票。然后推荐再买一个来回的观光车票，20一人，会把你从东门送到三叠泉，不买就得走上来，这段路还挺远的。</p><p>接下来就是枯燥的爬山过程，提醒一下可以穿一件防晒衣，一方面是太阳大防晒，越往上爬温度也会越低，尤其是瀑布边上冷飕飕的。</p><p>在耗时一个半小时后终于抵达三叠泉景点，瀑布冲下来的景色还是很好看的。而且不知道是不是运气好，一点都没有假期人挤人的现象，全程都是比较舒适。</p><p><img src="/2025-05-19-jiangxi-travel/img2.jpg"><br>下山后直接打车去浔阳城区吃江西炒菜，点了爆炒三丝和三杯鸡，江西菜不仅下饭，而且香味浓郁，非常合我口味。</p><p>吃完沿着江边逛了浔阳楼和锁江楼，这两个楼确实是有些失望了，夜晚还给楼配了会变色的灯光，可惜光也不好看。来之前预期拉的比较高，结果实际给人的感觉有点一般。</p><h2 id="5-2碧龙潭"><a href="#5-2碧龙潭" class="headerlink" title="5.2碧龙潭"></a>5.2碧龙潭</h2><p>网上搜了一下碧龙潭有个特别好看的碧绿湖水，就决定出发这里。昨天爬的太累导致早上根本起不来，出发已经是下午了。到了景区结果发现堵车特别长，熟悉的节假日画面还是出现了。在景区门口等接驳车等了一个多小时才抵达爬山入口。</p><p>碧龙潭比三叠泉好爬一些，因为我们不爬全程，爬到大坝湖的位置只用了半小时，拍照打卡后就回市区了。</p><p><img src="/2025-05-19-jiangxi-travel/img3.jpg"><br>搜到酒店附近就有个九江十里夜市，应该是旁边有个九江学院的关系，还是比较热闹的，就是规模不大一会就逛完了。不过在夜市上吃到了很好吃的炒粉，猛火爆炒锅气十足。</p><p>今天在刷小红书的时候正好刷到最新的关于一些庐山的笔记，很多人说庐山在早上10:30的时候直接限流不卖票也不让进了。不禁感叹还好我是昨天去的，人很少体验比今天好多了。</p><h2 id="5-3"><a href="#5-3" class="headerlink" title="5.3"></a>5.3</h2><p>今天收拾行李准备出发去南昌，车票时间比较晚，所以今天还有时间再逛逛火车站附近。中午本来已经找好了一家店（荷花垄66号）结果排队人数太多没吃成，去旁边的一家店吃了，结果让人非常失望，小炒肉全是辣椒，鸡脚感觉都不是现做的。</p><p>吃完饭骑着电动车在甘棠湖绕圈，骑车吹着风在湖边飞驰的感觉很惬意。</p><h1 id="南昌"><a href="#南昌" class="headerlink" title="南昌"></a>南昌</h1><h2 id="5-3-1"><a href="#5-3-1" class="headerlink" title="5.3"></a>5.3</h2><p>从九江到南昌的高铁只用一小时，和上海到杭州的时间差不多。到了南昌后去酒店把行李放下后，就直接出发去吃拌粉。大众点评上找到一家黄记瓦罐煨汤（在丁公路北附近）过去一看排队人也巨多，这一看就没选错。</p><p>点了两碗招牌拌粉和鸡蛋肉饼汤，拌粉一碗3.5元汤一碗4元，这价格有种回到10年前的感觉。拌粉很香，调料的味道很浓郁。瓦罐汤很鲜美，点的鸡蛋肉饼汤，鸡蛋是直接煮在汤里的，没有一点腥味，据说是因为江西的水质好，所以煮出来的汤也比其他地方的好喝。</p><p><img src="/2025-05-19-jiangxi-travel/img4.jpg"><br>吃完饭骑车去附近一个叫羊子巷的夜市逛了一下，这条街不是很长，没一会就走完了。于是准备骑车去附近再逛逛，正好经过八一广场，看到广场上在播放音乐喷泉，于是赶紧下车过去看喷泉。</p><p>八一广场修的很气派，广场上有好多摄影师付费拍照，而且有好多人聚集在栏杆边拍和美术馆的合影。</p><p><img src="/img5.jpg"><br><img src="/img6.jpg"></p><h2 id="5-4"><a href="#5-4" class="headerlink" title="5.4"></a>5.4</h2><p>今天打算去万寿宫步行街逛逛，到步行街入口发现有一家洪都大拇指的奶茶店，应该是南昌本地的奶茶店，买了一杯带奶油的，味道很不错，奶油挺香的，奶茶本身的味道也很好，如果能开在上海应该会经常点，可惜没有。</p><p>步行街的建筑修建的还是比较有特色的，应该是想要体现这儿的历史气息。里面的店除了餐饮，也有一些饰品，特产店铺。</p><p>逛完万寿宫出发滕王阁，到了滕王阁时间有点晚了，登阁的门票已经卖完了，于是就只好去滕王阁北园看了会江景，拍了几张照片就撤了。</p><p>晚上去了另一个夜市，叫蛤蟆街，也在市区内，附近有地铁，交通挺方便的。这条街就比昨天去的羊子巷大多了，夜市分为两部分，分别是蛤蟆巷和大士院，全部逛完估计得1，2小时。夜市大部分餐饮都是赣菜，水煮。听闻南昌水煮味道不错，正好路上闲逛的时候发现一家丽丽水煮排队人很多，于是决定尝尝味道，结果体验非常不好。一进门服务员就拿了一个框让在冰柜里选菜，我选了半天最后端上来的居然是油炸，水煮要另外扫码选。虽然冰柜上贴了油炸两个字，但方向是侧着朝店里面的，低头选菜的时候根本看不见。关键是这个选菜的过程就很容易让人以为是水煮，毕竟来这家店吃肯定是奔着水煮来的，服务员也没有提醒一下游客，最后上了一堆油炸也没吃完，太油了。</p><p>路边看到有卖白糖糕的摊位，买了2个尝了尝，吃起来外壳酥脆，内里又是糯米的软糯，加上外壳蘸了一层白糖，挺好吃的，这种糖油混合物吃起来就是容易上瘾。</p><p><img src="/2025-05-19-jiangxi-travel/img7.jpg"></p><h2 id="5-5"><a href="#5-5" class="headerlink" title="5.5"></a>5.5</h2><p>返程上海，总结这次的九江-南昌旅行还是很不错的，庐山自然风景很好，整个九江的空气质量也比上海好多了。江西的粉是真好吃，无论是汤粉，炒粉还是拌粉。赣菜辣也是真的辣，一盘辣炒风爪吃完感觉嘴巴都麻了。</p><p>江西的地理资源挺不错的，有山有湖有长江，旅游资源也算是挺丰富的，就是比较可惜由于各种原因导致经济发展相对受限，知名度相比周边省份也比较低，也希望未来江西能有更好的发展吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 旅行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用webpack配置tailwindcss和postcss</title>
      <link href="/2025-04-20-webpack-tailwind.html"/>
      <url>/2025-04-20-webpack-tailwind.html</url>
      
        <content type="html"><![CDATA[<p>最近在写一个谷歌浏览器插件，使用这个<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2x4aWV5YW5nL2Nocm9tZS1leHRlbnNpb24tYm9pbGVycGxhdGUtcmVhY3Q/dGFiPXJlYWRtZS1vdi1maWxl">脚手架<i class="fa fa-external-link-alt"></i></span>作为基础，在基础之上打算配置使用tailwindcss，由于脚手架用的是webpack，于是需要用postcss作为loader，于是安装了tailwindcss，postcss，postcss-loader，autoprefix，然后在webpack里配置使用postcss，启动后报错</p><span id="more"></span><blockquote><p>It looks like you’re trying to use <code>tailwindcss</code> directly as a PostCSS plugin. The PostCSS plugin has moved to a separate package, so to continue using Tailwind CSS with PostCSS you’ll need to install <code>@tailwindcss/postcss</code> and update your PostCSS configuration</p></blockquote><p>错误信息还是比较清晰的，网上搜索了一下，解决方法是把postcss.config.js文件里的改成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    &quot;@tailwindcss/postcss&quot;: &#123;&#125;,</span><br><span class="line">    autoprefixer: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时把postcss依赖删除就好了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> TailwindCSS </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot, Gradle, Postgresql接入flyway报错No database found to handle</title>
      <link href="/2025-03-18-gradle-integrate-flyway.html"/>
      <url>/2025-03-18-gradle-integrate-flyway.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>项目是Springboot框架，使用gradle作为构建工具，数据库是postgresql。</p><p>今天在尝试接入flyway作为数据库迁移工具，按照<span class="exturl" data-url="aHR0cHM6Ly9kb2N1bWVudGF0aW9uLnJlZC1nYXRlLmNvbS9mZC9wb3N0Z3Jlc3FsLWRhdGFiYXNlLTIzNTI0MTgwNy5odG1s">官方教程<i class="fa fa-external-link-alt"></i></span>在build.gradle配置好后，运行flywayInfo报错No database found to handle，经过一番搜索找到了<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZseXdheS9mbHl3YXkvaXNzdWVzLzM3NzQ=">这个PR<i class="fa fa-external-link-alt"></i></span>，需要在build.gradle里最开头加上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath(&quot;org.flywaydb:flyway-database-postgresql:10.13.0&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>更奇怪的是这个bug也一直没有修复，或者也没有在官方文档里加上修复方案，但PR却被关闭了</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Gradle </tag>
            
            <tag> Flyway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何部署NestJS应用到Vercel</title>
      <link href="/2025-03-12-deploy-nestjs-to-vercel.html"/>
      <url>/2025-03-12-deploy-nestjs-to-vercel.html</url>
      
        <content type="html"><![CDATA[<p>最近在帮助一个客户开发后端程序，技术栈是Node.js+NestJS+Prisma+Planetscale，客户希望能部署到Vercel。而Vercel基本都是用来部署前端应用的，以前我也没有尝试过在Vercel部署后端应用，这次顺便记录一下部署过程，以及中间的几个坑。</p><span id="more"></span><h2 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h2><h3 id="配置Vercel"><a href="#配置Vercel" class="headerlink" title="配置Vercel"></a>配置Vercel</h3><ol><li><p><code>touch vercel.json</code> 在项目根目录下新建配置文件</p></li><li><p>在vercel.json里写入以下内容，builds和routes的src目录根据自己项目配置修改</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: 2,</span><br><span class="line">    &quot;builds&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">        &quot;src&quot;: &quot;dist/main.js&quot;,</span><br><span class="line">        &quot;use&quot;: &quot;@vercel/node&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;routes&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">        &quot;src&quot;: &quot;/(.*)&quot;,</span><br><span class="line">        &quot;dest&quot;: &quot;dist/main.js&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>npm i -g vercel</code>安装vercel命令行</p></li><li><p><code>vercel login</code> 登录vercel，这一步基本上输入邮箱即可</p></li><li><p><code>npm run build</code> 打包应用</p></li><li><p><code>vercel --prod</code> 开始部署，注意如果是第一次部署，会有选项让你选择，类似下图<br><img src="/2025-03-12-deploy-nestjs-to-vercel/img1.webp"></p></li><li><p>最后就可以在vercel的dashboard里看到应用了。</p></li></ol><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><h3 id="prisma连接不上"><a href="#prisma连接不上" class="headerlink" title="prisma连接不上"></a>prisma连接不上</h3><p>项目的数据库是planetscale的云数据库，在prisma的<span class="exturl" data-url="aHR0cHM6Ly93d3cucHJpc21hLmlvL2RvY3MvYWNjZWxlcmF0ZS9nZXR0aW5nLXN0YXJ0ZWQ=">文档<i class="fa fa-external-link-alt"></i></span>里提到连接planetscale要用DIRECT_DATABASE_URL，实测这样还是会报错，必须还是用DATABASE_URL，且格式是mysql:&#x2F;&#x2F;才行。</p><h3 id="prisma缓存"><a href="#prisma缓存" class="headerlink" title="prisma缓存"></a>prisma缓存</h3><p>部署成功后在vercel的日志里看到</p><p><code>Prisma has detected that this project was built on Vercel, which caches dependencies. This leads to an outdated Prisma Client because Prisma&#39;s auto-generation isn&#39;t triggered. To fix this, make sure to run the prisma generate command during the build process.</code></p><p>看了官方文档的<span class="exturl" data-url="aHR0cHM6Ly93d3cucHJpc21hLmlvL2RvY3Mvb3JtL21vcmUvaGVscC1hbmQtdHJvdWJsZXNob290aW5nL2hlbHAtYXJ0aWNsZXMvdmVyY2VsLWNhY2hpbmctaXNzdWU=">解决方案<i class="fa fa-external-link-alt"></i></span>，才知道需要在npm的build脚本前面加<code>prisma generate</code> ，也就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot; &#123;</span><br><span class="line">   &quot;build&quot;: &quot;prisma generate &amp;&amp; &lt;actual-build-command&gt;&quot;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="swagger"><a href="#swagger" class="headerlink" title="swagger"></a>swagger</h3><p>项目配置了swagger，本地运行完全没问题，部署到vercel后swagger页面打不开了，一看network全是404，猜测是vercel的机制导致swagger找不到生成的静态文件了，解决办法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SwaggerModule.setup(&#x27;/swagger&#x27;, app, swaggerDocument, &#123;</span><br><span class="line">    customCssUrl:</span><br><span class="line">      &#x27;https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/4.15.5/swagger-ui.min.css&#x27;,</span><br><span class="line">    customJs: [</span><br><span class="line">      &#x27;https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/4.15.5/swagger-ui-bundle.js&#x27;,</span><br><span class="line">      &#x27;https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/4.15.5/swagger-ui-standalone-preset.js&#x27;,</span><br><span class="line">    ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Nestjs </tag>
            
            <tag> Vercel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome插件开发无法收到消息排查</title>
      <link href="/2025-03-07-chrome-extension-message-miss-issue.html"/>
      <url>/2025-03-07-chrome-extension-message-miss-issue.html</url>
      
        <content type="html"><![CDATA[<p>最近开发的插件里有个功能是，从content_script发送消息到background，等待background处理完content_script执行剩下逻辑，类似以下逻辑</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// content_script.js</span><br><span class="line">async function handle() &#123;</span><br><span class="line">  const response = await chrome.runtime.sendMessage(&#123;</span><br><span class="line">    type: &#x27;download&#x27;,</span><br><span class="line">    messageId</span><br><span class="line">  &#125;)</span><br><span class="line">  if (response.ok) &#123;</span><br><span class="line">    console.log(&#x27;download voice success&#x27;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    console.log(&#x27;download voice error&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// background.js</span><br><span class="line">chrome.runtime.onMessage.addListener((request, sender, sendResponse) =&gt; &#123;</span><br><span class="line">  ...</span><br><span class="line">  await doSync(sendResponse) // 异步函数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async doSync(sendResponse) &#123;</span><br><span class="line">  sendResponse(&#123;ok: true&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>期望行为是当background执行完异步函数，返回ok，content_script会打印success，实际结果是content_script收到的response永远是undefined，且background的异步函数确实异步在执行。</p><p>搜了一下谷歌官方文档，里面提到</p><blockquote><p>When you send a message, the event listener that handles the message is passed an optional third argument, <code>sendResponse</code>. This is a function that takes a JSON-serializable object that is used as the return value to the function that sent the message. By default, the <code>sendResponse</code> callback must be called synchronously. If you want to do asynchronous work to get the value passed to <code>sendResponse</code>, you <strong>must</strong> return a literal <code>true</code> (not just a truthy value) from the event listener. Doing so will keep the message channel open to the other end until <code>sendResponse</code> is called.</p></blockquote><p>意思是当消息监听里含有异步操作时，必须要在消息监听函数最后返回true，所以上面的函数要修改成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// background.js</span><br><span class="line">chrome.runtime.onMessage.addListener((request, sender, sendResponse) =&gt; &#123;</span><br><span class="line">  ...</span><br><span class="line">  doSync(sendResponse) // 异步函数</span><br><span class="line">  return true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async doSync(sendResponse) &#123;</span><br><span class="line">  sendResponse(&#123;ok: true&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样在content_script里就能如期收到返回值了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ChromeExtension </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ffmpeg提取的音视频不同步的问题</title>
      <link href="/2025-02-06-av-out-of-sync.html"/>
      <url>/2025-02-06-av-out-of-sync.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近有用户反馈，上传的视频经过处理后，音频和字幕跟视频对不上的问题，研究了几个视频后发现，有以下几种情况</p><span id="more"></span><ol><li><p>提取的音频时长短于视频<br><img src="/2025-02-06-av-out-of-sync/img1.webp" alt="视频时长"><br><img src="/2025-02-06-av-out-of-sync/img2.webp" alt="音频时长"></p></li><li><p>提取的音频时长没有问题，但是中间几秒会突然出现音频提早1s的情况</p></li></ol><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>一开始是直接搜索ffmpeg extract audio not same as video，看了几个stackoverflow的回答，以及其他论坛的回答，都是说加-async 1，但尝试过发现-async 1无法结果问题，实际上可以解决case2，但无法解决case1。</p><p>看了好多解决方法后，有个人说可以用apad这个audio filter，于是接着搜索apad是啥，发现apad是给音频填充数据包用的，于是有了一个新思路，可能是因为视频文件里的音轨存在空数据包，而提取的音轨会丢掉这些数据包，所以导致提取音频时长不一致，于是搜索ffmpeg extract audio with fill gap，找到了</p><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9zdXBlcnVzZXIuY29tL3F1ZXN0aW9ucy8xNTUyOTE2L2F1ZGlvLWlzLW5vdC1pbi1zeW5jLWFmdGVyLXJlLWVuY29kaW5nLXdpdGgtZmZtcGVnLW9mLXZpZGVvLWFuZC1jaGFuZ2luZy1hdWRpby1m">https://superuser.com/questions/1552916/audio-is-not-in-sync-after-re-encoding-with-ffmpeg-of-video-and-changing-audio-f<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9mb3J1bS52aWRlb2hlbHAuY29tL3RocmVhZHMvMzc3NTQ3LUZGTVBFRy1ob3ctdG8tZmlsbC10aGUtYXVkaW8tZ2FwLXdpdGgtc2lsZW5jZQ==">https://forum.videohelp.com/threads/377547-FFMPEG-how-to-fill-the-audio-gap-with-silence<i class="fa fa-external-link-alt"></i></span></p></li></ul><p>根据帖子里的思路，尝试了<code>ffmpeg -i video-raw.video -i input.flac -map 0:v -map 1:a -shortest -af apad -c:a libmp3lame -c:v copy marco3.mp4</code> 然后再提取音频，结果出来的音频时长一致了，正当我以为解决了问题的时候，扔进播放器一放，音频跟视频还是对不上。之后还想过使用ffmpeg的detectsilence，检测视频中音轨空白部分，然后手动补上，但是检测出来的结果不对，所以也行不通</p><h1 id="绝处逢生"><a href="#绝处逢生" class="headerlink" title="绝处逢生"></a>绝处逢生</h1><p>正当思路陷入死胡同时，我请教了一位音视频专家朋友，他给了我几个建议是</p><p><img src="/2025-02-06-av-out-of-sync/img3.webp"><br>关于pts，dts等概念，可以参考<span class="exturl" data-url="aHR0cDovL2RyYW5nZXIuY29tL2ZmbXBlZy90dXRvcmlhbDA1Lmh0bWw=">http://dranger.com/ffmpeg/tutorial05.html<i class="fa fa-external-link-alt"></i></span></p><p>根据上面的建议，可以通过<code>ffprobe -v error -print_format json -show_format -show_streams video-raw-mul-3.mp4</code> 拿到轨道的pts信息，问题视频的ffprobe信息如下</p><p>|<img src="/2025-02-06-av-out-of-sync/img4.webp" alt="视频">|<img src="/2025-02-06-av-out-of-sync/img5.webp" alt="音频">|</p><p>抽取的音频的ffprobe信息如下</p><p><img src="/2025-02-06-av-out-of-sync/img6.webp"><br>可以看出，抽取的音频start_pts跟视频音轨的start_pts对不上，看数字不太明显，通过剪映可以更明显地看出延迟</p><p><img src="/2025-02-06-av-out-of-sync/img7.webp"><br>上面视频的音轨柱子明显比下面的后面，于是问题找到了，就该解决了。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>经过上面的分析，可以知道case1的情况是原视频中的音视频并没有不同步，只是音频的start_pts和视频的不一样，而ffmpeg的-vn参数提取的音频会默认设置为0，这样就导致单独播放音频时，声音与视频画面出现延迟现象，于是我们需要重新设置提取音频的start_pts参数。</p><p>经过一阵搜索，从<span class="exturl" data-url="aHR0cHM6Ly90cmFjLmZmbXBlZy5vcmcvdGlja2V0LzI5Mzg=">https://trac.ffmpeg.org/ticket/2938<i class="fa fa-external-link-alt"></i></span>找到了解决方法，通过audio filter里的<code>aresample=first_pts=0</code> 可以重新对音频进行设置first_pts，目标值就是原视频中音轨的start_pts，经过测试后发现视频同步。</p><p>上面还有个case2是怎么解决的呢？我去了一个视频论坛提问，帖子在这<span class="exturl" data-url="aHR0cHM6Ly9mb3J1bS52aWRlb2hlbHAuY29tL3RocmVhZHMvNDEwMzUxLWF1ZGlvLWlzLW91dC1vZi1zeW5jLWFmdGVyLWV4dHJhY3QtZnJvbS12aWRlbyNwb3N0MjY5NzE4Mg==">https://forum.videohelp.com/threads/410351-audio-is-out-of-sync-after-extract-from-video#post2697182<i class="fa fa-external-link-alt"></i></span>，第一位老哥回复依然是-async 1，但我之前用的case1的视频测试过这个命令，发现不行，所以再没有试过，因为上面已经解决了case1，于是抱着试一试的想法，用-async 1提取了case2的音频，经过测试发现也没有问题。于是</p><ol><li><p>对于音频时长不一致，使用<code>ffmpeg -i input.mp4 -async 1 -vn -ar aresample=first_pts=$pts audio.flac</code>解决</p></li><li><p>对于音频时长一致，播放中间出现不同步，使用<code>ffmpeg -i input.mp4 -async 1 -vn audio.flac</code> 解决</p></li></ol><p>为什么async 1对case1不起作用呢，是因为async解决的是原视频的声音不同步，而case1原视频声音并没有不同步，自然不起作用</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows配置terminal记住ssh pass phrase</title>
      <link href="/2025-02-02-windows-ssh-passphrase.html"/>
      <url>/2025-02-02-windows-ssh-passphrase.html</url>
      
        <content type="html"><![CDATA[<p>最近需要临时用Windows笔记本开发，在配置完Windows terminal后，发现一个问题，我的ssh key是带密码的，每次执行git操作都需要手动输入密码。Mac上可以很方便地通过Apple key chain保存，但Windows没有这么方便的工具，经过一番搜索，终于找到了替代方法。</p><span id="more"></span><ol><li><p>Win+r后输入services.msc，找到OpenSSH选项，设置运行和自动启动<br><img src="/2025-02-02-windows-ssh-passphrase/img1.webp"></p></li><li><p>在terminal里输入并执行<code>git config --global core.sshCommand C:/Windows/System32/OpenSSH/ssh.exe</code></p></li><li><p>在ssh目录的config配置文件里输入以下内容（通常位于C盘用户目录下.ssh文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line">AddKeysToAgent yes</span><br><span class="line">IdentitiesOnly yes</span><br></pre></td></tr></table></figure></li><li><p>在terminal里输入并执行<code>ssh-add $HOME/.ssh/your_file_name</code> ，然后输入ssh key的pass phrase</p></li></ol><p>最后关闭terminal就大功告成，之后打开terminal执行任何git命令不再需要输入pass phrase</p>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用ffprobe读取mp4片段文件</title>
      <link href="/2025-01-15-ffprobe-read-mp4.html"/>
      <url>/2025-01-15-ffprobe-read-mp4.html</url>
      
        <content type="html"><![CDATA[<p>最近在实现一个功能，希望能快速获取mp4文件的元数据，普通做法是把把整个视频发到后端，通过ffprobe读取，但这种方式太消耗资源，于是希望能上传一部分mp4的二进制数据给后端，快速完成解析。</p><p>在实现过程中发现ffprobe读取某些mp4的切片文件时会报错<code>moov atom not found</code> 。查阅资料得知，mp4的metadata结构长下面这样</p><span id="more"></span><p><img src="/2025-01-15-ffprobe-read-mp4/1.webp"><br>moov部分就是metadata（想要看更详细的format信息可以看<span class="exturl" data-url="aHR0cHM6Ly93d3cudXZjZW50cmFsLmNvbS9maWxlcy9DRkZNZWRpYUZvcm1hdC0yXzEucGRm">CFFMediaFormat<i class="fa fa-external-link-alt"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvYXJjaGl2ZS9kb2N1bWVudGF0aW9uL1F1aWNrVGltZS9RVEZGL1FURkZDaGFwMi9xdGZmMi5odG1sIy8vYXBwbGVfcmVmL2RvYy91aWQvVFA0MDAwMDkzOS1DSDIwNC01NjMxMw==">Apple文档<i class="fa fa-external-link-alt"></i></span>）。这部分既可以在文件开头，也可以在文件末尾，通过<span class="exturl" data-url="aHR0cHM6Ly9hdG9taWNwYXJzbGV5LnNvdXJjZWZvcmdlLm5ldC8=">atomicparsley<i class="fa fa-external-link-alt"></i></span> 查看两种不同形式的mp4文件。</p><p>|<img src="/2025-01-15-ffprobe-read-mp4/2.webp" alt="moov在开头">|<img src="/2025-01-15-ffprobe-read-mp4/3.webp" alt="moov在末尾">|</p><p>上面两张图对比了一下正常文件和报错文件的结构，确实发现报错文件的moov在末尾，因此ffprobe读取不到。用ffmpeg尝试了一下手动把moov移动到文件开头，再使用ffprobe解析文件前1M，发现便可以了，所以问题就是出在mp4文件的moov文件位置。</p><p>于是突发奇想，能不能把后面moov的部分slice后拼到前面ftyp后面让ffprobe读取，尝试了一下发现还是不行，ffprobe还是会把moov部分当作mdat读取，而且结构还是坏的，似乎进入了一条死胡同。想了许久后想到，mp4文件也是个二进制文件，如果ffprobe无法识别，何不自己直接读取二进制识别，于是又搜索mp4文件moov块的详细分布，最后找到一篇文章，<span class="exturl" data-url="aHR0cHM6Ly93d3cuY2ltYXJyb25zeXN0ZW1zLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAxNy8wNC9FbGVtZW50cy1vZi10aGUtSC4yNjQtVmlkZW9BQUMtQXVkaW8tTVA0LU1vdmllLXYyXzAucGRm">链接在这<i class="fa fa-external-link-alt"></i></span>。里面详细说明了moov的二进制描述，于是本地尝试了一下，用hexdump读取拼接的mp4文件，内容如下</p><p><img src="/2025-01-15-ffprobe-read-mp4/4.webp"><br>结合下面的mp4时长计算公式</p><p>Time scale</p><p>A time value that indicates the time scale for this movie—that<br>is, the number of time units that pass per second in its time coordinate<br>system. A time coordinate system that measures time in sixtieths of a<br>second, for example, has a time scale of 60.</p><p>Duration</p><p>A time value that indicates the duration of the movie in time<br>scale units. Note that this property is derived from the movie’s tracks.<br>The value of this field corresponds to the duration of the longest<br>track in the movie.</p><p>duration需要根据time scale换算</p><p>可以看到红圈标着的就是moov块的开始标记，根据上面文章的说明，蓝色光标处的00 26 23 e7便是duration信息，换算成十进制是2499559，单位毫秒。看来直接读取二进制的路是可以走通的，但显然自己读取很不靠谱，毕竟mp4文件格式还是挺复杂的，于是又开始搜索mp4文件解析之类的库，最后找到了<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pkb25nMjIvbXA0cmVhZGVy">https://github.com/zdong22/mp4reader<i class="fa fa-external-link-alt"></i></span>，支持解析拼接的mp4文件，且只有单文件，无依赖，接入友好。输出效果如下</p><p><img src="/2025-01-15-ffprobe-read-mp4/5.webp"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google cloud storage resume upload的坑</title>
      <link href="/2024-12-06-google-storage-resume-upload.html"/>
      <url>/2024-12-06-google-storage-resume-upload.html</url>
      
        <content type="html"><![CDATA[<p>最近在做一个需求，网站需要支持用户上传本地视频文件做自动剪辑，因为公司用的云服务是Google cloud，自然选择接入Google cloud storage，于是经过一番调研，选择了resumable upload这个方案。在正式接入前端前，我打算先跟着官网文档，把curl的部分走通。</p><span id="more"></span><p><img src="/2024-12-06-google-storage-resume-upload/1.webp"></p><p>一开始按照文档提示，去掉了—data-binary和content-length用curl测试，发现接口没有任何返回值</p><p><img src="/2024-12-06-google-storage-resume-upload/2.webp"><br><img src="/2024-12-06-google-storage-resume-upload/7.webp"><br>然后尝试在前端用fetch测试，一直报错400 parseError，这里强烈吐槽谷歌浏览器，400错误的response里是不会显示任何返回的数据的，非常不友好，下图是Firefox测试返回的400错误信息</p><p><img src="/2024-12-06-google-storage-resume-upload/3.webp"><br>经过一番搜索还是无法找到问题，于是用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vb2F1dGhwbGF5Z3JvdW5kLz9jb2RlPTQvMEFiVVIyVk4wMk5SWXV4UlR0MElZOFBsX1gycy1meERyN0toaHBZZjJja0hReHdJdUpINFowWl9GX2VkTHA3Zk5oWldJdncmc2NvcGU9aHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9kZXZzdG9yYWdlLnJlYWRfd3JpdGU=">google playground<i class="fa fa-external-link-alt"></i></span>工具测试upload接口，发现接口成功返回了</p><p><img src="/2024-12-06-google-storage-resume-upload/4.webp"><br>仔细对比了一下，发现playground里用的是http1.1，于是我把curl也改成了http1.1，发现接口也调用成功了</p><p><img src="/2024-12-06-google-storage-resume-upload/5.webp"><br>但浏览器又不能强制用http1.1，于是继续研究，经过不断测试，比如改contentType，去掉contentLength，都不行，最后发现playground里有个<code>content-length: 0</code> ，抱着试一试的心态测试了一下，居然可以了</p><p><img src="/2024-12-06-google-storage-resume-upload/6.webp"><br>想不到浓眉大眼的谷歌写的文档也有这么多坑。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Google Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS快捷指令创建不带时间的提醒事项</title>
      <link href="/2024-11-22-shortcut-reminder-without-time.html"/>
      <url>/2024-11-22-shortcut-reminder-without-time.html</url>
      
        <content type="html"><![CDATA[<p>最近在开发一个快捷指令，核心功能是从Notion获取数据，创建提醒事项，在开发过程中发现一个问题，当我使用下面这个Action创建提醒事项时，<code>dueDate</code>变量在没有时间部分下，创建出来的提醒事项会自动带上12:00，即使设置了format也没用。</p><span id="more"></span><p><img src="/2024-11-22-shortcut-reminder-without-time/1.webp"><br>于是尝试搜索了一下，在Reddit里找到一篇<span class="exturl" data-url="aHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL3Nob3J0Y3V0cy9jb21tZW50cy9pOW44ZTAvY3JlYXRlX2FfcmVtaW5kZXJfd2l0aF9hX2RhdGVfYnV0X25vX3RpbWUv">帖子<i class="fa fa-external-link-alt"></i></span>，解决办法是在dueDate变量后面手动填上<code>at no time</code> ，问题就解决了。</p><p><img src="/2024-11-22-shortcut-reminder-without-time/2.webp"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 快捷指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postgres citext类型忽略大小写查询时遇到的坑</title>
      <link href="/2024-10-23-postgresql-citext-issue.html"/>
      <url>/2024-10-23-postgresql-citext-issue.html</url>
      
        <content type="html"><![CDATA[<p>最近项目里有个需求是模糊查询某个字段时需要忽略大小写，一开始的实现很简单，用pg自带的LOWER函数，<code>WHERE LOWER(name) LIKE LOWER(’%’ || #&#123;query.name&#125; || ‘%’)</code> 但随着要修改的sql越来越多，这种方式容易遗漏，于是就想办法能不能在列上做一些事情，一劳永逸。</p><span id="more"></span><p>经过一番搜索发现pg有一种<span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy9jdXJyZW50L2NpdGV4dC5odG1s">citext<i class="fa fa-external-link-alt"></i></span>的列类型，支持忽略大小写搜索，于是马上尝试把列类型改成了citext，改完重启服务测试，居然查不到记录。怀疑是不是sql有问题，于是复制了mybatis打印的sql去数据库里执行。诡异的事情来了，sql的执行是能查到记录的，也就是说sql没问题，问题出在mybatis，或者说是jdbc层。</p><p>顺着这个思路搜索，找到一篇pg社区的<span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvbWVzc2FnZS1pZC9DQUpGczBRQ19ubjVXeGhyZ011WHNLPVdDYzVKSHZNbUdrK3pIb2l3THotRUc3VzJhNEFAbWFpbC5nbWFpbC5jb20=">问题解答<i class="fa fa-external-link-alt"></i></span>，大概意思是</p><blockquote><p>问题的核心出在jdbc在发送query到pg server时指定查询参数的类型，在prepareStatement.setString时jdbc会有个判断，设置查询参数为varchar还是unspecified。如果设置了varchar，那将会丢失citext的忽略大小写特性，pg会按照varchar类型的行为处理。</p></blockquote><p>同时在上面的回答里还给了解决方案，在jdbc connection url的末尾加上<code>stringtype=unspecified</code> 。至于这个标记的作用，可以在pg的<span class="exturl" data-url="aHR0cHM6Ly9qZGJjLnBvc3RncmVzcWwub3JnL2RvY3VtZW50YXRpb24vdXNlLyNjb25uZWN0aW9uLXBhcmFtZXRlcnM=">这篇官方文档<i class="fa fa-external-link-alt"></i></span>里查到。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美化Spring Boot在datadog上的日志</title>
      <link href="/2024-09-19-springboot-log-datadog-beautiful.html"/>
      <url>/2024-09-19-springboot-log-datadog-beautiful.html</url>
      
        <content type="html"><![CDATA[<p>我们目前现有的SpringBoot项目所有日志都是用logback框架打印，发送到datadog上，目前发现一个问题是默认的logback打印的日志在datadog上非常不美观，类似下面这种</p><span id="more"></span><p><img src="/2024-09-19-springboot-log-datadog-beautiful/img1.webp" alt="未美化的日志"><br>所有日志都是INFO，没有不同日志等级显示不同颜色的区分。异常栈没有折叠，占用一大片位置，非常难看。而且也没法用datadog的查询attribute功能查traceId。原因是datadog读取日志是按照json格式读取的，而默认的logback输出就是个字符串，于是datadog就直接把整个日志字符串展示出来了。</p><p>经过一番搜索，发现有个库叫<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xvZ2ZlbGxvdy9sb2dzdGFzaC1sb2diYWNrLWVuY29kZXI=">logstash-logback-encoder<i class="fa fa-external-link-alt"></i></span>，作用就是把logback输出的日志格式化成logstash的格式，再发送给datadog，具体配置如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property name=&quot;LOG_HOME&quot; value=&quot;logs&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;CONSOLE_LOG_PATTERN&quot; value=&quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%thread] [%X&#123;traceId&#125;] %-5level %logger&#123;36&#125; - %msg%n&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;include resource=&quot;org/springframework/boot/logging/logback/defaults.xml&quot;/&gt;</span><br><span class="line">    &lt;appender name=&quot;CONSOLE&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;encoder class=&quot;net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder&quot;&gt;</span><br><span class="line">            &lt;includeCallerData&gt;true&lt;/includeCallerData&gt;</span><br><span class="line">            &lt;providers&gt;</span><br><span class="line">                &lt;pattern&gt;</span><br><span class="line">                    &lt;pattern&gt;</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;timestamp&quot;: &quot;%date&#123;\&quot;yyyy-MM-dd HH:mm:ss.SSS\&quot;, UTC&#125;&quot;,</span><br><span class="line">                            &quot;level&quot;: &quot;%level&quot;,</span><br><span class="line">                            &quot;logger&quot;: &quot;%logger&quot;,</span><br><span class="line">                            &quot;className&quot;: &quot;%class&quot;,</span><br><span class="line">                            &quot;lineNumber&quot;: &quot;%line&quot;,</span><br><span class="line">                            &quot;message&quot;: &quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%thread] [%X&#123;traceId&#125;] %-5level %logger&#123;36&#125; - %msg%n&quot;,</span><br><span class="line">                            &quot;traceId&quot;: &quot;%mdc&#123;traceId&#125;&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &lt;/pattern&gt;</span><br><span class="line">                &lt;/pattern&gt;</span><br><span class="line">                &lt;stackTrace&gt;</span><br><span class="line">                    &lt;throwableConverter class=&quot;net.logstash.logback.stacktrace.ShortenedThrowableConverter&quot;&gt;</span><br><span class="line">                        &lt;maxDepthPerThrowable&gt;30&lt;/maxDepthPerThrowable&gt;</span><br><span class="line">                        &lt;maxLength&gt;2048&lt;/maxLength&gt;</span><br><span class="line">                        &lt;shortenedClassNameLength&gt;20&lt;/shortenedClassNameLength&gt;</span><br><span class="line">                        &lt;rootCauseFirst&gt;true&lt;/rootCauseFirst&gt;</span><br><span class="line">                    &lt;/throwableConverter&gt;</span><br><span class="line">                &lt;/stackTrace&gt;</span><br><span class="line">            &lt;/providers&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;root level=&quot;INFO&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;CONSOLE&quot;/&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配完后的datadog日志长这样，可以看到有颜色筛选，异常栈都折叠在一个日志里了，看起来清爽多了。</p><p><img src="/2024-09-19-springboot-log-datadog-beautiful/img2.webp" alt="美化后的日志"></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google Drive resumable upload api的坑</title>
      <link href="/2024-08-16-google-drive-resumable-upload-api.html"/>
      <url>/2024-08-16-google-drive-resumable-upload-api.html</url>
      
        <content type="html"><![CDATA[<p>最近在开发一个ffmpeg生成短视频的程序，程序里需要对接Google drive，当程序生成视频成功后，需要把视频上传到drive。在Google的文档里上传总共有3个API，分别是</p><ul><li><p>single upload</p></li><li><p>multiple upload</p></li><li><p>resumable upload</p></li></ul><span id="more"></span><p>前面2个upload最大支持5MB的文件，而我这个程序生成的视频最小都有几十MB，所以只能选择最后一种upload。</p><p>按照<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vZHJpdmUvYXBpL2d1aWRlcy9tYW5hZ2UtdXBsb2FkcyNyZXN1bWFibGU=">官方文档<i class="fa fa-external-link-alt"></i></span>的指南，resumable upload分为2个步骤：</p><ol><li><p>初始化upload，通过一个POST接口获取upload session url</p></li><li><p>获取上一步的session url，使用PUT调用url，同时把文件blob传入</p></li></ol><p>那么这里就遇到一个问题，文件名和文件夹信息从哪里传入？文档上压根没提到这回事。经过一番搜索，我发现了一个GitHub开源工具，包装好了upload API。于是立马看看人家的源码是怎么处理这个问题的。</p><p>功夫不负有心人，在<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL292ZXJsb29rbW90ZWwvZ29vZ2xlLWRyaXZlLXVwbG9hZGVyL2Jsb2IvbWFzdGVyL2xpYi91cGxvYWRVcmwuanMjTDQ5">uploadUrl文件<i class="fa fa-external-link-alt"></i></span>里找到了需要的参数，测试一看又报错了，404 file not found。我又仔仔细细对了一遍folder id，发现没错啊。经过一番思索猜测可能还是少了一些关键参数，因为我要上传的folder是一个shared drive，而drive API里在list API部分专门有提到几个参数是关于shared，分别是<code>supportsAllDrives</code>，<code>corpora</code>，<code>includeItemsFromAllDrives</code>，经过各种组合尝试，最终发现需要在初始化upload的接口里加入<code>supportsAllDrives=true&amp;corpora=drive</code>，最后测试终于上传成功了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Google drive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot JPA 自定义ID生成策略</title>
      <link href="/2024-06-17-springboot-custom-id-generator.html"/>
      <url>/2024-06-17-springboot-custom-id-generator.html</url>
      
        <content type="html"><![CDATA[<p>在JPA中，我们是通过<code>@id</code>和<code>@GeneratedValue</code>来指定id主键生成策略的，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Id</span><br><span class="line">@GeneratedValue(strategy = GenerationType.AUTO)</span><br><span class="line">@Column(name = &quot;id&quot;)</span><br><span class="line">private String id;</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><p>JPA内置提供了4种策略，分别是：</p><ul><li><p><strong>TABLE</strong>：使用一个特定的数据库表格来保存主键。</p></li><li><p><strong>SEQUENCE</strong>：根据底层数据库的序列来生成主键，条件是数据库支持序列。</p></li><li><p><strong>IDENTITY</strong>：主键由数据库自动生成（主要是自动增长型）</p></li><li><p><strong>AUTO</strong>：主键由程序控制(也是默认的,在指定主键时，如果不指定主键生成策略，默认为AUTO)</p></li></ul><p>当然，很多时候，这么几种策略并不够用，所以JPA还提供了扩展，允许我们自定义id生成策略，</p><p>具体使用就是多了一个<code>@GenericGenerator</code>注解，指定自定义名称以及策略，然后在<code>@GeneratedValue</code>中使用该策略，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Id</span><br><span class="line">@GeneratedValue(generator  = &quot;customId&quot;) // 这里注意generator里的值要和GenericGenerator的name一致</span><br><span class="line">@GenericGenerator(name = &quot;customId&quot;, strategy = &quot;com.zshnb.config.CustomIdGenerator&quot;)</span><br><span class="line">private String id;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class CustomIdGenerator implements IdentifierGenerator&#123;</span><br><span class="line">   /*</span><br><span class="line">     @param o: 表示当前保存的entity对象</span><br><span class="line">   */</span><br><span class="line">   @Override</span><br><span class="line">    public Serializable generate(SessionImplementor sessionImplementor, Object o) throws HibernateException &#123;</span><br><span class="line">        String date = String.valueOf(new Date().getTime());</span><br><span class="line">        return date.slice(4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果这时候希望在<code>CustomIdGenerator</code>里和SpringBoot集成，比如调用其他component的方法生成id，有以下类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class IdGenerator &#123;</span><br><span class="line">    public String getId() &#123;</span><br><span class="line">        // 查数据库，生成自定义前缀的id</span><br><span class="line">        return &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这时候我们希望能在<code>CustomIdGenerator</code>里注入<code>IdGenerator</code>，调用getId方法，但<code>CustomIdGenerator</code>是hibernate管理的，没办法参与Spring的IOC机制，有什么办法呢？可以通过以下方式解决，首先新建<code>ApplicationContextHolder</code>类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class ApplicationContextHolder implements ApplicationContextAware &#123;</span><br><span class="line"></span><br><span class="line">    private static ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;</span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            if (ApplicationContextHolder.applicationContext == null) &#123;</span><br><span class="line">                ApplicationContextHolder.applicationContext = applicationContext;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T&gt; T getBean(Class&lt;T&gt; clazz) &#123;</span><br><span class="line">        return applicationContext.getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T&gt; T getBean(String qualifier, Class&lt;T&gt; clazz) &#123;</span><br><span class="line">        return applicationContext.getBean(qualifier, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后修改CustomIdGenerator，获取需要注入的对象即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class CustomIdGenerator implements IdentifierGenerator&#123;</span><br><span class="line">   /*</span><br><span class="line">     @param o: 表示当前保存的entity对象</span><br><span class="line">   */</span><br><span class="line">   @Override</span><br><span class="line">    public Serializable generate(SessionImplementor sessionImplementor, Object o) throws HibernateException &#123;</span><br><span class="line">        IdGenerator idGenerator = ApplicationContextHolder.getBean(IdGenerator.class);</span><br><span class="line">        return idGenerator.getId();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS同步高德地图收藏夹到Notion</title>
      <link href="/2024-05-29-gaode-sync-favorite.html"/>
      <url>/2024-05-29-gaode-sync-favorite.html</url>
      
        <content type="html"><![CDATA[<p>最近在小红书看到一位博主吐槽自己的高德地图收藏无法编辑，也无法查看，一点击收藏地点就会自动取消收藏，这可能是高德地图的bug，同时也让我有了一个想法，就是把高德地图的收藏地点全部同步到Notion中，有几个好处：</p><span id="more"></span><ol><li><p>不用担心高德地图的bug导致收藏消失或者无法查看</p></li><li><p>可以很方便地根据城市筛选收藏地点</p></li><li><p>可以跟Notion其他页面联动</p></li></ol><p><img src="/2024-05-29-gaode-sync-favorite/img1.webp" alt="高德收藏夹"></p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><ol><li><p>下载<span class="exturl" data-url="aHR0cHM6Ly93d3cuaWNsb3VkLmNvbS9zaG9ydGN1dHMvNDAyMDc5MjE1ODkxNDU0MThiZDdjZjk2MTFhMTlkZDE=">快捷指令<i class="fa fa-external-link-alt"></i></span>。</p></li><li><p>复制<span class="exturl" data-url="aHR0cHM6Ly96aGVuZ3NpaHVhLm5vdGlvbi5zaXRlLzI3NTNkZDQxYWEyODQzNzBiOWI2NWIzOTMzMzg4YjA2">Notion模板<i class="fa fa-external-link-alt"></i></span>到自己的workspace。<br><img src="/2024-05-29-gaode-sync-favorite/img2.webp" alt="ALT"></p></li><li><p>在浏览器中访问刚才复制的模板页面，然后查看database，复制databaseId，记住databaseId的地址后面是带?v的，如果没看到，说明地址不对。<br><img src="/2024-05-29-gaode-sync-favorite/img3.webp" alt="ALT"><br><img src="/2024-05-29-gaode-sync-favorite/img6.webp" alt="ALT"></p></li><li><p>访问<span class="exturl" data-url="aHR0cHM6Ly93d3cubm90aW9uLnNvL215LWludGVncmF0aW9ucw==">Notion integration页面<i class="fa fa-external-link-alt"></i></span>，新建一个integration，之后点击show再点copy，复制secret key<br><img src="/2024-05-29-gaode-sync-favorite/img4.webp" alt="ALT"></p></li><li><p>把前面复制的databaseId和secret key分别替换快捷指令里的databaseId和key<br><img src="/2024-05-29-gaode-sync-favorite/img5.webp" alt="词典"></p></li></ol><p>大功告成。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 快捷指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ffmpeg使用xfade滤镜滑入滑出时间对不齐的问题</title>
      <link href="/2024-05-27-ffmpeg-xfade-unalign.html"/>
      <url>/2024-05-27-ffmpeg-xfade-unalign.html</url>
      
        <content type="html"><![CDATA[<p>最近在做图片拼接视频的项目时，需要实现一个功能：在每张图片中间加滑入滑出的过渡效果。ffmpeg有一个<span class="exturl" data-url="aHR0cHM6Ly9mZm1wZWcub3JnL2ZmbXBlZy1maWx0ZXJzLmh0bWwjeGZhZGU=">xfade<i class="fa fa-external-link-alt"></i></span>的filter，支持slideleft&#x2F;slideright等过渡效果（<span class="exturl" data-url="aHR0cHM6Ly90cmFjLmZmbXBlZy5vcmcvd2lraS9YZmFkZQ==">在这<i class="fa fa-external-link-alt"></i></span>可以看到所有过渡效果的动图）。</p><span id="more"></span><p>最开始我尝试使用fade的filter格式应用xfade，类似<code>-filter_complex “zoompan=xxxx,xfade=xxxx”</code> 这个命令直接就报错了，搜了一下xfade的语法才知道xfade是需要输入两个视频流，然后输出一个视频流。于是改成了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -t 8.34 -i ./tmp/R70NOq/script_1_image_20240326_211935.png -t 10.219999999999999 -i ./tmp/R70NOq/script_2_image_20240326_211958.png -t 10.46 -i ./tmp/R70NOq/script_3_image_20240326_212013.png -t 8.360000000000003 -i ./tmp/R70NOq/script_4_image_20240326_212028.png -t 8.799999999999997 -i ./tmp/R70NOq/script_5_image_20240326_212045.png -t 8.380000000000003 -i ./tmp/R70NOq/script_6_image_20240326_212059.png -i ./tmp/R70NOq/input.mp3 -filter_complex &quot;[0:v]scale=8000x4000,zoompan=z=&#x27;min(zoom+0.0015,1.5)&#x27;:x=&#x27;x-10&#x27;:y=&#x27;y&#x27;:d=209[v0];[1:v]scale=8000x4000,zoompan=z=&#x27;min(zoom+0.0015,1.5)&#x27;:x=&#x27;x+10&#x27;:y=&#x27;y&#x27;:d=255[v1];[2:v]scale=8000x4000,zoompan=z=&#x27;min(zoom+0.0015,1.5)&#x27;:y=&#x27;if(gte(ih,y),ih,y)-10&#x27;:x=&#x27;x&#x27;:d=264[v2];[3:v]scale=8000x4000,zoompan=z=&#x27;min(zoom+0.0015,1.5)&#x27;:y=&#x27;y+10&#x27;:x=&#x27;x&#x27;:d=209[v3];[4:v]scale=8000x4000,zoompan=z=&#x27;min(zoom+0.0015,1.5)&#x27;:x=&#x27;x-10&#x27;:y=&#x27;y&#x27;:d=220[v4];[5:v]scale=8000x4000,zoompan=z=&#x27;min(zoom+0.0015,1.5)&#x27;:x=&#x27;x+10&#x27;:y=&#x27;y&#x27;:d=210[v5];[v0][v1]xfade=transition=slideleft:duration=0.5:offset=7.84[x0];[v1][v2]xfade=transition=slideleft:duration=0.5:offset=17.55[x1];[v2][v3]xfade=transition=slideleft:duration=0.5:offset=27.51[x2];[v3][v4]xfade=transition=slideleft:duration=0.5:offset=34.38[x3];[v4][v5]xfade=transition=slideleft:duration=0.5:offset=42.68,format=yuv420p[v]&quot; -map &quot;[v]&quot; -map 6 -s 1024x1792 ./tmp/R70NOq/concat2.mp4</span><br></pre></td></tr></table></figure><p>这个命令会报错“invalid stream label v1”，搜索了一下找到一个<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjUwNzIzNTUvZmZtcGVnLWludmFsaWQtc3RyZWFtLXNwZWNpZmllci1zaQ==">回答<i class="fa fa-external-link-alt"></i></span>解释说在ffmpeg的filter里，中间阶段的流是不能复用的，一种解决方案是用split把一个流拆成两个同样的流供后面使用，我选择了另一种解决方案，把前一个xfade的输出流和原始输入流作为后一个xfade的输入流，命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -t 8.34 -i ./tmp/R70NOq/script_1_image_20240326_211935.png -t 10.219999999999999 -i ./tmp/R70NOq/script_2_image_20240326_211958.png -t 10.46 -i ./tmp/R70NOq/script_3_image_20240326_212013.png -t 8.360000000000003 -i ./tmp/R70NOq/script_4_image_20240326_212028.png -t 8.799999999999997 -i ./tmp/R70NOq/script_5_image_20240326_212045.png -t 8.380000000000003 -i ./tmp/R70NOq/script_6_image_20240326_212059.png -i ./tmp/R70NOq/input.mp3 -filter_complex &quot;[0:v]scale=8000x4000,zoompan=z=&#x27;min(zoom+0.0015,1.5)&#x27;:x=&#x27;x-10&#x27;:y=&#x27;y&#x27;:d=209[v0];[1:v]scale=8000x4000,zoompan=z=&#x27;min(zoom+0.0015,1.5)&#x27;:x=&#x27;x+10&#x27;:y=&#x27;y&#x27;:d=255[v1];[2:v]scale=8000x4000,zoompan=z=&#x27;min(zoom+0.0015,1.5)&#x27;:y=&#x27;if(gte(ih,y),ih,y)-10&#x27;:x=&#x27;x&#x27;:d=264[v2];[3:v]scale=8000x4000,zoompan=z=&#x27;min(zoom+0.0015,1.5)&#x27;:y=&#x27;y+10&#x27;:x=&#x27;x&#x27;:d=209[v3];[4:v]scale=8000x4000,zoompan=z=&#x27;min(zoom+0.0015,1.5)&#x27;:x=&#x27;x-10&#x27;:y=&#x27;y&#x27;:d=220[v4];[5:v]scale=8000x4000,zoompan=z=&#x27;min(zoom+0.0015,1.5)&#x27;:x=&#x27;x+10&#x27;:y=&#x27;y&#x27;:d=210[v5];[v0][v1]xfade=transition=slideleft:duration=0.5:offset=7.84[x0];[x0][v2]xfade=transition=slideleft:duration=0.5:offset=17.55[x1];[x1][v3]xfade=transition=slideleft:duration=0.5:offset=27.51[x2];[x2][v4]xfade=transition=slideleft:duration=0.5:offset=34.38[x3];[x3][v5]xfade=transition=slideleft:duration=0.5:offset=42.68,format=yuv420p[v]&quot; -map &quot;[v]&quot; -map 6 -s 1024x1792 ./tmp/R70NOq/concat2.mp4</span><br></pre></td></tr></table></figure><p>可以看到v0和v1作为第一个xfade的输入产生了x0，接着x0和v2输入产生了x1，以此类推。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>上面的命令生成的视频是可以播放的，但是有一个问题，图片切换的时间点和预期的不一样，期望图片是在指定字幕结束的时间切换，但结果是越后面图片切换的时间点越提前了。这里先给出xfade的offset计算公式：</p><table><thead><tr><th><strong>input</strong></th><th><strong>input duration</strong></th><th>+</th><th><strong>previous xfade offset</strong></th><th>-</th><th><strong>xfade duration</strong></th><th><strong>offset&#x3D;</strong></th></tr></thead><tbody><tr><td><code>v0.mp4</code></td><td>4</td><td>+</td><td>0</td><td>-</td><td>1</td><td>3</td></tr><tr><td><code>v1.mp4</code></td><td>8</td><td>+</td><td>3</td><td>-</td><td>1</td><td>10</td></tr><tr><td><code>v2.mp4</code></td><td>12</td><td>+</td><td>10</td><td>-</td><td>1</td><td>21</td></tr><tr><td><code>v3.mp4</code></td><td>5</td><td>+</td><td>21</td><td>-</td><td>1</td><td>25</td></tr></tbody></table><p>可以看出xfade的计算方式，会导致越后面的片段，offset越提前，如果强行延后offset，会导致剪辑出来的视频出现黑屏，因为xfade要求输入的两个视频流，offset加上duration不能大于第一个视频流的长度。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>在没有应用xfade时，输入图片的时长都是根据音频字幕的开始结束时间计算出来的。由于xfade的offset会隐性改变输入源的时长，为了让结果视频图片能对的上字幕时间，我们可以手动延长输入源图片的时长，比如第一张图片原本时长在8s，希望在8s结束时出现slideleft，如果直接设置offset&#x3D;8s会黑屏，所以我们增加图片时长到8.5s，然后设置offset&#x3D;5:duration&#x3D;0.5，后面的图片以此类推，这样就能完美让xfade匹配上图片的切换时间。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ffmpeg对视频抽帧时让结果图片文件名带上时间戳</title>
      <link href="/2024-05-21-ffmpeg-extract-frame-with-file.html"/>
      <url>/2024-05-21-ffmpeg-extract-frame-with-file.html</url>
      
        <content type="html"><![CDATA[<p>最近一个项目，需要用ffmpeg对视频进行抽帧，大概是每隔几秒提取一张图片。这个命令非常简单：<code>ffmpeg -i input.mp4 -vf fps=1/3 %04d.png</code> 。但是有一个额外需求是，需要知道每张图片在视频中的时间，而上面的命令提取的图片文件名是单调递增的数字，所以我们需要对上面的命令做一些改造，改造后的命令如下：<br><code>ffmpeg -i input.mp4 -vf fps=1,select=&#39;not(mod(t,3))&#39; -vsync 0 -frame_pts 1 %d.jpg</code></p><p>这个命令的意思就是首先以每秒一张的帧数提取图片，然后当当前时间能被3整除时才进行提取，达到了3秒提取一张图片的效果，后面的-frame_pts 1开启了写入当前帧时间到文件名的功能。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024五一东北旅行游记</title>
      <link href="/2024-05-13-dongbei-travel.html"/>
      <url>/2024-05-13-dongbei-travel.html</url>
      
        <content type="html"><![CDATA[<p>去年冬季哈尔滨的出圈，让我也想去哈尔滨感受一下东北的风光和人情。可惜哈尔滨冬天的温度有点劝退我了，正好今年51劳动节有5天假期，凑上5天年假，决定用10天时间打卡东三省。虽然没有冬季的冰雪皑皑，也能感受一下东北的春天。总体行程如下：</p><p>5.2从上海出发到哈尔滨，玩到5.5。</p><p>5.5从哈尔滨出发到吉林延边，玩到5.7。</p><p>5.7从从延边出发到沈阳，玩到5.10号。</p><p>5.11从哈尔滨返回上海。</p><p>本来想加上长白天的行程，担心有点赶，就下次再去吧。</p><span id="more"></span><h1 id="哈尔滨"><a href="#哈尔滨" class="headerlink" title="哈尔滨"></a>哈尔滨</h1><h2 id="5-2-抵达-哈西"><a href="#5-2-抵达-哈西" class="headerlink" title="5.2 抵达 - 哈西"></a>5.2 抵达 - 哈西</h2><p>飞机抵达哈尔滨机场已经是晚上6点，酒店定在哈西万达商圈，提前查了一下路线，从机场到哈西最快的方法是坐机场大巴二号线哈西客运站下，票价20，用时大约50分钟。收拾好行李从酒店出来已经晚上8点多了，附近有万达和金爵万象两个商场，打开大众点评看了一圈附近几乎都是烧烤店，来东北怎么能不吃烧烤呢，于是挑了一家评分最高的。评价是味道不错，而且分量挺大的，我点了一个100的双人套餐，结果两人没吃完还剩了好多肉串。就是店里因为有驻唱（可能还是人家特色）环境特别嘈杂。而且邻桌感觉喝嗨了，开始喝酒划拳了。</p><p><img src="/2024-05-13-dongbei-travel/img1.webp" alt="第一顿烧烤"><br>不知道哈西这边是不是哈尔滨最大最热闹的商圈，附近的小吃一条街特别热闹，而且是我目前见过的最长的。里面小吃的种类太丰富了。</p><h2 id="5-3-中央大街"><a href="#5-3-中央大街" class="headerlink" title="5.3 中央大街"></a>5.3 中央大街</h2><p>去一个城市旅游一定要去一次它的标志性景点，所以来哈尔滨怎么能不来中央大街。不过逛完之后的感受是，这确实就是个普通的步行街，里面有很多俄罗斯商品店和俄式西餐。</p><p>中午去尝了老厨家，特地查了攻略说是最正宗的锅包肉。点了锅包肉、松茸炒蛋、油炸冰棍。锅包肉分量真大，一盘得有一斤了吧，两个人都没吃完，而且味道真的很好，油炸火候刚好，裹的皮不厚，酸味不浓，最让我喜欢的是上面没有勾丝儿，油炸冰棍很好吃，表皮酥脆里面冰冷，就是得快点吃，不然化了。松茸炒蛋口感有点黏糊，不知道是不是加了水淀粉炒的，个人不是很喜欢。</p><p><img src="/2024-05-13-dongbei-travel/img2.webp" alt="老厨家锅包肉"><br>下午去了太阳岛，就在冰雪大世界前面，是一个免费景点，可以看到松花江对岸。这里还有一个观光索道，坐到对岸再回来，可以在上面拍松花江全景。</p><p><img src="/2024-05-13-dongbei-travel/img3.webp" alt="松花江"><br>晚上去了中华巴洛克风情街，感觉像是中央大街姊妹街，不过比中央大街好的点是这里餐饮更多，所以晚上来感觉更热闹。还尝了从未尝过的冻梨，有冰沙的口感，就是甜味不太明显了，而且实在太冰了，吃一口得缓一会。</p><p><img src="/2024-05-13-dongbei-travel/img4.webp" alt="巴洛克风情街"></p><h2 id="5-4-圣索菲亚教堂"><a href="#5-4-圣索菲亚教堂" class="headerlink" title="5.4 圣索菲亚教堂"></a>5.4 圣索菲亚教堂</h2><p>早上起的有点晚，出门已经11点了，中午打算去来之前标记的一家火锅店，老康火锅（黄河路总店），店的位置在一个小区里，有点偏僻。形式就是老北京铜锅那种，由于不太想吃肉，就点了一些蔬菜和冷盘，感觉并没有特别好吃，而且点的时候看价格都挺便宜，十几块一盘，最后结账居然吃了187，有点意外。</p><p>吃完火锅按计划去哈药六厂博物馆，整体建筑风格很欧式，进去后感觉占地面积真大，中间空地都能踢足球了。接着就走进博物馆里面参观，这里给大家一个建议，来这就看看一楼建筑就行了，别进去了，不然你就要爬六层楼然后看一些看不懂的画和哈药的广告，最后再爬六层楼下去。</p><p><img src="/2024-05-13-dongbei-travel/img5.webp" alt="就是这个建筑，在一楼转转拍几张照片就可以了"><br>离开后实在有点口渴，就在路边买了1&#x2F;4个西瓜11块，过了一会听老板跟另一个顾客说30卖他一个西瓜，不知道是不是被宰客了。</p><p>快到晚上的时候去了索菲亚教堂，这个教堂确实是好看，浓厚的俄式建筑风格，而且看着年代也很久了。如果想拍照还可以在教堂里付费拍摄贵族公主写真，会提供道具衣服。</p><p><img src="/2024-05-13-dongbei-travel/img6.webp" alt="索菲亚教堂"><br>由于哈尔滨的风实在太大，吹的我们两个人头疼，于是看完索菲亚就回酒店睡觉了。</p><p><img src="/2024-05-13-dongbei-travel/img7.webp" alt="烟火气息烧烤摊"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在哈尔滨总共呆了3天，玩了2天。不是冬天的哈尔滨可供游玩的景点确实不太多，2天时间正好可以把市区热门景点都逛一遍。</p><p>哈尔滨真是遍地烧烤，分布广泛，无论是路边摊，还是商场店面，总能在你想吃的时候找到，而且味道确实比上海的好多了，果然正宗的美食就得去原产地品尝。就是好多店都不提供餐巾纸，得主动找老板要，还是付费的。</p><p>东北菜分量真的很大，我们两个人去菜馆点才，基本上点一个菜就够了，比如锅包肉、小鸡炖蘑菇、猪肉炖粉条，而且很大概率还吃不完，胃口小的人来东北旅游吃饭点一盘菜就够了，难怪南方人来东北旅游都得点小份版。而且哈尔滨平均身高真的好高啊，尤其是女生，看到很多女生身高都至少有1米7。</p><p>最后个人感觉哈尔滨的城市建设有点老旧，像市区的很多路砖块碎了好多也没有维修，有些路坑坑洼洼不太平整，非机动车道的普及度也不是很高，有些路的非机动车道只画了一半，骑着骑着发现没有非机动车道了，也不知道是在机动车道上靠边骑，还是去人行道上骑。还有一点是，发现好多人过马路无视红绿灯，酒店楼下有个挺大的十字路口，车流量还挺大的，每次我在等红绿灯的时候，就发现旁边人直接从车流中穿过去了，真为他们捏一把汗。</p><h1 id="延边"><a href="#延边" class="headerlink" title="延边"></a>延边</h1><h2 id="5-5-抵达"><a href="#5-5-抵达" class="headerlink" title="5.5 抵达"></a>5.5 抵达</h2><p>13:56从哈尔滨出发，17:45抵达延边，这次在延边住的是民俗而不是酒店，延边大学网红墙这边民俗占比非常高，几乎住不到酒店，事实证明民俗和酒店还是有差距的。</p><blockquote><p>💡<br>个人感觉民宿主要有下面几个不太好的地方</p><ol><li>安全性，有些民宿没有前台没有大厅，楼里随便进，女生一个人住还是会害怕。</li><li>设施，民宿的硬件设施，比如床之类的为了省钱，不会和酒店一样用比较好的，同时也没有专业管理人员设计房间，用户体验上也不到位</li></ol></blockquote><p>到了后第一顿饭吃了楼下网红墙的延边烤肉，味道很好，烤出来的肉很香，蘸料也好吃。网红墙就在延边大学正门对面，很多人就是为了这面墙来延吉打卡的。</p><p><img src="/2024-05-13-dongbei-travel/img8.webp" alt="网红墙，看起来很有韩国的感觉，对面就是延边大学"></p><h2 id="5-6-中国朝鲜民俗园"><a href="#5-6-中国朝鲜民俗园" class="headerlink" title="5.6 中国朝鲜民俗园"></a>5.6 中国朝鲜民俗园</h2><p>此次来延边就是为了去民俗园拍照的，民俗园位置在延吉市边上，从延边大学打车过去十几分钟。到了后发现民俗园门口全是旅拍和特色服饰店。我们本来预定了一家店铺，结果刚下车就被路边的拉客阿姨拉着要去她的店，问了一下价格是150一人，衣服+化妆头发。我们报了另一家预定价，把价格砍到100一人了，而且不用店里的摄影师，自己请了摄影师。他们店里的摄影师照片总共就25张，太少，而且价格还贵，建议想来民俗园拍照的可以提前在小红书约一个摄影师。</p><p>民俗园门票要30，可以提前在平台上买好。内部不大，基本就是一些朝鲜族特色建筑和历史文化展览。当天因为一直在拍照，也没有怎么欣赏。</p><p><img src="/2024-05-13-dongbei-travel/img9.webp" alt="朝鲜民俗园"><br>晚上去吃了摄影师推荐的一家烤鸡肉烧烤，烤鸡排味道很好，我点的是椒麻味，鸡肉腌过很入味，鸡皮烤完油滋滋的。还有一个鸡胗脆骨胸口肉拼盘，每个吃起来都脆脆的。海鲜饼也不错，里面有鱿鱼条，有点像厦门的蚵仔煎，把海蛎换成了鱿鱼。</p><p><img src="/2024-05-13-dongbei-travel/img10.webp" alt="离开前的延边烧烤"></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>在延吉只呆了2天，真正逛的时间就完整的一天，当时本来想多呆一会，搜了一下攻略发现确实市区有点小，适合游客来打卡的就这2个地方，一天时间足以。在动车上还遇到一个黑龙江的阿姨，也是去网红墙打卡的，因为不会在携程订酒店，于是我帮她订了，正好就跟阿姨聊天。阿姨说她是一路从黑龙江自驾到大连，然后从大连坐车到延吉玩一天。一路上听阿姨说她去过的城市，从东北到浙江，再到海南，非常有意思。而且更巧的是第二天去民俗园拍照的时候还碰见她了。</p><p>延吉的物价确实是贵，网红墙的店基本人均都得100往上，这价格都赶上我在上海出去吃了。这对当地人和延边大学的学生压力应该还是挺大的吧。而且延吉作为一座小城市，却有着出色的基础建设，有国际机场和高铁站，城市里的高楼建筑也很新，外观也很好看，很难想象这是一座边陲小城的样貌。</p><h1 id="沈阳"><a href="#沈阳" class="headerlink" title="沈阳"></a>沈阳</h1><h2 id="5-7-抵达"><a href="#5-7-抵达" class="headerlink" title="5.7 抵达"></a>5.7 抵达</h2><p>11:40从延吉西出发，15:45抵达沈阳北站，酒店定在青年大街地铁站边上，这边比较靠近市中心，算是比较热闹的区域了。而且运气非常好附近有一个沈阳当地特别火的夜市彩电塔夜市，我到的时候都不是节假日，人依然非常多，可见本地人都乐意来。这边也是天南地北的美食小吃都有，因为是第一次来沈阳，必须先尝尝铁板鸡架，鸡架非常酥脆，骨头嚼一嚼可以直接吞了，口味很好。</p><p><img src="/2024-05-13-dongbei-travel/img11.webp" alt="酒店前面就能看到的广播电视塔"></p><h2 id="5-8-中街-沈阳故宫"><a href="#5-8-中街-沈阳故宫" class="headerlink" title="5.8 中街 - 沈阳故宫"></a>5.8 中街 - 沈阳故宫</h2><p>中街在沈阳的地位等同于南京路步行街在上海，位于市区，有故宫博物院，和连成片的商场，工作日的中午逛的人都超多。中午在中街里一家很有名的晓亮麻辣拌吃了麻辣烫，价格挺实惠，一斤30，而且是荤素同价，食材看着都挺新鲜，口味轻的建议选麻辣烫，麻辣拌的酱有点多，吃起来比较咸。</p><p><img src="/2024-05-13-dongbei-travel/img12.webp" alt="东北麻辣烫，这一份25"><br>沈阳也有个故宫，但没有北京故宫那么大那么出名，门票50。这几天的沈阳天气很好，都是大晴天，很晒。进故宫后看到有很多穿格格衣服的在拍照，故宫门口有租衣服的，想拍照的可以去租一套，我是看着那些衣服有点丑（居然还有太监服），所以就不租了。</p><p>进了故宫有导游邀请讲解，价格25，真心建议如果想好好逛，了解了解历史，可以请一个导游，价格不贵，还能听故事，否则进去就是看看建筑，溜达一圈啥也没记住就结束了。</p><p><img src="/2024-05-13-dongbei-travel/img13.webp" alt="故宫大门"></p><h2 id="5-9-西塔-农贸市场"><a href="#5-9-西塔-农贸市场" class="headerlink" title="5.9 西塔 - 农贸市场"></a>5.9 西塔 - 农贸市场</h2><p>今天没啥特定目的地，就想去市区里的各种市场里逛逛，感受当地烟火气。</p><p>中午去了味家烤肉烤鳗鱼吃了烤鳗鱼，这家价格在沈阳算是比较贵的了，看菜单两人随便点个烤肉啥的都得200，我就点了一条鳗鱼和一碗海鲜炒饭就200了。不过鳗鱼的味道确实好，而且鱼很新鲜，端过来的时候还有神经反射，可见是刚杀的。</p><p><img src="/2024-05-13-dongbei-travel/img14.webp" alt="鳗鱼片"><br>吃完随便走走，走到了西塔（西塔老太太是不是出自这里）发现一条西塔美食街，里面都是卖朝鲜韩国特色料理的，辣白菜、各种辣酱、米酒。</p><p>继续往前走路过一个韩国百货市场，里面有卖各种首饰和衣服的店，以及一个全都是韩国货的超市。话说沈阳的朝鲜族也很多吗，好多步行街感觉和延吉有点像，都是朝鲜语中文双语招牌。</p><p>晚饭回酒店门口的彩电塔夜市吃，找到一家特别好吃的烧烤店，他家还有特色锡纸花甲和蛏子，汤汁配上粉丝味道吸满了。烤鸡肉和烤猪肉口感很嫩，尝过后才发现原来烧烤鸡肉这么好吃，现在完全不想吃牛羊肉的烧烤了，而且价格很便宜，12块5串鸡肉，块都挺大的，我已经连续在他家吃了好几天。大白梨和大窑也好喝，口感比可乐雪碧都好一些。</p><p><img src="/2024-05-13-dongbei-travel/img15.webp" alt="桌上这些加一盘生蚝才80多"></p><h2 id="5-10-鸟岛"><a href="#5-10-鸟岛" class="headerlink" title="5.10 鸟岛"></a>5.10 鸟岛</h2><p>在沈阳的最后一天，想看看自然风景，查了一下离的最近的是一个叫鸟岛的3a景区，门票30，离市区18公里。今天天气也不太好，没有太阳了，到了鸟岛还开始下雨了，于是在门口租了带棚的双人自行车一小时50，不用淋雨，还省力。</p><p>岛上有好几个娱乐项目，鹦鹉小丑表演，划船，因为是工作日，所以来游玩的人很少，划船更是没有人，跟老板讲价还便宜了20，40分钟60元，可以划到湖中心看大鹅和小鸭。</p><p><img src="/2024-05-13-dongbei-travel/img16.webp" alt="超可爱的大鹅"><br>园中到处都是大鹅，感觉都成为岛上的原住民了，还有孔雀也是到处跑，没关在笼子里。因为岛上没啥人，所以每个动物点都是包场观看，还能近距离靠近大鹅和孔雀，可惜太近就都跑了，溜达了一圈到5点多就回去了，感觉是一个只有鸟类的动物园。</p><p>晚上在酒店楼下吃了最后一顿回头客烧烤，这家的味道属实难忘，下次有机会再回来尝尝。</p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>在沈阳呆的时间是最久的，出发前就给沈阳的行程定位美食之旅，早早标记好了很多店铺（可惜最后也没有去几家）不得不说沈阳的物价真的便宜，无论是烧烤，还是水果（超市里最贵的西瓜7块一斤，嘎嘎甜，草莓13一斤，最贵的是樱桃，30-50一斤），普通餐厅之类的，真让我有一种在国内挣美元花人民币的感觉。</p><p>沈阳的基建也是这3个城市中给我的感觉最好的，地铁线路多，机场有地铁，路修的也挺好，如果我是东北人，一线城市呆不下去的话，可能大概率就选择沈阳定居了。就是我这个南方人确实有点不太适应东北气候，游玩的这几天因为空气干燥和饮食因素，嘴角马上上火起泡了，建议来玩的时候出门时刻带一瓶水补充水分，再加上这个季节四处飘扬的飞絮和大风，在外面走路都得时刻注意不要吸入，过敏人士估计出门就得戴口罩，不然可能立马就要躺了。</p><p>来玩的这段时间发现我是真挺喜欢东北的美食，甚至想能不能每年专门腾出一个月的时间专门来东北吃东西，量大，种类丰富，还新鲜，虽然此次没有感受到冬天东北的美，也给我带来了很多美好的回忆，此次旅行也非常顺利，风和日丽，除了延边下了一天雨，剩下的都是大晴天，下次有机会来体验一下冬天的东北。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 旅行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ffmpeg给图片加zoom效果导致图片抖动</title>
      <link href="/2024-04-25-ffmpeg-zoompan-shakey.html"/>
      <url>/2024-04-25-ffmpeg-zoompan-shakey.html</url>
      
        <content type="html"><![CDATA[<p>在使用ffmpeg给图片拼接的视频加放大动画时，出现一个很奇怪的问题，如果指定放大的位置点在中心，画面中的图片会在放大的同时来回抖动，好像网络卡了的感觉，如下面的动图：</p><span id="more"></span><p><img src="/2024-04-25-ffmpeg-zoompan-shakey/img1.gif" alt="动图"><br>最后从<span class="exturl" data-url="aHR0cHM6Ly9zdXBlcnVzZXIuY29tL3F1ZXN0aW9ucy8xMTEyNjE3L2ZmbXBlZy1zbW9vdGgtem9vbXBhbi13aXRoLW5vLWppZ2dsZS8xMTEyNjgwIzExMTI2ODA=">这里<i class="fa fa-external-link-alt"></i></span>找到了解决办法，回答解释是因为在zoom的过程中，x，y在变化的时候会四舍五入，导致不均匀，想象一下就是细微的突然左一下右一下。可以通过在zoompan之前提高图片分辨率来消除抖动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -y -t 3 -i input.png -filter_complex &quot;[0:v]scale=8000*4000,zoompan=z=&#x27;min(zoom+0.0015,1.5)&#x27;:d=75:x=&#x27;if(gte(zoom,1.5),x,x+1)&#x27;:y=&#x27;y&#x27;[v0];[v0]concat=n=1:v=1:a=0,format=yuv420p[v]&quot; -map &quot;[v]&quot; -s &quot;1024x1792&quot; ./tmp/AFTJ3W/concat.mp4</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ffmpeg拼接图片视频，添加字幕无法对齐时间</title>
      <link href="/2024-04-18-ffmpeg-draw-subtitle.html"/>
      <url>/2024-04-18-ffmpeg-draw-subtitle.html</url>
      
        <content type="html"><![CDATA[<p>最近在开发一个图片生成短视频的程序，最开始的需求就是需要把视频拼接成图片，每个图片有一定播放时长，这个命令非常简单，通过使用ffmpeg的concat demuxer就可以了。首先创建如下txt文件</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file &#x27;./1.png&#x27;</span><br><span class="line">duration 3</span><br><span class="line">file &#x27;./2.png&#x27;</span><br><span class="line">duration 5</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -f concat -safe 0 -i filelist.txt -pix_fmt yuv420p -c:v libx264 output.mp4</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一切非常顺利，点开播放后发现，最后一张图片居然只出现了一帧就结束了，表现为output.mp4的时长和filelist.txt里duration的总和对不上。</p><p><img src="/2024-04-18-ffmpeg-draw-subtitle/img1.webp"><br><img src="/2024-04-18-ffmpeg-draw-subtitle/img2.webp"><br>视频时长正好少了最后一张图的duration。谷歌搜索了一下，发现同样有人出现过这个问题，从<span class="exturl" data-url="aHR0cHM6Ly92aWRlby5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvMjA1ODgvZmZtcGVnLWZsYXNoLWZyYW1lcy1sYXN0LXN0aWxsLWltYWdlLWluLWNvbmNhdC1zZXF1ZW5jZQ==">这个回答中<i class="fa fa-external-link-alt"></i></span>找到了解决办法，就是在filelist.txt里把最后一张图的路径重复一份放在末尾，这样出来的图片时长就是正确的了。</p><p><img src="/2024-04-18-ffmpeg-draw-subtitle/img3.webp"></p><h2 id="加字幕"><a href="#加字幕" class="headerlink" title="加字幕"></a>加字幕</h2><p>接着需要在视频上添加字幕，按照ffmpeg的文档使用以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i ./tmp/6ir0TW/concat.mp4 -vf &quot;drawtext=text=&#x27;hello&#x27;:fontfile=/path/to/your/font.ttf:fontsize=30:fontcolor=white:x=(w-text_w)/2:y=(h-text_h)/2:enable=&#x27;between(t,0,3)&#x27;,drawtext=text=&#x27;world&#x27;:fontfile=/path/to/your/font.ttf:fontsize=30:fontcolor=white:x=(w-text_w)/2:y=(h-text_h)/2:enable=&#x27;between(t,3,6)&#x27;&quot; -codec:a copy ./tmp/6ir0TW/draw_text.mp4</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加文本参数中指定hello出现在0-3秒，结果生成的视频hello在第7秒才消失，同时这张图片设置的时长也是7秒，</p><p><img src="/2024-04-18-ffmpeg-draw-subtitle/img4.webp"><br>最初怀疑是drawtext filter的参数设置问题，于是下载了一个正常视频测试，发现文字正常出现和消失。于是怀疑是用concat图片生成的视频的问题。结合正常视频的情况，于是尝试了一下对拼接后的视频进行重新转码再添加文本，一切正常了。</p><p>接着我又去video forum<span class="exturl" data-url="aHR0cHM6Ly9mb3J1bS52aWRlb2hlbHAuY29tL3RocmVhZHMvNDE0MTcwLWZmbXBlZy11c2UtZHJhd3RleHQtZmlsdGVyLXRleHQtZG9lc24tdC1hcHBlYXItY29ycmVjdGx5LWluLWdpdmVuLXRpbWUjcG9zdDI3MzE0ODA=">提问<i class="fa fa-external-link-alt"></i></span>，有人说这个是因为用图片拼接的视频和正常视频的granularity不一样，所以导致时间没法对齐，然后他给了另一个解决方案是，在video filter里加fps&#x3D;25。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git操作Github网速慢的解决方式</title>
      <link href="/2024-04-05-git-slow.html"/>
      <url>/2024-04-05-git-slow.html</url>
      
        <content type="html"><![CDATA[<ol><li>对于https协议，配置git proxy，注意把http和https都配置上，<code>git config --global http.proxy http://127.0.0.1:7890</code></li><li>修改host文件<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">nslookup github.global.ssl.fastly.net</span><br><span class="line">nslookup github.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vim /etc/hosts</span></span><br><span class="line">xxx github.global.ssl.fastly.net</span><br><span class="line">xx github.com </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">refresh DNS cache</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">linux</span></span><br><span class="line">sudo /etc/init.d/networking restart</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or nscd -i hosts</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">arch</span> linux</span></span><br><span class="line">/etc/rc.d/nscd restart</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">macos</span></span><br><span class="line">dscacheutil -flushcache</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python识别PDF内容</title>
      <link href="/2024-04-01-python-parse-pdf.html"/>
      <url>/2024-04-01-python-parse-pdf.html</url>
      
        <content type="html"><![CDATA[<p>最近在开发的产品<span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGVkZWVwLmNvbS8=">CreateDeep<i class="fa fa-external-link-alt"></i></span>需要支持用户上传pdf文件，并读取pdf文件中的文本部分和GPT沟通。实现过程中也是踩了不少坑，正好和大家分享一下。</p><span id="more"></span><p>首先pdf有两种类别，一种是通过文本直接生成的，其特点是打开pdf可以直接复制里面的文字，像这样</p><p><img src="/2024-04-01-python-parse-pdf/img1.webp" alt="文字类pdf"><br>对于这种类型的pdf，识别非常简单，用python的<code>pymupdf</code> 库即可，实现代码也是简洁利落</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import fitz</span><br><span class="line">def parse_text_from_text_pdf():</span><br><span class="line">    with fitz.open(pdf_file) as doc:  # open document</span><br><span class="line">        text = chr(12).join([page.get_text() for page in doc])</span><br><span class="line"></span><br><span class="line">    print(text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还有一种是扫描的pdf，其特点是文本无法直接复制，每一页都是一张图片，像这样</p><p><img src="/2024-04-01-python-parse-pdf/img2.webp" alt="扫描类pdf"><br>对于这种类型的pdf，识别会复杂一些，但我们可以一步步拆解。</p><h3 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h3><ol><li><p>首先我们把pdf当作图片进行处理，对于图片的文字识别是非常成熟的，python有很多OCR的库可以使用，开源最好用的当然是Google的<code>tesseract</code> 。</p></li><li><p>在前面的基础上，只要想办法把pdf文件转换成一堆的图片，就能完成识别。python有另一个库<code>pdf2image</code> ，可以完成这个工作。</p></li></ol><p>每个步骤都清楚之后，剩下的就需要把所有串在一起。这里有个要注意的是，<code>tesseract</code> 默认智能识别英文，中文识别的结果是乱码，需要单独安装一个中文的训练集后才可以正常识别中文。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from tempfile import TemporaryDirectory</span><br><span class="line">import pytesseract</span><br><span class="line">from pdf2image import convert_from_path</span><br><span class="line">from PIL import Image</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def parse_text_from_scan_pdf():</span><br><span class="line">    with TemporaryDirectory() as tempdir:</span><br><span class="line">        output_text = &#x27;&#x27;</span><br><span class="line">        pdf_pages = convert_from_path(pdf_file, 500)</span><br><span class="line">        os.mkdir(f&quot;&#123;tempdir&#125;/&#123;os.path.basename(pdf_file)&#125;&quot;)</span><br><span class="line">        tessdata_dir_config = f&#x27;--tessdata-dir &quot;&#123;os.getcwd()&#125;/tools/pdfParser&quot;&#x27;</span><br><span class="line">        for page_enumeration, page in enumerate(pdf_pages, start=1):</span><br><span class="line">            filename = f&quot;&#123;tempdir&#125;/&#123;os.path.basename(pdf_file)&#125;/&#123;page_enumeration&#125;.jpg&quot;</span><br><span class="line">            page.save(filename, &quot;jpeg&quot;)</span><br><span class="line">            text = str((pytesseract.image_to_string(Image.open(filename), lang=&quot;chi_sim&quot;, config=tessdata_dir_config)))</span><br><span class="line">            text = text.replace(&quot;-\n&quot;, &quot;&quot;)</span><br><span class="line">            output_text += text</span><br><span class="line">            os.remove(filename)</span><br><span class="line"></span><br><span class="line">    print(output_text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码中的<code>tessdata_dir_config</code> 是tesseract的指定训练模型，除了自带的默认模型外，tesseract还提供了识别速度型和识别准确型，有需要可以去<span class="exturl" data-url="aHR0cHM6Ly90ZXNzZXJhY3Qtb2NyLmdpdGh1Yi5pby90ZXNzZG9jL0RhdGEtRmlsZXMuaHRtbA==">官网<i class="fa fa-external-link-alt"></i></span>下载，然后在代码里指定使用哪个训练模型。个人的使用体验是，中文建议还是用准确型，默认的识别准确度太差，一句话中有1&#x2F;3都是错误的。</p><h3 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h3><p>代码写完，接下来就需要部署上线了，我用的是Ubuntu22.04 LTS，首先需要安装如下python的包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pymupdf==1.23.26</span><br><span class="line">pytesseract==0.3.10</span><br><span class="line">pdf2image==1.17.0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接着是系统依赖库<code>sudo apt install -y poppler-utils tesseract-ocr tesseract-ocr-chi-sim libtesseract-dev</code> ，安装完就可以正常识别了。</p><p><img src="/2024-04-01-python-parse-pdf/img3.webp" alt="识别结果"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Next.js搭配Filepond实现上传文件操作</title>
      <link href="/2024-03-25-nextjs-with-filepond.html"/>
      <url>/2024-03-25-nextjs-with-filepond.html</url>
      
        <content type="html"><![CDATA[<p>最近自己在做一个产品，<span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGVkZWVwLmNvbS8=">CreateDeep - AI创作师<i class="fa fa-external-link-alt"></i></span>，产品需要实现上传文件的功能，找了一圈React生态中的上传组件，发现<span class="exturl" data-url="aHR0cHM6Ly9wcWluYS5ubC9maWxlcG9uZC9kb2NzLw==">Filepond<i class="fa fa-external-link-alt"></i></span>无论是外观还是功能，都做的很不错。于是就决定用它了。</p><span id="more"></span><p>Filepond本身是一个纯粹的Javascript库，不是专门为React做的，只不过它提供了一个React集成版，按照官网的教程，实现起来非常快</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import React from &#x27;react&#x27;</span><br><span class="line">import &#123; FilePond, registerPlugin &#125; from &#x27;react-filepond&#x27;</span><br><span class="line">import &#x27;filepond/dist/filepond.min.css&#x27;</span><br><span class="line"></span><br><span class="line">const FileUploadButton = (&#123;</span><br><span class="line">  className,</span><br><span class="line">  onFinishParse,</span><br><span class="line">&#125;: FileUploadButtonProps) =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;FilePond</span><br><span class="line">      server=&#123;&#123;</span><br><span class="line">        process: &#x27;/api/upload&#x27;,</span><br><span class="line">        fetch: null,</span><br><span class="line">        revert: null,</span><br><span class="line">      &#125;&#125;</span><br><span class="line">      allowFileMetadata=&#123;true&#125;</span><br><span class="line">      allowMultiple=&#123;true&#125;</span><br><span class="line">      maxParallelUploads=&#123;1&#125;</span><br><span class="line">      maxFiles=&#123;5&#125;</span><br><span class="line">      acceptedFileTypes=&#123;[&#x27;application/pdf&#x27;]&#125;</span><br><span class="line">      labelIdle=&quot;拖拽或点击上传文件&quot;</span><br><span class="line">      className=&#123;className&#125;</span><br><span class="line">      labelFileProcessingComplete=&quot;上传完毕&quot;</span><br><span class="line">      labelFileProcessing=&quot;上传中&quot;</span><br><span class="line">      onprocessfiles=&#123;() =&gt; &#123;</span><br><span class="line">        console.log(&#x27;process files&#x27;)</span><br><span class="line">      &#125;&#125;</span><br><span class="line">      onprocessfilestart=&#123;(file) =&gt; &#123;</span><br><span class="line">        console.log(`file $&#123;file.filename&#125; process start`)</span><br><span class="line">      &#125;&#125;</span><br><span class="line">      onprocessfile=&#123;(error, file) =&gt; &#123;</span><br><span class="line">        if (!error) &#123;</span><br><span class="line">          console.log(`file $&#123;file.filename&#125; process finished`)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default FileUploadButton</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>出来效果大概长这样。</p><p><img src="/2024-03-25-nextjs-with-filepond/img1.webp" alt="效果"><br>Filepond组件支持<code>acceptedFileTypes</code> ，一开始加上这个属性发现不生效，经过排查发现原来需要添加<span class="exturl" data-url="aHR0cHM6Ly9wcWluYS5ubC9maWxlcG9uZC9kb2NzL2FwaS9wbHVnaW5zL2ZpbGUtdmFsaWRhdGUtdHlwZS8=">File type validation<i class="fa fa-external-link-alt"></i></span>，代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import FilePondPluginFileValidateType from &#x27;filepond-plugin-file-validate-type&#x27;</span><br><span class="line">// 然后在组件代码里加上</span><br><span class="line">registerPlugin(FilePondPluginFileValidateType)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Filepond的server参数配置的是后端接口，默认请求参数是formData，第一个是一个json对象，第二个是binary数据。我在调试过程中发现无法从请求中获取到文件名，为此在Github仓库里开了一个<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BxaW5hL3JlYWN0LWZpbGVwb25kL2lzc3Vlcy8yNDI=">issue<i class="fa fa-external-link-alt"></i></span>询问。同时找到了其他解决办法，Filepond支持自定义配置server，然后在server里自行完成请求的发送。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">server=&#123;&#123;</span><br><span class="line">  process: (fieldName, file, _, load, error, progress, abort) =&gt; &#123;</span><br><span class="line">    const formData = new FormData()</span><br><span class="line">    formData.append(fieldName, file, file.name)</span><br><span class="line"></span><br><span class="line">    const request = new XMLHttpRequest()</span><br><span class="line">    request.open(&#x27;POST&#x27;, &#x27;/api/upload&#x27;)</span><br><span class="line"></span><br><span class="line">    request.upload.onprogress = (e) =&gt; &#123;</span><br><span class="line">      progress(e.lengthComputable, e.loaded, e.total)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request.onload = function () &#123;</span><br><span class="line">      if (request.status &gt;= 200 &amp;&amp; request.status &lt; 300) &#123;</span><br><span class="line">        const json = JSON.parse(request.response)</span><br><span class="line">        const response = &#123;</span><br><span class="line">          ...json,</span><br><span class="line">          filename: file.name,</span><br><span class="line">        &#125;</span><br><span class="line">        onFinishParse(response)</span><br><span class="line">        load(response)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        error(&#x27;parse pdf filed&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    request.send(formData)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      abort: () =&gt; &#123;</span><br><span class="line">        request.abort()</span><br><span class="line">        abort()</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // process: &#x27;/api/upload&#x27;,</span><br><span class="line">  fetch: null,</span><br><span class="line">  revert: null,</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过这种方式既可以拿到请求文件名，又可以拿到响应的内容。</p><p>Filepond默认会在组件尾部加上水印标识，官方表示因为是开源产品，所以希望大家能捐助。那么如果我们想要去掉它该怎么做呢？也很简单。首先在同级目录下新建<code>index.css</code> ，加入以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.filepond--credits &#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在组件开头<code>import ‘./index.css’</code> ，尾部的水印就被去掉了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Next.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多Git用户管理 - 根据目录自动切换Git用户</title>
      <link href="/2024-03-14-manage-multi-git-account.html"/>
      <url>/2024-03-14-manage-multi-git-account.html</url>
      
        <content type="html"><![CDATA[<p>由于我的个人项目和公司项目在同一台电脑上开发，有个问题一直在困扰我，当我在不同项目上开发时需要检查当前项目对应的Git用户是否正确。<br>因为公司用的Git用户邮箱和个人Git邮箱不一样，如果不小心用了个人Git用户提交了公司代码会很麻烦，所以一直以来我都是默认设置成公司Git用户。<br>这样又有个问题，总是会不小心用公司Git用户提交了个人项目，导致经常需要重置提交后再覆盖提交信息。正好最近找到一个非常方便的解决方案，分享一下。</p><span id="more"></span><ol><li>编辑~&#x2F;.gitconfig，填入以下内容，在这里配置的是主账户，像我就是配置的Github账户</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">  name = xxx</span><br><span class="line">  email = xxx@gmail.com</span><br><span class="line">[includeIf &quot;gitdir:**/Workbench/dior/**&quot;]</span><br><span class="line">path = ~/.diorconfig</span><br><span class="line">[includeIf &quot;gitdir:**/Workbench/**&quot;]</span><br><span class="line">path = ~/.githubconfig</span><br></pre></td></tr></table></figure><ol start="2"><li>分别编辑.diorconfig和.githubconfig，填入不同的name和email，相当于子账户</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">  name = zshnb</span><br><span class="line">  email = xxx@gmail.com</span><br></pre></td></tr></table></figure><p>这样当你进入不同项目目录时，对应的git配置文件就会生效，效果如下</p><table><thead><tr><th>个人项目</th><th>公司项目</th></tr></thead><tbody><tr><td><img src="/2024-03-14-manage-multi-git-account/img1.png" alt="个人项目目录"></td><td><img src="/2024-03-14-manage-multi-git-account/img2.png" alt="公司项目目录"></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notion API踩坑之 - 创建Table</title>
      <link href="/2024-03-05-notion-api-create-table.html"/>
      <url>/2024-03-05-notion-api-create-table.html</url>
      
        <content type="html"><![CDATA[<p>最近在做一个小工具 - 同步iOS备忘录到Notion。在做的过程中遇到一个场景是，需要把iOS备忘录的table同步到Notion的table，Notion API有提供table block的结构，但是写的非常不详细，根本没有给出一个可行的在page中创建table的demo，于是我只好通过各种尝试，最终成功通过API在page中创建了table。</p><span id="more"></span><p>首先官方文档给出了table和table_row的结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;type&quot;: &quot;table&quot;,</span><br><span class="line">  &quot;table&quot;: &#123;</span><br><span class="line">    &quot;table_width&quot;: 2,</span><br><span class="line">    &quot;has_column_header&quot;: false,</span><br><span class="line">    &quot;has_row_header&quot;: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;type&quot;: &quot;table_row&quot;,</span><br><span class="line">  &quot;table_row&quot;: &#123;</span><br><span class="line">    &quot;cells&quot;: [</span><br><span class="line">      [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;text&quot;: &#123;</span><br><span class="line">            &quot;content&quot;: &quot;column 1 content&quot;,</span><br><span class="line">            &quot;link&quot;: null</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;annotations&quot;: &#123;</span><br><span class="line">            &quot;bold&quot;: false,</span><br><span class="line">            &quot;italic&quot;: false,</span><br><span class="line">            &quot;strikethrough&quot;: false,</span><br><span class="line">            &quot;underline&quot;: false,</span><br><span class="line">            &quot;code&quot;: false,</span><br><span class="line">            &quot;color&quot;: &quot;default&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;plain_text&quot;: &quot;column 1 content&quot;,</span><br><span class="line">          &quot;href&quot;: null</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是并没有给出table_row和table的关联关系，于是我先调用API尝试只添加table block，得到如下错误：<code>APIResponseError: body failed validation: body.children[3].table.children should be defined, instead was undefined.</code></p><p>很明显table块里需要有children，并且大概率是table_row的容器。于是尝试把table_row加入，运行，成功了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Notion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024春节厦门游记</title>
      <link href="/2024-02-18-xiamen-travel.html"/>
      <url>/2024-02-18-xiamen-travel.html</url>
      
        <content type="html"><![CDATA[<p>2024年春节本来打算跟往年一样在家里度过，结果在携程看到了从家里到厦门的机票在除夕那天只用140（不过最终还是没有选择飞机，因为特价机票没有行李额度，最后算下来并没有比高铁便宜），于是立马决定今年春节去厦门度过。在出发前几天做完了详细的攻略。</p><span id="more"></span><h3 id="除夕抵达"><a href="#除夕抵达" class="headerlink" title="除夕抵达"></a>除夕抵达</h3><p>除夕晚上从上海出发坐高铁到厦门，花费¥520，5小时左右抵达，考虑到出行方便，酒店也订在了厦门岛内的地铁旁。刚到厦门下了地铁简直惊呆了，地铁站是在马路下面的一个巷子里，可能是除夕的原因，地铁站附近所有店面都关门了，连灯都没有，特别冷清。</p><p><img src="/2024-02-18-xiamen-travel/img1.webp" alt="返程船票高峰期（17:30-20:00）人会非常多非常挤，可以合理安排时间错峰返程。返程码头有内厝澳（17:30左右最后一班，在岛西侧）和三丘田（0点以前一直有船回去，在岛东侧）。"><br>在酒店安顿好后打算找点吃的当作年夜饭。搜索后找到厦门中心区域最大的SM商场，结果到了后发现商场连大门都关闭了，只有一楼一家KFC在营业，同时开着一间小门。整个商场所有店铺都关门了，只有五楼一家海底捞还在营业。叫了个号得等到400多桌，放弃了，去KFC随便吃一顿当年夜饭吧。</p><h3 id="初一-中山公园"><a href="#初一-中山公园" class="headerlink" title="初一 - 中山公园"></a>初一 - 中山公园</h3><p>大年初一的行程是坐地铁1号线到中山公园站，然后在附近的街道小巷里闲逛。大年初一对比除夕热闹多了，地铁上也开始变得拥挤。不过因为我选择的路线是小众路线，所以几乎没什么游客会聚集。不得不说厦门的街道小巷很有文艺气息，旁边的建筑都有自己的特色，比如有独特的形状，或者独特的色彩，再加上宅宅的街道，随便一拍都挺出片的，怪不得很多电影电视剧都喜欢在厦门取景。</p><p><img src="/2024-02-18-xiamen-travel/img2.webp" alt="超级有感觉的小路"></p><h3 id="初二-集美学村-五缘大桥"><a href="#初二-集美学村-五缘大桥" class="headerlink" title="初二 - 集美学村&amp;五缘大桥"></a>初二 - 集美学村&amp;五缘大桥</h3><p>初二的行程是白天坐地铁1号线到集美学村，横跨厦门岛的地铁线有着海上最美地铁的称号，强烈推荐拍从集美学村到岛内的方向。但厦门不仅有最美地铁，还有最美公交，640、651、940、949，可以选择这几条线路横跨大桥。而且因为是公交，相比地铁速度会慢很多，所以会有更多时间拍照。</p><p><img src="/2024-02-18-xiamen-travel/img3.webp" alt="行驶在海上大桥，仿佛人在海上"></p><p>集美学村地铁站出来有很多小吃都挺好吃的，强烈推荐鸡蛋汉堡，个人感觉比在岛内吃到的好吃多了。附近还有一个十里长堤，也是看海的好去处，如果还没去岛内看到海，可以先到这一饱眼福。</p><p>下午去了五缘湾附近的大桥，这里不算是景点，所以也没有多少游客。这里有条步道也非常美，能看到帆船和游轮。</p><p><img src="/2024-02-18-xiamen-travel/img4.webp" alt="五缘大桥步道"></p><h3 id="初三-鼓浪屿"><a href="#初三-鼓浪屿" class="headerlink" title="初三 - 鼓浪屿"></a>初三 - 鼓浪屿</h3><p>初三的行程是鼓浪屿。都说来厦门不来鼓浪屿就等于白来了。大家买船票记得要提前至少一周买，千万不要想着到码头线下买，节假日的时候肯定买不到票的。可以在支付宝的【屿见厦门】小程序购买，记得买¥35一张的单船票，不要购买任何打包门票的。上岛的码头是鼓浪屿西岸的内厝澳码头，全程20分钟左右。这次来鼓浪屿选择了环岛路线，从港后沙滩到皓月园，最后再到三丘田码头返程。中途有一个琴园特别好看，在山路边缘有一个蓝色台子，台子上有一个秋千，许多人排队在这拍照。</p><p><img src="/2024-02-18-xiamen-travel/img5.webp" alt="琴园"><br>当天天气特别好，大太阳映射着天特别蓝，岛上的树也都是绿叶成荫，随便一拍都是风景。</p><p><img src="/2024-02-18-xiamen-travel/img6.webp" alt="返程的夕阳"></p><blockquote><p>💡<br>我是选择11:50出发，个人建议选择这个时间点比较合适，鼓浪屿一天肯定是逛不完的，就算很早出发逛到下午人也累了，还不如早上多休息会，精神充沛游玩体验更好。岛上有很多小吃、果汁、家常菜啥的，不过价格会比较贵，可以提前带一些吃的上岛。返程船票高峰期（17:30-20:00）人会非常多非常挤，可以合理安排时间错峰返程。返程码头有内厝澳（17:30左右最后一班，在岛西侧）和三丘田（0点以前一直有船回去，在岛东侧）。</p></blockquote><h3 id="初四-椰风寨-黄厝海滩"><a href="#初四-椰风寨-黄厝海滩" class="headerlink" title="初四 - 椰风寨&amp;黄厝海滩"></a>初四 - 椰风寨&amp;黄厝海滩</h3><p>初四的行程是逛岛东边的一整个海滩。地铁坐到软件园二期后，打车到一国两制海滩，然后一路像下走，途经椰风寨和黄厝。这连成一片的海滩非常壮观，走在沙滩上吹着海风，看着小朋友们在玩沙子。如果要拍照强烈建议在一国两制海滩这多拍点，因为人少，而且背景都很类似，到了后面人多了就不好取景了。</p><p><img src="/2024-02-18-xiamen-travel/img7.webp" alt="一国两制海滩"><br>海滩上还有越野车，不过价格比较贵，要150-200。</p><h3 id="初五-集美学村"><a href="#初五-集美学村" class="headerlink" title="初五 - 集美学村"></a>初五 - 集美学村</h3><p>由于前几天只是在集美学村停留了一下，并未深入逛，所以今天决定好好逛一下集美学村。</p><p>路线是从集美学村地铁站下来，走到石鼓路，中途会经过华侨大学和集美大学，然后走到楚雨荨家，这边就是大社了，附近的建筑都很有特色。最后到嘉庚公园，坐在公园里欣赏一下海景。</p><p><img src="/2024-02-18-xiamen-travel/img8.webp" alt="嘉庚公园"><br>晚上去一家很火的大排档【阿忠食坊】，在厦门火车站附近。去的时候人非常多，18点左右拿的号，排了一个半小时才吃上。这边有很多本地人也会来吃，所以品质还是有保证的，并且价格不贵，如果不点硬菜海鲜人均几十就能吃饱，推荐海蛎饭，醋肉，算是特色菜。</p><p><img src="/2024-02-18-xiamen-travel/img9.webp" alt="海蛎饭"></p><h3 id="初六"><a href="#初六" class="headerlink" title="初六"></a>初六</h3><p>又跑到集美学村随便逛逛了，十里长堤晚上会有演唱会，有很多路人也会上台演唱，氛围非常好。</p><p><img src="/2024-02-18-xiamen-travel/img10.webp" alt="演唱会"></p><h3 id="初七"><a href="#初七" class="headerlink" title="初七"></a>初七</h3><p>初七一整天都在拍婚纱照，完全没有出去逛。不过选的3个外景【植物园】【上李水库】【珍珠湾】风景都很好，尤其是上李水库，一大片草坪非常绿，看着都养眼。</p><p><img src="/2024-02-18-xiamen-travel/img11.webp" alt="珍珠湾"><br>晚上回酒店前在附近逛的时候意外发现一家装修特别艺术，特别有台湾小店的感觉的台式红烧牛肉面，直觉告诉我这家店很好吃，尝试后的感想是：为什么我没有早几天看到这家店！除了价格比较贵以外，味道特别棒，尤其是面汤，鲜的同时有适中的辣味，甚至当时都想再点一碗。</p><p><img src="/2024-02-18-xiamen-travel/img12.webp" alt="台式牛肉面馆"><br><img src="/2024-02-18-xiamen-travel/img13.webp" alt="台式牛肉面馆"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我在2019年夏天来过一次厦门，这次隔了4年第二次来厦门，依然觉得这是个很值得来旅游的城市，并且还想再来。</p><p>厦门是一座很美的城市，空气很好，绿化率很高，随处可见各种绿树。并且城市里到处能看到大海，天气好的时候随处可见蓝天白云，这样的环境很治愈心情。</p><p>厦门的食物很符合我这个浙江人的胃口，来了8天在吃的方面没有踩过雷，一方面也是做了攻略知道哪些地方不要去，以及提前收集了很多厦门特色店铺。像四果汤、海蛎煎、里脊肉串、鸡蛋汉堡、甘蔗汁，都是来厦门必须要尝试的小吃，一想到在上海都吃不到感到难过。想吃大餐就去一些大排档点菜和海鲜。小吃街推荐去八市，价格实惠味道也不错，中山路那边价格有点贵了，曾厝垵就别去了，都是坑。其实集美学村小吃街也不错，时间充裕可以专门去那尝一尝，我来厦门吃到最好吃的鸡蛋汉堡就是在集美学村。这里强烈推荐一下黄厝中路，这条路我吃到了3家好吃的店，分别是台式红烧牛肉面、丁大姐姜母鸭和一家普通大排档炒菜店，以及一家特别想尝试的东北烧烤店。看到的有缘人可以替我去打卡尝尝。</p><p>厦门的交通应该是最被大家吐槽的一点，岛内只有3条地铁，且只有1号线能到中山路步行街附近，其余所有热门景点地铁都到不了，只能坐公交车或者打车。假期人又非常多，导致热门景点附近非常堵，尤其是环岛南路，演武大桥那一块，每次打开地图都是红的发黑。所以很多拖家带口来旅游的只好不停走路，体验非常差。我这次来没有去人特别多的岛内景区，基本都是坐地铁公交，偶尔打车也是在人少的地方。</p><p>住宿我是选择了龙湖冠寓，并且没有选择住在景区附近，而且在地铁边上，交通也很方便，去中山路半小时就到了。公寓环境很干净，而且超级便宜，一天150左右，你能相信这是在春节的价格吗。</p><p>最后希望大家都能来体验一下美丽的海滨城市。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 旅行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenAI - 新的嵌入式模型和API更新</title>
      <link href="/2024-01-29-openai-new-embedding-model.html"/>
      <url>/2024-01-29-openai-new-embedding-model.html</url>
      
        <content type="html"><![CDATA[<p>OpenAI最近发了一篇<span class="exturl" data-url="aHR0cHM6Ly9vcGVuYWkuY29tL2Jsb2cvbmV3LWVtYmVkZGluZy1tb2RlbHMtYW5kLWFwaS11cGRhdGVz">博客<i class="fa fa-external-link-alt"></i></span>，主要介绍了他们最近发布的新模型，同时新模型还降低了API的价格，做到了加量的同时不加价，最后还给开发者们带来了官方的API密钥管理工具，很多开发者在此前都是在自己的应用里记录API的用量情况，现在也不需要了，直接登录OpenAI的后台就能看到。下面是博客的中文翻译版。</p><span id="more"></span><p>我们正在推出新的模型，降低 GPT-3.5 Turbo 的价格，并为开发者提供新的 API 密钥管理和 API 使用情况理解方法。新推出的模型包括：</p><ul><li><p>两款新的嵌入式表示（Embedding）模型</p></li><li><p>更新后的 GPT-4 Turbo 预览模型</p></li><li><p>更新后的 GPT-3.5 Turbo 模型</p></li><li><p>更新后的文本审核模型</p></li></ul><p>默认情况下，发送至 OpenAI API 的数据将不会用于训练或改善 OpenAI 模型。</p><h2 id="新的嵌入式表示模型与更低的价格"><a href="#新的嵌入式表示模型与更低的价格" class="headerlink" title="新的嵌入式表示模型与更低的价格"></a><strong>新的嵌入式表示模型与更低的价格</strong></h2><p>我们推出了两款新的嵌入式表示模型：体积更小、效率更高的 <strong>text-embedding-3-small</strong> 模型，以及体积更大、性能更强的 <strong>text-embedding-3-large</strong> 模型。</p><p>嵌入式表示是一组数字序列，它能代表自然语言或代码等内容中的概念。这种表示形式简化了机器学习模型和其他算法理解内容之间关系的难度，便于进行聚类或检索等任务。它们被广泛应用于 ChatGPT 和 Assistants API 的知识检索功能，以及许多检索增强生成（RAG）开发者工具中。</p><p><img src="/2024-01-29-openai-new-embedding-model/img1.webp"><br><strong>全新的小型文本嵌入模型</strong></p><p><strong>text-embedding-3-small</strong> 是我们全新推出的高效嵌入模型，性能大幅优于其前代 <strong>text-embedding-ada-002</strong> 模型（于 2022 年 12 月发布）。</p><p><strong>性能更加强大。</strong> 将 <strong>text-embedding-ada-002</strong> 与 <strong>text-embedding-3-small</strong> 进行比较，我们发现在多语言检索的常用基准测试 MIRACL 上，平均得分从 31.4% 提升至 44.0%，而在英语任务的常用基准测试 MTEB 上，平均得分从 61.0% 提升至 62.3%。</p><p><strong>价格大幅降低。</strong> <strong>text-embedding-3-small</strong> 在效率上远超前一代模型 <strong>text-embedding-ada-002</strong>。因此，其价格相较于前代模型降低了 5 倍，从每千 Token 的 $0.0001 降至 $0.00002。</p><p>我们不会停用 <strong>text-embedding-ada-002</strong>，因此客户仍可选择继续使用旧版模型。</p><p>一个全新的大型文本嵌入模型：<strong>text-embedding-3-large</strong></p><p><strong>text-embedding-3-large</strong> 是我们推出的新一代大型嵌入模型，能够创建多达 3072 维的嵌入式表示。</p><p><strong>性能显著提升。</strong> <strong>text-embedding-3-large</strong> 作为我们表现最佳的新模型，在 MIRACL 上的平均得分从 31.4% 提升至 54.9%，而在 MTEB 上的平均得分从 61.0% 提升至 64.6%。</p><table><thead><tr><th><strong>评估基准</strong></th><th><strong>ada v2 版</strong></th><th><strong>text-embedding-3-small</strong></th><th><strong>text-embedding-3-large</strong></th></tr></thead><tbody><tr><td>MIRACL 平均得分</td><td>31.4</td><td>44.0</td><td>54.9</td></tr><tr><td>MTEB 平均得分</td><td>61.0</td><td>62.3</td><td>64.6</td></tr></tbody></table><p><strong>text-embedding-3-large</strong> 的定价为每千 Token $0.00013。</p><p>您可以在我们的 <span class="exturl" data-url="aHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL2VtYmVkZGluZ3M=">嵌入式表示指南<i class="fa fa-external-link-alt"></i></span> 中了解更多有关使用新嵌入模型的信息。</p><p><strong>对缩短嵌入式表示的原生支持</strong></p><p>使用较大的嵌入式表示（例如，在向量存储中用于检索），通常比小型表示消耗更多的计算资源、内存和存储空间。</p><p>我们的两款新嵌入模型均采用了一种技术，允许开发者在使用嵌入式表示时平衡性能和成本。具体来说，开发者可以通过调整 <strong>dimensions</strong> API 参数来缩短嵌入式表示的长度（即减少序列末端的数字），同时保持其表达概念的能力。例如，在 MTEB 基准测试上，缩短至 256 维的 <strong>text-embedding-3-large</strong> 嵌入式表示仍然能胜过 1536 维的未缩短 <strong>text-embedding-ada-002</strong> 嵌入。</p><table><thead><tr><th><strong>评估基准</strong></th><th><strong>ada v2 版</strong></th><th><strong>text-embedding-3-small</strong></th><th><strong>text-embedding-3-small</strong></th><th><strong>text-embedding-3-large</strong></th><th><strong>text-embedding-3-large</strong></th><th><strong>text-embedding-3-large</strong></th></tr></thead><tbody><tr><td>嵌入模型大小</td><td>1536</td><td>512</td><td>1536</td><td>256</td><td>1024</td><td>3072</td></tr><tr><td>MTEB 平均得分</td><td>61.0</td><td>61.6</td><td>62.3</td><td>62.0</td><td>64.1</td><td>64.6</td></tr></tbody></table><p>这种灵活性极高的使用方式，使得即便是在只支持最大 1024 维嵌入式表示的向量数据存储条件下，开发者也可以使用我们的最佳嵌入模型 <strong>text-embedding-3-large</strong>，通过将 <strong>dimensions</strong> 参数设置为 1024，从而将嵌入式表示从 3072 维缩短，以较小的向量大小换取一定的准确度。</p><h2 id="其他新模型及更低价格"><a href="#其他新模型及更低价格" class="headerlink" title="其他新模型及更低价格"></a><strong>其他新模型及更低价格</strong></h2><p><strong>更新后的 GPT-3.5 Turbo 模型及降价</strong></p><p>下周，我们将推出新版 GPT-3.5 Turbo 模型 <strong>gpt-3.5-turbo-0125</strong>，这是过去一年内第三次降低 GPT-3.5 Turbo 的价格，旨在帮助客户扩大规模。新模型的输入价格降低了 50%，至每千 Token $0.0005，输出价格降低了 25%，至每千 Token $0.0015。这个模型还将有多项改进，包括更高的请求格式响应准确度，以及修复了之前影响非英语语言函数调用的文本编码问题的 <span class="exturl" data-url="aHR0cHM6Ly9jb21tdW5pdHkub3BlbmFpLmNvbS90L2dwdC00LTExMDYtcHJldmlldy1pcy1ub3QtZ2VuZXJhdGluZy11dGYtOC80ODI4Mzk=">bug<i class="fa fa-external-link-alt"></i></span>。</p><p>使用固定 <strong>gpt-3.5-turbo</strong> 模型别名的客户将在该模型发布两周后自动从 <strong>gpt-3.5-turbo-0613</strong> 升级至 <strong>gpt-3.5-turbo-0125</strong>。</p><p><strong>更新后的 GPT-4 Turbo 预览版</strong></p><p>自 GPT-4 Turbo 发布以来，超过 70% 的 GPT-4 API 客户请求已转移到 GPT-4 Turbo，以便利用其更新的知识截止日期、更大的 128k 上下文窗口和更低价格。</p><p>今天，我们正在发布一个更新后的 GPT-4 Turbo 预览版模型 <strong>gpt-4-0125-preview</strong>。这个模型在执行任务（如代码生成）方面比之前的预览版更为彻底，目的是减少模型未能完成任务的“懒惰”情况。新模型还包含了针对非英语 UTF-8 生成的 bug 修复。</p><p>对于希望自动升级至新版 GPT-4 Turbo 预览版的用户，我们还推出了一个新的模型名称别名 <strong>gpt-4-turbo-preview</strong>，始终指向我们最新的 GPT-4 Turbo 预览版模型。</p><p>我们计划在未来几个月内推出带有视觉功能的 GPT-4 Turbo 的通用可用版本。</p><p><strong>更新后的审核模型</strong></p><p>免费的 Moderation API 使开发者能够识别潜在的有害文本。作为我们持续安全工作的一部分，我们正在发布 <strong>text-moderation-007</strong>，这是我们迄今为止最健全的审核模型。<strong>text-moderation-latest</strong> 和 <strong>text-moderation-stable</strong> 的别名已更新，指向该模型。您可以通过我们的 <span class="exturl" data-url="aHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3NhZmV0eS1iZXN0LXByYWN0aWNlcw==">安全最佳实践指南<i class="fa fa-external-link-alt"></i></span> 了解更多关于构建安全 AI 系统的信息。</p><h2 id="了解-API-使用情况和管理-API-密钥的新方法"><a href="#了解-API-使用情况和管理-API-密钥的新方法" class="headerlink" title="了解 API 使用情况和管理 API 密钥的新方法"></a><strong>了解 API 使用情况和管理 API 密钥的新方法</strong></h2><p>我们正在推出两项平台改进，以便开发者更好地了解他们的 API 使用情况并更有效地管理 API 密钥。</p><p>首先，开发者现在可以在 <span class="exturl" data-url="aHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2FwaS1rZXlz">API 密钥页面<i class="fa fa-external-link-alt"></i></span> 上为 API 密钥分配权限。例如，可以将密钥设置为仅读取权限，用于支持内部跟踪仪表板，或限制其仅访问特定端点。</p><p>其次，通过 <span class="exturl" data-url="aHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2FwaS1rZXlz">开启跟踪<i class="fa fa-external-link-alt"></i></span> 后，使用情况仪表板和导出功能现在可以展示基于 API 密钥的使用情况。这使得通过为每个功能、团队、产品或项目分配不同的 API 密钥，轻松查看各个层面的使用情况成为可能。</p><p><img src="/2024-01-29-openai-new-embedding-model/img2.webp"><br>在未来几个月，我们计划进一步改善开发者对 API 使用情况的查看和 API 密钥的管理能力，特别是在大型组织中。</p>]]></content>
      
      
      
        <tags>
            
            <tag> OpenAI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu一步到位安装并连接MySQL</title>
      <link href="/2024-01-19-ubuntu-install-mysql.html"/>
      <url>/2024-01-19-ubuntu-install-mysql.html</url>
      
        <content type="html"><![CDATA[<h2 id="第-1-步-更新系统"><a href="#第-1-步-更新系统" class="headerlink" title="第 1 步 - 更新系统"></a><strong>第 1 步 - 更新系统</strong></h2><p>确保我们的系统是最新的，要更新系统，请运行以下 <span class="exturl" data-url="aHR0cHM6Ly93d3cuY3liZXJjaXRpLmJpei9mYXEvdWJ1bnR1LWx0cy1kZWJpYW4tbGludXgtYXB0LWNvbW1hbmQtZXhhbXBsZXMv">apt 命令<i class="fa fa-external-link-alt"></i></span>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt list --upgradable</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><span id="more"></span><p><img src="/2024-01-19-ubuntu-install-mysql/img1.webp" alt="更新系统"><br><img src="/2024-01-19-ubuntu-install-mysql/img2.webp" alt="更新系统"></p><h2 id="第-2-步-在-Ubuntu-22-04-LTS-上寻找-MySQL-8-服务器软件包"><a href="#第-2-步-在-Ubuntu-22-04-LTS-上寻找-MySQL-8-服务器软件包" class="headerlink" title="第 2 步 - 在 Ubuntu 22.04 LTS 上寻找 MySQL 8 服务器软件包"></a><strong>第 2 步 - 在 Ubuntu 22.04 LTS 上寻找 MySQL 8 服务器软件包</strong></h2><p>我们可以使用 apt-cache 命令或 <span class="exturl" data-url="aHR0cHM6Ly93d3cuY3liZXJjaXRpLmJpei9mYXEvdWJ1bnR1LWx0cy1kZWJpYW4tbGludXgtYXB0LWNvbW1hbmQtZXhhbXBsZXMv">apt 命令<i class="fa fa-external-link-alt"></i></span> 来查找 Ubuntu 22.04 LTS 上的 MySQL 服务器和客户端软件包。例如：apt-cache search mysql-server<br>系统会显示一系列可用选项，其中包括 Oracle MySQL 8.xx 和 MariaDB 10.x 的服务器和客户端软件包。</p><p><img src="/2024-01-19-ubuntu-install-mysql/img3.webp" alt="搜索mysql包"></p><blockquote><p>🔑<br>mysql-server-8.0 与 mysql-server-core-8.0 软件包对比：</p><ul><li><strong>mysql-server-8.0</strong> – 这个包几乎在所有情况下都是必需的。它包含了 MySQL 数据库服务器的二进制文件、客户端和系统数据库的设置。- <strong>mysql-server-core-8.0</strong> – 这个包包含服务器的二进制文件，但不包括设置系统数据库所需的全部基础设施。因此，这个包更适合那些要设置 Linux 容器（如 Docker、LXD 等）且不需要所有额外组件（例如 mysql 客户端）的用户。</li></ul></blockquote><h2 id="第-3-步-安装-MySQL-8-服务器软件包"><a href="#第-3-步-安装-MySQL-8-服务器软件包" class="headerlink" title="第 3 步 - 安装 MySQL 8 服务器软件包"></a><strong>第 3 步 - 安装 MySQL 8 服务器软件包</strong></h2><p>我们将在 Ubuntu 22.04 LTS 上安装 MySQL 服务器版本 8.0.28：<br>sudo apt install mysql-server-8.0</p><p><img src="/2024-01-19-ubuntu-install-mysql/img4.webp" alt="安装mysql-server-8.0"></p><h3 id="为根账户设置密码"><a href="#为根账户设置密码" class="headerlink" title="为根账户设置密码"></a><strong>为根账户设置密码</strong></h3><p>首先，设置根账户的密码，运行sudo mysql ，然后按照以下语法设置密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;My7Pass@Word_9_8A_zE&#x27;;</span><br><span class="line">exit</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>🔑<br><strong>MySQL 8.xx 的关键配置文件和端口</strong></p><ul><li>mysql.service，这是服务的名称。您可以使用以下 systemctl 命令来管理它<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start mysql.service</span><br><span class="line">sudo systemctl stop mysql.service</span><br><span class="line">sudo systemctl restart mysql.service</span><br><span class="line">sudo systemctl status mysql.service</span><br></pre></td></tr></table></figure></li><li>&#x2F;etc&#x2F;mysql&#x2F; - MySQL 服务器的主要配置目录。- &#x2F;etc&#x2F;mysql&#x2F;my.cnf - MySQL 数据库服务器的配置文件。编辑 .my.cnf ($HOME&#x2F;.my.cnf) 文件来设置用户特定的选项。以下两个目录中的设置可以覆盖它：<br>&#x2F;etc&#x2F;mysql&#x2F;conf.d&#x2F;&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;- TCP&#x2F;3306 端口 - TCP&#x2F;3306 是 MySQL 服务器的默认网络端口，出于安全考虑，它绑定在 127.0.0.1 上，可以更改这个设置，之后就可以通过在 &#x2F;run&#x2F;mysqld&#x2F; 目录下设置的 localhost 套接字来访问 MySQL 服务器。</li></ul></blockquote><h2 id="第-4-步-加强-MySQL-8-服务器的安全性"><a href="#第-4-步-加强-MySQL-8-服务器的安全性" class="headerlink" title="第 4 步 - 加强 MySQL 8 服务器的安全性"></a><strong>第 4 步 - 加强 MySQL 8 服务器的安全性</strong></h2><p>默认情况下，服务器没有密码，且其他设置也需要调整。让我们运行以下命令来进行设置并加强服务器的安全性：sudo mysql_secure_installation</p><p><img src="/2024-01-19-ubuntu-install-mysql/img5.webp" alt="设置mysql安全性"></p><h2 id="第-5-步-设置-MySQL-服务器开机自启"><a href="#第-5-步-设置-MySQL-服务器开机自启" class="headerlink" title="第 5 步 - 设置 MySQL 服务器开机自启"></a><strong>第 5 步 - 设置 MySQL 服务器开机自启</strong></h2><p>确保 MySQL 服务器 8 在系统启动时能自动启动，可以使用 systemctl 命令来实现：<br>sudo systemctl is-enabled mysql.service<br>如果尚未启用，使用以下命令来启用服务器：<br>sudo systemctl enable mysql.service<br>在 Ubuntu Linux 20.04 LTS 上，通过以下 systemctl 命令来检查 MySQL 8 服务器的状态：<br>sudo systemctl status mysql.service</p><p><img src="/2024-01-19-ubuntu-install-mysql/img6.webp" alt="检查mysql服务状态"></p><h2 id="第-6-步-启动-停止-重启-MySQL-服务器"><a href="#第-6-步-启动-停止-重启-MySQL-服务器" class="headerlink" title="第 6 步 - 启动&#x2F;停止&#x2F;重启 MySQL 服务器"></a><strong>第 6 步 - 启动&#x2F;停止&#x2F;重启 MySQL 服务器</strong></h2><p>我们可以通过命令行在 Ubuntu 22.04 LTS 上控制 MySQL 服务器。如果服务器尚未运行，让我们先启动它：sudo systemctl start mysql.service</p><p>要停止 MySQL 服务器，请输入：sudo systemctl stop mysql.service</p><p>按照下面的方式来重启 MySQL 服务器：sudo systemctl restart mysql.service</p><p>我们还可以使用 journalctl 命令来查看 MySQL 服务的日志记录，方法如下：<br>sudo journalctl -u mysql.service -xe</p><h2 id="第-7-步-登录-MySQL-8-服务器进行测试"><a href="#第-7-步-登录-MySQL-8-服务器进行测试" class="headerlink" title="第 7 步 - 登录 MySQL 8 服务器进行测试"></a><strong>第 7 步 - 登录 MySQL 8 服务器进行测试</strong></h2><p>到目前为止，我们已经学习了如何在 Ubuntu 22.04 LTS 上安装、配置、加固安全性以及启动&#x2F;停止 MySQL 服务器版本 8。接下来，是时候以 root（MySQL 管理员）用户身份登录了。登录语法如下：mysql -hlocalhost -uroot -p ，紧接着命令行会提示输入密码，回车即可进入。</p><p><img src="/2024-01-19-ubuntu-install-mysql/img7.webp" alt="登录mysql"></p><h2 id="第-8-步-配置-MySQL-8-服务器"><a href="#第-8-步-配置-MySQL-8-服务器" class="headerlink" title="第 8 步 - 配置 MySQL 8 服务器"></a><strong>第 8 步 - 配置 MySQL 8 服务器</strong></h2><p>使用文本编辑器编辑 &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf 文件，设置字符集编码，慢sql，binlog等。</p><p><img src="/2024-01-19-ubuntu-install-mysql/img8.webp" alt="配置mysql"></p><h2 id="第9步-通过DataGrip连接MySQL"><a href="#第9步-通过DataGrip连接MySQL" class="headerlink" title="第9步 - 通过DataGrip连接MySQL"></a>第9步 - 通过DataGrip连接MySQL</h2><p>相信很多同学在服务器上安装完MySQL后，就直接开放了服务器的3306端口，为了让数据库管理工具可以直连。但是这个做法很危险，现在互联网上存在着大量机器人，无时无刻在扫大家服务器的3306端口，再恰巧你的数据库账户密码都很简单（root&#x2F;admin），那么有一天当你登录数据库后就会发现被人清空了，惊不惊喜，所以这里我教大家一种更安全的连接数据库的方式。</p><h3 id="安装DataGrip"><a href="#安装DataGrip" class="headerlink" title="安装DataGrip"></a>安装DataGrip</h3><p>去<span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9kYXRhZ3JpcC8=">Jetbrains官网下载<i class="fa fa-external-link-alt"></i></span>安装这个软件，如果能力允许可以支持一下正版</p><h3 id="配置ssh-key"><a href="#配置ssh-key" class="headerlink" title="配置ssh-key"></a>配置ssh-key</h3><p>添加Data Source，选择SSH方式连接</p><p><img src="/2024-01-19-ubuntu-install-mysql/img9.webp" alt="添加Data Source"><br><img src="/2024-01-19-ubuntu-install-mysql/img10.webp" alt="添加SSH配置"></p><h3 id="添加MySQL连接"><a href="#添加MySQL连接" class="headerlink" title="添加MySQL连接"></a>添加MySQL连接</h3><p>返回Data Source页面，这里注意Host要填localhost，而不是服务器的ip地址，因为我们是通过SSH连接的，相当于在服务器本地用命令行连接数据库。最后输入用户名密码，测试连接是否正常。</p><p><img src="/2024-01-19-ubuntu-install-mysql/img11.webp" alt="连接数据库"><br>大功告成。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS提醒事项和Notion双向同步教程</title>
      <link href="/2024-01-08-notion-reminder-sync-guide.html"/>
      <url>/2024-01-08-notion-reminder-sync-guide.html</url>
      
        <content type="html"><![CDATA[<ol><li>前往<span class="exturl" data-url="aHR0cHM6Ly93d3cubm90aW9uLnNvL215LWludGVncmF0aW9ucw==">Notion Integration创建页面<i class="fa fa-external-link-alt"></i></span>创建一个Integration<span id="more"></span><img src="/2024-01-08-notion-reminder-sync-guide/img1.webp" alt="创建integration"></li><li>复制Integration的Secrets，后面有用</li></ol><p><img src="/2024-01-08-notion-reminder-sync-guide/img2.webp" alt="复制secrets"></p><ol><li>创建一个database，字段必须和图里的一模一样</li></ol><p><img src="/2024-01-08-notion-reminder-sync-guide/img6.png" alt="设置integration权限"></p><ol><li>添加connection，给database设置integration权限</li></ol><p><img src="/2024-01-08-notion-reminder-sync-guide/img3.webp" alt="创建database"></p><ol><li>复制database页面url里的databaseId</li></ol><p><img src="/2024-01-08-notion-reminder-sync-guide/img4.webp" alt="复制databaseId"></p><ol><li>打开提醒事项，替换字典里的databaseId和key为上面复制的内容</li></ol><p><img src="/2024-01-08-notion-reminder-sync-guide/img5.webp" alt="替换databaseId"></p><p>本文由<span class="exturl" data-url="aHR0cHM6Ly9ub3Rpb25jb252ZXJ0ZXIuY29tLw==">NotionConverter<i class="fa fa-external-link-alt"></i></span>复制</p>]]></content>
      
      
      
        <tags>
            
            <tag> 快捷指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用ChatGPT一步步实现iOS提醒事项与Notion双向同步</title>
      <link href="/2024-01-08-chatgpt-create-sync-reminder-shortcuts.html"/>
      <url>/2024-01-08-chatgpt-create-sync-reminder-shortcuts.html</url>
      
        <content type="html"><![CDATA[<p>最近因为很多事情需要提醒，因为我是苹果手机，想到最便捷的方法就是提醒事项。但是要创建的提醒事项实在是太多了，手机上一个个操作又太费劲。我又是Notion的重度用户，于是就有了一个想法，能不能在Notion的database管理所有提醒事项，并自动同步到iOS的提醒事项；其次iOS创建的提醒事项也会自动同步到Notion的database，完成双向同步。因为我自己不太熟悉快捷指令，正好可以尝试一次用ChatGPT辅助完成这次的工作。以下是完整演示</p><span id="more"></span><table><thead><tr><th><img src="/2024-01-08-chatgpt-create-sync-reminder-shortcuts/img1.gif" alt="提醒事项到Notion"></th><th><img src="/2024-01-08-chatgpt-create-sync-reminder-shortcuts/img2.gif" alt="Notion同步提醒事项"></th></tr></thead></table><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>首先我把最初的想法告诉了ChatGPT：</p><blockquote><p>我需要一个快捷指令，具体功能是可以双向同步Notion的database和iOS的提醒事项</p></blockquote><p>显然iOS并没有直接的方法能完成双向同步，ChatGPT回复：</p><blockquote><p>不幸的是，直接在iOS快捷指令中实现这样的功能是非常有限的，因为iOS快捷指令本身并不支持直接与Notion API交互，也不支持复杂的数据处理和同步逻辑。要实现这样的功能，你可能需要使用更高级的工具，比如编写一个自定义的应用或脚本，这可能需要编程知识。</p></blockquote><h3 id="实现单向创建"><a href="#实现单向创建" class="headerlink" title="实现单向创建"></a>实现单向创建</h3><p>这时候我们就需要拆分需求了，我们可以先退一步，完成单向同步，也就是先从iOS提醒事项同步到Notion database，于是问ChatGPT：</p><blockquote><p>不需要双向同步，需要实现点击快捷指令后弹出输入框，把输入的内容同时创建提醒事项和同步到notion的database即可</p></blockquote><p>这时候ChatGPT就给出了可行的步骤：</p><blockquote><p><strong>获取Notion API密钥和数据库ID</strong></p><ul><li>在Notion中，创建一个集成并获取API密钥。- 找到你想同步的数据库，并获取其ID。### <strong>创建快捷指令：</strong>1. <strong>打开iOS的“快捷指令”应用。</strong>1. <strong>创建一个新的快捷指令</strong>：</li><li>点击右上角的“+”按钮开始创建。1. <strong>添加输入动作</strong>：</li><li>使用“询问输入”动作来弹出输入框。</li><li>可以自定义输入框的提示文字，例如“请输入提醒内容”。1. <strong>添加提醒事项动作</strong>：</li><li>使用“添加新提醒”动作。</li><li>将“询问输入”的结果作为提醒内容。1. <strong>设置Notion API请求</strong>：</li><li>使用“获取URL的内容”动作来发送POST请求到Notion API。</li><li>设置URL为Notion API的地址（通常是<strong><span class="exturl" data-url="aHR0cHM6Ly9hcGkubm90aW9uLmNvbS92MS9wYWdlcw==">https://api.notion.com/v1/pages<i class="fa fa-external-link-alt"></i></span></strong>）。</li><li>在请求体中，按照Notion API的要求格式化输入内容。</li><li>添加Headers，包括你的Notion API密钥和Content-Type。</li></ul></blockquote><p>我们先准备一个database，添加几个提醒事项最基本的属性</p><p><img src="/2024-01-08-chatgpt-create-sync-reminder-shortcuts/img9.webp" alt="notion database"><br>ChatGPT给了初步的步骤，里面最重要的部分就是Notion API，我们假设现在对Notion API一无所知，于是询问ChatGPT：</p><blockquote><p>如何调用notion api，往database里新增一条记录？请搜索notion api文档(<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLm5vdGlvbi5jb20vZG9jcy93b3JraW5nLXdpdGgtZGF0YWJhc2VzKSVFRiVCQyU4QyVFNyVCQiU5OSVFNSU4NyVCQSVFNSU4NSVCNyVFNCVCRCU5MyVFNiVBRCVBNSVFOSVBQSVBNA==">https://developers.notion.com/docs/working-with-databases)，给出具体步骤<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>ChatGPT回答：</p><blockquote><p><strong>确保你的Notion集成有足够的权限</strong>：你的Notion集成必须具有更新内容的能力（update content capabilities）。你可以在Notion的”My integrations”仪表板中检查和更新这些设置。</p><ol><li><strong>了解Notion数据库的结构</strong>：了解你的Notion数据库的属性和它们的类型（如<strong>title</strong>, <strong>rich_text</strong>, <strong>number</strong>等），因为你需要在API请求中使用这些属性。1. <strong>构建API请求</strong>：使用POST请求至<strong><span class="exturl" data-url="aHR0cHM6Ly9hcGkubm90aW9uLmNvbS92MS9wYWdlcw==">https://api.notion.com/v1/pages<i class="fa fa-external-link-alt"></i></span></strong>来创建一个新页面。请求的主体（body）应包含：</li></ol><ul><li><strong>parent</strong>对象，其中包含数据库的ID。</li><li><strong>properties</strong>对象，其中包含根据你的数据库属性配置的键值对。1. <strong>发送请求</strong>：使用你选择的编程语言或工具发送POST请求。请求头（Headers）中需要包含你的Notion API密钥和适当的内容类型（Content-Type）。</li></ul></blockquote><p>我们只需要配置好获取URL内容，剩下的就是根据Notion API文档，查阅具体properties结构调试即可。</p><p><img src="/2024-01-08-chatgpt-create-sync-reminder-shortcuts/img3.webp" alt="get url content"></p><h3 id="实现反向同步"><a href="#实现反向同步" class="headerlink" title="实现反向同步"></a>实现反向同步</h3><p>接下来让我们完成下一个，也就是从Notion database同步iOS提醒事项，老样子先问ChatGPT：</p><blockquote><p>现在还需要实现另一个功能，需要能同步Notion的database里的内容到提醒事项里的快捷指令</p></blockquote><p>回答：</p><blockquote><p><strong>准备工作：</strong></p><ol><li><strong>获取Notion API密钥和数据库ID</strong>：</li></ol><ul><li>在Notion中创建一个集成，并获取API密钥。</li><li>找到你想要同步的数据库，并获取其ID。<strong>创建快捷指令：</strong></li></ul><ol><li><strong>打开iOS的“快捷指令”应用。</strong>1. <strong>创建一个新的快捷指令</strong>：</li></ol><ul><li>点击右上角的“+”按钮开始创建。1. <strong>获取Notion数据库内容</strong>：</li><li>使用“获取URL的内容”动作来发起一个GET请求到Notion的API端点（通常是<strong><span class="exturl" data-url="aHR0cHM6Ly9hcGkubm90aW9uLmNvbS92MS9kYXRhYmFzZXMvJTdCZGF0YWJhc2VfaWQlN0QvcXVlcnk=">https://api.notion.com/v1/databases/{database_id}/query<i class="fa fa-external-link-alt"></i></span></strong>，将**{database_id}**替换为你的数据库ID）。</li><li>在请求头（Headers）中添加你的Notion API密钥和适当的内容类型。</li><li>解析返回的JSON以获取数据库中的记录。1. <strong>遍历数据库记录</strong>：</li><li>使用“重复”或“循环”动作遍历解析后的数据库记录。</li><li>提取你需要的信息，比如事项的标题、日期等。1. <strong>为每条记录添加提醒事项</strong>：</li><li>在循环内部，使用“添加新提醒”动作。</li><li>将提取的信息设置为提醒事项的内容。1. <strong>测试快捷指令</strong>：</li><li>运行快捷指令并检查iOS提醒事项中是否正确添加了Notion数据库中的内容。</li></ul></blockquote><p>按照ChatGPT的答案我们先有一个大致思路</p><ol><li><p>调用Notion API获取database下所有pages</p></li><li><p>遍历pages，对于每一条page记录，判断提醒事项有无相同事项列表和相同事项标题的记录</p></li><li><p>如果没有，新建这条提醒事项</p></li></ol><p><img src="/2024-01-08-chatgpt-create-sync-reminder-shortcuts/img4.webp" alt="create reminder"><br>这里有一个点要注意，快捷指令中json数组的索引和主流编程语言不一样，首先序号是从1开始，其次索引语法是<code>array.[index]</code>，而不是<code>array[index]</code> ，一开始获取title我写成了<code>properties.名称.title[0].text.content</code>一直报错，查了文档才知道。</p><p>运行后发现不对，提醒事项是添加了，但没有添加到对应列表里，因为提醒事项里并没有对应列表，也不会自动添加不存在的列表，于是需要我们额外做一步：检测page记录的事项列表属性，如果不存在于现有列表，则添加一个新列表</p><p><img src="/2024-01-08-chatgpt-create-sync-reminder-shortcuts/img5.webp" alt="create list reminder"><br>运行后会报错<code>com.apple.reminderkit error -1</code> 搜索了一下也没找到原因，猜测可能是快捷指令提醒事项的bug，无法用不存在的列表选项作为过滤条件。于是只能换一个思路，先获取全部提醒事项，然后获取全部列表，再判断列表中有没有page记录的事项列表属性</p><p><img src="/2024-01-08-chatgpt-create-sync-reminder-shortcuts/img6.webp" alt="create list reminder"><br>这种方式还是无法正常工作，因为List是列表类型，判断方式是全相等，而page记录的事项列表属性是字符串，肯定不会相等，所以我们需要把List转换成字符串，然后再判断是否包含，像这样</p><p><img src="/2024-01-08-chatgpt-create-sync-reminder-shortcuts/img7.webp" alt="create list reminder"><br>把添加列表步骤放在添加提醒事项前面，这样整个快捷指令就正常工作了。</p><p>剩下还有最后一个小细节：当Notion database里没有设置记录的提醒日期时，同步会报错提示没有对应日期。所以我们需要在添加提醒事项前增加一个小步骤，设置好提醒日期。当page记录不存在提醒日期时，设置提醒日期为明天，否则为page记录的提醒日期。这里同样可以问ChatGPT：</p><blockquote><p>如何设置一个日期是明天的变量？</p></blockquote><p>回答</p><blockquote><ol><li><strong>添加“当前日期”动作</strong>：</li></ol><ul><li>从动作列表中搜索并添加“当前日期”动作。这个动作会获取当前的日期和时间。1. <strong>添加“调整日期”动作</strong>：</li><li>接着添加一个“调整日期”动作。这个动作可以用来修改日期和时间。</li><li>将“调整日期”动作连接到“当前日期”动作的输出。1. <strong>设置“调整日期”动作以获取明天的日期</strong>：</li><li>在“调整日期”动作的设置中，选择“添加”选项，并且设置时间增加的量。例如，设置为“1 天”来获取明天的日期。1. <strong>（可选）格式化日期</strong>：</li><li>如果你需要特定的日期格式，可以添加一个“格式化日期”动作。</li><li>在“格式化日期”动作中，选择你想要的日期格式。1. <strong>将结果存储到变量</strong>：</li><li>使用“设置变量”动作来存储修改后的日期。</li><li>给变量命名，例如“明天的日期”。1. <strong>使用变量</strong>：</li><li>现在，你可以在快捷指令的后续步骤中使用这个变量。</li></ul></blockquote><p><img src="/2024-01-08-chatgpt-create-sync-reminder-shortcuts/img8.webp" alt="create reminder"><br>测试一下，大功告成。现在就剩最后一步自动化，我们期望每次打开提醒事项时，自动同步Notion database。于是我们需要在快捷指令的自动化中设置，当打开提醒事项APP时立即运行同步快捷指令，这样整个流程就都走通了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>使用ChatGPT的这一套流程下来还是挺顺利的，从快捷指令各个步骤的选择，到Notion API的接入，ChatGPT都能给出正确的回答，只是在一些比较复杂的细节上还是无法一次性到位，需要更进一步询问ChatGPT修正错误，或者更换解决问题的思路。</p><p>最后分享一下这2个快捷指令</p><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuaWNsb3VkLmNvbS9zaG9ydGN1dHMvNmNiNmRkNGM2ODRhNDc3YzhkMWE1YTE5YmJhNTQ4NjY=">创建Notion提醒事项<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuaWNsb3VkLmNvbS9zaG9ydGN1dHMvNzM3MTFiYWIxZDA3NDU0YTljN2JmNGM2ZThiOTVmYzA=">同步Notion提醒事项<i class="fa fa-external-link-alt"></i></span></p></li></ul><p>本文由<span class="exturl" data-url="aHR0cHM6Ly9ub3Rpb25jb252ZXJ0ZXIuY29tLw==">NotionConverter<i class="fa fa-external-link-alt"></i></span>复制</p>]]></content>
      
      
      
        <tags>
            
            <tag> 快捷指令 </tag>
            
            <tag> ChatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notion converter重构 - 解析与渲染</title>
      <link href="/2024-01-02-notionconverter-refactor.html"/>
      <url>/2024-01-02-notionconverter-refactor.html</url>
      
        <content type="html"><![CDATA[<p>最近<span class="exturl" data-url="aHR0cHM6Ly9ub3Rpb25jb252ZXJ0ZXIuY29tLw==">Notion Converter<i class="fa fa-external-link-alt"></i></span>完成了一次非常大的更新，彻底重构了底层的解析和渲染逻辑，这篇文章想和大家分享一下重构历程。同时我也把解析器开源在了<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pzaG5iL25vdGlvbi1kb20tcGFyc2Vy">Github<i class="fa fa-external-link-alt"></i></span>。</p><span id="more"></span><p>先大概介绍一下老版本的逻辑吧。因为我们一开始就不打算让用户走Notion集成的方式使用插件，会很麻烦，所以解析都是通过jQuery读取Notion页面的dom结构，然后根据class执行不同的渲染逻辑。代码结构大概是这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for (let i = 0; i &lt; $notionPageChildrenNodes.length; i++) &#123;</span><br><span class="line">  let $this = $($notionPageChildrenNodes[i]);</span><br><span class="line">  const className = $this.attr(&quot;class&quot;);</span><br><span class="line">  if (className.indexOf(&quot;notion-header-block&quot;) !== -1) &#123;</span><br><span class="line">    $wechatOutput.append(this.wechatRender.renderHeader($this));</span><br><span class="line">  &#125; else if (className.indexOf(&quot;notion-text-block&quot;) !== -1) &#123;</span><br><span class="line">$wechatOutput.append(this.wechatRender.renderText($this));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种方式在大部分正常场景都工作的很好，但在一些复杂场景下，就无法解析了。</p><p>Notion的页面结构是非常自由的，你可以在段落里缩进段落，列表里写引用块，代码块，并列多个表格等等。这种无限嵌套的结构在老版本里是无法解析的，即使我在里面加了一些解析缩进块的逻辑，也做不到解析无限嵌套，同时这个逻辑也影响了复制为markdown的功能，于是就萌生了重构的念头。在老版本里为什么需要通过jQuery来解析渲染？因为需要获取到dom节点的内容。有没有不通过jQuery就能获取到dom节点内容的方法？有，浏览器原生的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RPTVBhcnNlcg==">DOMParser<i class="fa fa-external-link-alt"></i></span>。它接收html字符串，然后解析成dom树的结构返回，当然原生的DOMParser不是很友好，我选择了开源的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlbWFya2FibGVtYXJrL2h0bWwtZG9tLXBhcnNlcg==">html-dom-parser<i class="fa fa-external-link-alt"></i></span>，专注于解析html，并且优化了返回的数据结构。于是重构思路呼之欲出，即</p><ol><li><p>先通过html-dom-parser把Notion文章解析成中间态的数据结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export type DomNode = &#123;</span><br><span class="line">    type: string // h1, p, text...</span><br><span class="line">    children: DomNode[]</span><br><span class="line">    text: string // 如果type=text时的文本</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建微信公众号和markdown渲染器，都通过读取解析的结果进行渲染，只不过一个渲染html，另一个渲染markdown</p></li></ol><p>计算机领域有一句经典语录，程序&#x3D;算法+数据结构，这么一看上面的思路完美符合这句语录</p><p>贴一下重构后的伪代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">function doParse(element) &#123;</span><br><span class="line">const classes = element.attribs.class</span><br><span class="line">    if (classes.indexOf(&#x27;notion-header-block&#x27;) !== -1) &#123;</span><br><span class="line">      const children = []</span><br><span class="line">      this.parseHeader(element, children)</span><br><span class="line">      return &#123;</span><br><span class="line">        type: &#x27;h1&#x27;,</span><br><span class="line">        children</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">parseHeader(element, children) &#123;</span><br><span class="line">    for (const c of element.children) &#123;</span><br><span class="line">      if (c.type === &#x27;text&#x27;) &#123;</span><br><span class="line">        children.push(this.parseText(c))</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        if (c.attribs.hasOwnProperty(&#x27;class&#x27;)) &#123;</span><br><span class="line">          const classes = c.attribs.class</span><br><span class="line">          if (classes.split(&#x27; &#x27;).some(it =&gt; this.notionBlockClasses.indexOf(it) !== -1)) &#123;</span><br><span class="line">            children.push(this.doParse(c))</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            this.parseHeader(c, children)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          this.parseHeader(c, children)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里重点讲一下递归的思路。Notion里每一个块嵌套的dom层级都很深，加上无法通过jQuery直接查找层级获取数据，所以递归的思路就是遍历当前节点的子节点，如果是文本就解析。否则判断子节点是否有class，如果有，判断class是否在目标解析class集合里，这一步就是解析嵌套块的关键，通过这一步就实现了像标题嵌套链接，列表嵌套代码块的解析，以及无限层级缩进的解析。</p><p><img src="/2024-01-02-notionconverter-refactor/img1.webp" alt="dom结构"><br>解析中最麻烦的是列表的解析，Notion的列表块不是用的原生ul和ol实现的，而且用的复杂的div布局，所以Notion的列表块序号可以做到非常自由，可以随意从任意数字开始，但是公众号里用的是原生的列表标签，所以我在解析完Notion的列表块后，必须把相邻列表块进行合并，转换成标准列表结构。同时还要记录列表项的层级，在渲染的时候设置对应层级的list-type</p><p><img src="/2024-01-02-notionconverter-refactor/img3.webp" alt="Notion列表结构"><br>最后解析出来的结果如下</p><p><img src="/2024-01-02-notionconverter-refactor/img2.webp" alt="解析结果"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 产品 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023个人年度总结</title>
      <link href="/2023-12-28-yearly-summary.html"/>
      <url>/2023-12-28-yearly-summary.html</url>
      
        <content type="html"><![CDATA[<p>时光如梭，2023年在不经意间就到了尾声，随着2023年的落幕，我坐在电脑前，回顾过去一年的旅程。对我来说，这不仅仅是时间的流逝，更是一个充满挑战与成长的年份。在这一年里，我经历了工作的变动，学习了新技能，也在个人层面上取得了不少进步，这篇文章权当对过去一年的记录。</p><span id="more"></span><h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>2023年9月我离开了工作了10个月的创业公司，跳槽到了一家外企。在这里的工作经历还是很开心的，还记得去年刚加入时激动的心情，转眼马上却要离开了。当然我也衷心感谢曾经一起奋斗的同事们，在这里达成了从后端工程师到全栈工程师的转变，同时也藉着业务，第一时间接触到了ChatGPT和AI，涨了许多知识。同时还接触了以前从没有触碰过的音视频领域，学了很多<code>ffmpeg</code> 的技能。</p><p>最后选择离开也是自己对未来生活和工作的想法和公司的发展不匹配，换句话说就是【不合适】，没有特别多的理由，毕竟工作跟爱情一样，不合适就是不合适，也不可能改变对方，最后的结局就是分道扬镳。</p><p><img src="/2023-12-28-yearly-summary/img1.webp" alt="纪念一下奋斗的工位"><br>对于新公司目前还挺满意，各方面也达到了自己的预期，由于是外企，工作中需要频繁用英文沟通，包括文字，会议，所以一直在学习英语，目前进步也很快，单独开会沟通已经完全没问题了，就是日常想用英文跟同事们聊聊生活还是有压力，词汇量明显感觉不够。</p><p><img src="/2023-12-28-yearly-summary/img2.webp" alt="公司楼下圣诞节举办的集市"></p><h1 id="个人发展"><a href="#个人发展" class="headerlink" title="个人发展"></a>个人发展</h1><p>先贴一张2023年Github绿表</p><p><img src="/2023-12-28-yearly-summary/img3.webp" alt="Github stat"><br>今年同时开展了非常多项目，也是一直在学习，挑战各种技术。</p><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9ub3Rpb25jb252ZXJ0ZXIuY29tLw==">Notion converter<i class="fa fa-external-link-alt"></i></span>：去年和<span class="exturl" data-url="aHR0cHM6Ly9iZW50by5tZS9kdW55dQ==">盾宇<i class="fa fa-external-link-alt"></i></span>一起开发的产品，到今年正好一周年。上半年由于工作太忙，都没怎么迭代，下半年时间比较充裕，于是疯狂迭代了巨多功能，用户数也成功突破了1000，这个月订阅收入也突破了1000，算是对我们这一个月努力的回报。而且最近对产品底层的解析和渲染逻辑做了彻底重构，排版速度和质量都提升了不少。对这个产品感兴趣的朋友可以看这篇<a href="https://blog.zshnb.com/2023-12-04-notion-converter-annual.html">文章</a>。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly96c2huYi5jb20vbGlmZXRpbWU=">人生时光轴<i class="fa fa-external-link-alt"></i></span>：12月份在v2ex摸鱼的时候，偶然看到一个帖子，楼主做了一个类似的产品，觉得非常有趣，于是花了2天时间，做了一个更丰富的产品出来，发在了<span class="exturl" data-url="aHR0cHM6Ly92MmV4LmNvbS90Lzk5OTI4OD9wPTE=">v2ex<i class="fa fa-external-link-alt"></i></span>。很感谢v友们的喜欢，大家也提了非常多的意见，我一个个都记录下来了，并且已经开发完大部分，不出意外的话明年元旦过后就能发布新版本了。</p></li><li><p>开源社：记得今年比较早的时候加入的开源社，当时是为了更多参与开源，只不过一直没有时间。直到今年下半年才终于有时间，给开源社的官网提交了几个pr。</p></li><li><p><a href="https://blog.zshnb.com/">博客</a>：今年也是打算好好经营自己的博客。这个博客从2021年开始写，当时是托管在Github pages下，用的一个fork的博客模板。今年上半年也一直没时间管理，直到跳槽后，终于腾出时间，把博客变成了独立部署的博客。</p></li></ul><h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>今年5月份趁着劳动节假期，去了女朋友家里见了父母，吃了订婚酒。7月份女朋友和叔叔阿姨去了我家里见了我父母。两边的交流都很顺利，也非常感谢叔叔阿姨在人生大事上没有给我设置任何的考验和阻拦。内蒙古的草原很美，牛羊肉很好吃，以后一定常去。</p><p>双十一的时候买了一台m2max的Mac Studio，选的64G内存，用起来真是爽，日常打开一堆WebStorm都不带卡的，内存占用基本只有一半。而且M系列的融合内存用来跑AI相关的软件非常合适，如果苹果再把软件好好整一整，那Mac Studio估计就是性价比最高的AI显卡了。</p><p><img src="/2023-12-28-yearly-summary/img4.webp" alt="mac studio"></p><h1 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐"></a>娱乐</h1><p>2023年读了不少书</p><ul><li><p>射雕英雄传</p></li><li><p>天龙八部</p></li><li><p>神雕侠侣</p></li><li><p>连城诀</p></li></ul><p>从连城诀开始，一不小心就迷了武侠小说，买了一堆经典的金庸小说，一口气读完了3大本大部头。读完这几本感觉后劲有点大，剩下的看不动了，只能争取明年看完。</p><ul><li><p>硅谷钢铁侠：马斯克的自传，读完感觉我如果在马斯克手下工作可能坚持不了几天🤣</p></li><li><p>最长的一天：挺喜欢这种历史书的，可以从上帝视角看历史发展的关键转折点</p></li><li><p>一个人的朝圣</p></li><li><p>潜规则</p></li><li><p>血酬定律</p></li><li><p>信：看完了书，还特地去看了电影</p></li><li><p>自私的基因</p></li><li><p>你的灯亮着吗</p></li><li><p>天才引导的历程：讲了很多数学公式的历史发展，对公式不感兴趣也能读下去，跳过公式解析部分就行</p></li><li><p>日本蜡烛图：我是韭菜</p></li><li><p>新威科夫操盘法：还是韭菜</p></li><li><p>超级聊天术</p></li><li><p>中国历代政治得失</p></li><li><p>动物农场：想起了之前看过的1982，异曲同工的思想</p></li></ul><h1 id="2024计划"><a href="#2024计划" class="headerlink" title="2024计划"></a>2024计划</h1><ol><li><p>继续迭代Notion Converter，并且打算把解析引擎开源</p></li><li><p>继续更新博客，尽量做到每月1篇</p></li><li><p>做一个新产品</p></li><li><p>读更多的书，读完能记录一些想法</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React样式陷阱：解决多余分号导致的背景样式问题</title>
      <link href="/2023-12-23-react-style-semicolon.html"/>
      <url>/2023-12-23-react-style-semicolon.html</url>
      
        <content type="html"><![CDATA[<p>在开发<span class="exturl" data-url="aHR0cHM6Ly9saWZldGltZS56c2huYi5jb20v">人生进度表<i class="fa fa-external-link-alt"></i></span>期间，我遇到了一个有趣且富有教育意义的前端开发问题。这个项目需要在一个格子下同时显示多个里程碑，比如使用不同的颜色来区分不同的内容。2个颜色呈现上下分布，而4个颜色则形成四宫格，如下图所示： <img src="/2023-12-23-react-style-semicolon/img.png" alt="四宫格样式示例"></p><span id="more"></span><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>我决定通过<code>background</code>属性的<code>linear-gradient</code>来实现这一需求。以下是实现逻辑的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">switch (props.backgroundColor.length) &#123;</span><br><span class="line">  case 1: &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      backgroundColor: props.backgroundColor[0]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  case 2: &#123;</span><br><span class="line">    const colors = props.backgroundColor.map(it =&gt; `$&#123;it&#125; 50%`).join(&#x27;,&#x27;)</span><br><span class="line">    return &#123;</span><br><span class="line">      background: `linear-gradient(to top, $&#123;colors&#125;)`</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  case 3: &#123;</span><br><span class="line">    const colors = props.backgroundColor</span><br><span class="line">    return &#123;</span><br><span class="line">      background: `linear-gradient(to top, $&#123;colors[0]&#125; 33.33%, $&#123;colors[1]&#125; 33.33%, $&#123;colors[1]&#125; 66.66%, $&#123;colors[2]&#125; 66.66%)`</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  case 4: &#123;</span><br><span class="line">    const colors1 = buildLinearGradient(props.backgroundColor[0], props.backgroundColor[1])</span><br><span class="line">    const colors2 = buildLinearGradient(props.backgroundColor[2], props.backgroundColor[3])</span><br><span class="line">    return &#123;</span><br><span class="line">      background: `linear-gradient(to right, $&#123;colors1&#125;), linear-gradient(to right, $&#123;colors2&#125;);`,</span><br><span class="line">      backgroundSize: &#x27;100% 50%&#x27;,</span><br><span class="line">      backgroundPosition: &#x27;center top, center bottom&#x27;,</span><br><span class="line">      backgroundRepeat: &#x27;no-repeat&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a><strong>遇到的问题</strong></h3><p>一开始，2个和3个颜色的情况都能正常显示，但在添加第4个颜色时，样式没有变成预期的四宫格。经过检查，我发现除了<code>background</code>外，其他属性都正确应用了。我最初怀疑是<code>colors1/2</code>变量生成有误，但经过验证，它们是正确的。</p><h3 id="问题的发现与解决"><a href="#问题的发现与解决" class="headerlink" title="问题的发现与解决"></a><strong>问题的发现与解决</strong></h3><p>我花了大约一个小时调试，最终发现原来的<code>background</code>属性值末尾多了一个分号。我原本是直接从浏览器的开发者工具中复制的代码，不慎将分号也复制了进来。这个小小的分号阻止了背景颜色的正确渲染。</p><h3 id="原因剖析"><a href="#原因剖析" class="headerlink" title="原因剖析"></a><strong>原因剖析</strong></h3><p>在React中，样式通常以JavaScript对象的形式定义。在这种格式中，每个属性（如<code>backgroundColor</code>）对应一个值（如<code>&#39;blue&#39;</code>），且不需要像CSS那样以分号结尾。在我的代码中，<code>background</code>属性的值是一个模板字符串，其中不应包含分号。这个多余的分号使得整个属性值变成了无效的CSS语法，浏览器因此无法正确解析这个属性。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a><strong>结论</strong></h3><p>这个经历提醒我，在前端开发中，即使是最小的细节也可能导致意想不到的问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS 带passphrase的sshkey，Git命令不再输入密码</title>
      <link href="/2023-12-17-macos-ssh-passphrase-git.html"/>
      <url>/2023-12-17-macos-ssh-passphrase-git.html</url>
      
        <content type="html"><![CDATA[<p>自从在Mac上换了一次sshkey，而且是带passphrase的，每次git操作都会提示要我输入密码，特别麻烦，于是在google上一阵搜索，找到一个解决方案。在.zshrc文件最开头输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add --apple-use-keychain</span><br></pre></td></tr></table></figure><p>这样只会在第一次命令时要求输入密码，之后都不需要输入密码了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Next.js部署nginx配置子路径访问404</title>
      <link href="/2023-12-10-nextjs-nginx-deploy-404.html"/>
      <url>/2023-12-10-nextjs-nginx-deploy-404.html</url>
      
        <content type="html"><![CDATA[<p>周末没事干，正好被网上一个点子启发，做了个<span class="exturl" data-url="aHR0cHM6Ly96c2huYi5jb20vbGlmZXRpbWU=">人生进度可视化<i class="fa fa-external-link-alt"></i></span>的网页，网页功能比较简单，就是把每一天通过一个小格子显示在网页上，不同的阶段显示不同的颜色，同时也能切换时间单位。<br><img src="/2023-12-10-nextjs-nginx-deploy-404/img1.png" alt="screenshots"></p><span id="more"></span><p>但是在部署的时候遇到点问题。一开始选择的是next.js的static export模式，导出静态html文件，在nginx里配置location如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location /lifetime &#123;</span><br><span class="line">    root /home/ubuntu/root</span><br><span class="line">index index.html</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问404，尝试了好久都找不到原因，遂放弃，改成next.js node server模式<br>按照官网的指导，重新配置nginx如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location /lifetime &#123;</span><br><span class="line">proxy_set_header Host $http_host;</span><br><span class="line">  proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">  proxy_pass http://localhost:3001;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这次不仅404，连静态资源都访问不到了，一阵搜索后找到静态资源的配置，原来next在node模式下静态资源有不同的访问地址</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location /_next/static/ &#123;</span><br><span class="line">        alias /home/ubuntu/root/.next/static/;</span><br><span class="line">        expires 365d;</span><br><span class="line">        access_log off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但网页访问还是404，突然想到会不会跟我配置访问链接有子路径有关系，因为官网的例子是没有子路径的，于是尝试搜索next.js nginx deploy with subpath，找到一个<u>回答</u>，原来是要在next.config.js 里配置basePath，因为根据nginx的配置，生成的访问next.js的链接是<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDozMDAxL2xpZmV0aW1lJUVGJUJDJThDJUU4JTgwJThDJUU5JUJCJTk4JUU4JUFFJUE0bmV4dC5qcyVFOCVBRSVCRiVFOSU5NyVBRSVFOCVCNyVBRiVFNSVCRSU4NCVFNiU5OCVBRiVFNiVCMiVBMSVFNiU5QyU4OSVFNSU4OSU4RCVFNyVCQyU4MCVFNyU5QSU4NCVFRiVCQyU4QyVFNiU4OSU4MCVFNCVCQiVBNSVFOCU4NyVBQSVFNyU4NCVCNiVFNSVCMCVCMTQwNCVFNCVCQSU4NiVFMyU4MCU4MiVFNiU5QyU4MCVFNSU5MCU4RSVFNyU5NCU5RiVFNiU5NSU4OCVFNyU5QSU4NCVFOSU4NSU4RCVFNyVCRCVBRSVFNSVBNiU4MiVFNCVCOCU4Qg==">http://localhost:3001/lifetime，而默认next.js访问路径是没有前缀的，所以自然就404了。最后生效的配置如下<i class="fa fa-external-link-alt"></i></span></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location /lifetime/_next/static/ &#123;</span><br><span class="line">        alias /home/ubuntu/root/.next/static/;</span><br><span class="line">        expires 365d;</span><br><span class="line">        access_log off;</span><br><span class="line">&#125;</span><br><span class="line">location /lifetime &#123;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_pass http://localhost:3001;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然这里还有另一个解决办法是通过rewrite指令，修改proxy_pass后的url。</p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Nginx </tag>
            
            <tag> Next.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notion Converter一周年</title>
      <link href="/2023-12-04-notion-converter-annual.html"/>
      <url>/2023-12-04-notion-converter-annual.html</url>
      
        <content type="html"><![CDATA[<h1 id="Notion-Converter一周年"><a href="#Notion-Converter一周年" class="headerlink" title="Notion Converter一周年"></a>Notion Converter一周年</h1><p>时间飞快，<span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWV3ZWJzdG9yZS5nb29nbGUuY29tL2RldGFpbC9ub3Rpb24tY29udmVydGVyJUVGJUJDJTlBJUU1JTg1JUFDJUU0JUJDJTk3JUU1JThGJUI3JUU0JUI4JTgwJUU5JTk0JUFFJUU2JThFJTkyJUU3JTg5JTg4JUU1JUE0JThEL2ptaG1sbm9vZWdibWxkZWluYmxwbG1tbWdiaGxvbW5w">Notion Converter插件<i class="fa fa-external-link-alt"></i></span>从距离写下第一行代码到现在，正好过了一周年，今天就在一周年纪念日写一篇文章回顾一下吧。</p><span id="more"></span><p><img src="/2023-12-04-notion-converter-annual/img1.png" alt="第一行代码"></p><p>时间拨回到2022年12月4日，我的好友盾宇找到我，说想让我帮忙一起开发一个浏览器插件，可以一键方便地把Notion文章以微信公众号的排版复制到公众号编辑器里发布，因为她是个Notion重度用户，同时又有一个频繁更新的公众号，这个需求对她来说很重要。正好那时候我也想尝试做一些前端相关的项目，于是一拍即合便开工了。</p><p>第一版的开发还是蛮痛苦的，踩了很多坑，因为不知道微信编辑器是如何识别剪切板的内容，判断是文本还是HTML代码。搜索并参考了很多资料才把这个最核心的点调试成功。其次我们希望这个插件要做到上手即用，于是决定不接入Notion API解析，而是直接解析Notion的DOM结构，再用jQuery生成公众号编辑器里的DOM结构。这个流程让我有一种回到10年前写前端的感觉。</p><p>在开发了几周后，第一个版本如约上线，盾宇邀请了第一批用户（小白鼠lol）使用我们的插件。</p><img src="./2023-12-04-notion-converter-annual/img2.png" width="50%" height="30%"><p>很感谢第一批用户愿意使用我们的插件，毕竟第一版的UI设计和交互做的实在是太丑了，站在一年后的今天再回头看，简直不忍直视。</p><p><img src="/2023-12-04-notion-converter-annual/img3.png" alt="错乱的UI"></p><p><img src="/2023-12-04-notion-converter-annual/img4.jpg" alt="第一版"></p><p>插件上两个意义不明的图标，加上最初只支持最基础的几个格式解析，不支持Notion的嵌套块和一些比较独有的块，于是经常用户点开插件会发现插件白屏，或者某些文本没有解析到。所以那段时间我们一直在迭代，UI的更新，支持更多格式，以及那段时间发布的一个最重要的功能：提供更多主题。</p><p><img src="/2023-12-04-notion-converter-annual/img5.jpg" alt="WechatIMG4332.jpg"></p><p>经过优化后的UI虽然已经比第一版好看很多，但还是不能算精致，于是我们请了自己的设计师对UI进行一个大改版，这便是Notion Converter2.0。</p><p><img src="/2023-12-04-notion-converter-annual/img6.jpg" alt="Chrome插件页预览图.JPG"></p><p>设计师的精彩设计，搭配活泼的颜色和自然的布局，让插件瞬间充满了活力，经过这次的改版设计，我们可以自豪的说，目前插件的颜值已经是同类产品的佼佼者了。</p><p>得益于我们不断的迭代和优化（截止到今天总共提交262次，代码修改上万行，拿出去开源都能领JetBrains的免费License）</p><p><img src="/2023-12-04-notion-converter-annual/img7.png" alt="commit history"></p><p>以及对用户问题的快速响应（有一个用户就是因为我们对他问题的快速响应和修复，决定付费年费会员），插件用户数也在不断上升，截止目前用户已经有1000+，在谷歌商店也收获了9个好评。与此同时我们不会停下更新的脚步，会一直伴随大家创作精彩的文章。</p><p><img src="/2023-12-04-notion-converter-annual/img8.png" alt="chrome extension"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 产品 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用prisma连接本地mongodb</title>
      <link href="/2023-11-24-prisma-with-local-mongodb.html"/>
      <url>/2023-11-24-prisma-with-local-mongodb.html</url>
      
        <content type="html"><![CDATA[<p>最近有个项目是用nest.js作为后端框架，数据库是mongodb，ORM框架选择了目前nest.js圈最流行的prisma。项目本身很简单，在本地开发调试的时候出现了一个问题。<br>当我调用<code>prismaService.save()</code>时，报错Transactions are not supported by this deployment，大意是mongodb的事务操作要求必须有replica，即使是在本地开发。<br>搜索之后找到一个<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3ByaXNtYS9wcmlzbWEvaXNzdWVzLzgyNjY=">issue<i class="fa fa-external-link-alt"></i></span>，找到一个配置本地docker mongodb的replica参数</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 - start a mongo container</span><br><span class="line">docker run --name mongodb -d -p 27017:27017 mongo mongod --replSet rs0</span><br><span class="line"></span><br><span class="line">2 - After your mongodb container is up and running, enter mongosh</span><br><span class="line">docker exec -it mongodb mongosh</span><br><span class="line"></span><br><span class="line">3 - Inside mongosh, initiate replica set</span><br><span class="line">rs.initiate(&#123;_id: &#x27;rs0&#x27;, members: [&#123;_id: 0, host: &#x27;localhost:27017&#x27;&#125;]&#125;)</span><br></pre></td></tr></table></figure><p>配置完再执行事务就没问题了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Mongodb </tag>
            
            <tag> Prisma </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chrome插件开发 - 点击插件图标出现弹窗或者监听事件</title>
      <link href="/2023-11-17-chrome-extension-switch-popup.html"/>
      <url>/2023-11-17-chrome-extension-switch-popup.html</url>
      
        <content type="html"><![CDATA[<p>最近在重构Notion Converter插件的整体UI和功能，其中有个重构场景是当点击插件图标时，根据所在页面不同，行为也有所区别。如果在notion页面点击，弹出插件主题。如果在其他页面点击，弹出popup。</p><p>根据<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9kb2NzL2V4dGVuc2lvbnMvcmVmZXJlbmNlL2FjdGlvbi8jcG9wdXA=">chrome插件文档<i class="fa fa-external-link-alt"></i></span>说明，如果在manifest.json里配置了<code>default_popup</code>，那么popup点击事件就不会发送了。于是思路便是不设置<code>default_popup</code> ，同时监听插件点击事件，获取当前tab的url，如果是在notion页面，发送消息通知content_script.js</p><span id="more"></span><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// background.js</span></span><br><span class="line">chrome.<span class="property">action</span>.<span class="property">onClicked</span>.<span class="title function_">addListener</span>(<span class="keyword">async</span> (tab) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> queryOptions = &#123;<span class="attr">active</span>: <span class="literal">true</span>, <span class="attr">lastFocusedWindow</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">  <span class="keyword">const</span> [currentTab] = <span class="keyword">await</span> chrome.<span class="property">tabs</span>.<span class="title function_">query</span>(queryOptions);</span><br><span class="line">  <span class="keyword">const</span> url = currentTab.<span class="property">url</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/https:\/\/.*\.notion.so\/.*/</span>.<span class="title function_">test</span>(url)) &#123;</span><br><span class="line">    chrome.<span class="property">tabs</span>.<span class="title function_">sendMessage</span>(currentTab.<span class="property">id</span>, &#123;<span class="attr">type</span>: <span class="string">&#x27;show-pop-content&#x27;</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果不在notion页面，设置popup，并弹出popup</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// background.js</span></span><br><span class="line">chrome.<span class="property">action</span>.<span class="property">onClicked</span>.<span class="title function_">addListener</span>(<span class="keyword">async</span> (tab) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> queryOptions = &#123;<span class="attr">active</span>: <span class="literal">true</span>, <span class="attr">lastFocusedWindow</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">  <span class="keyword">const</span> [currentTab] = <span class="keyword">await</span> chrome.<span class="property">tabs</span>.<span class="title function_">query</span>(queryOptions);</span><br><span class="line">  <span class="keyword">const</span> url = currentTab.<span class="property">url</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/https:\/\/.*\.notion.so\/.*/</span>.<span class="title function_">test</span>(url)) &#123;</span><br><span class="line">    chrome.<span class="property">tabs</span>.<span class="title function_">sendMessage</span>(currentTab.<span class="property">id</span>, &#123;<span class="attr">type</span>: <span class="string">&#x27;show-pop-content&#x27;</span>&#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    chrome.<span class="property">action</span>.<span class="title function_">setPopup</span>(&#123;<span class="attr">tabId</span>: tab.<span class="property">id</span>, <span class="attr">popup</span>: <span class="string">&#x27;popup.html&#x27;</span>&#125;)</span><br><span class="line">    chrome.<span class="property">action</span>.<span class="title function_">openPopup</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>刷新插件测试后，发现在非notion页面报错 Type Error: chrome.action.openPopup is not a function。</p><p>这个错误把我愣住了，明明在官方文档里有这个函数的定义，怎么跟我说不存在？</p><p><img src="/2023-11-17-chrome-extension-switch-popup/img1.png"></p><p>于是在谷歌上一阵搜索，找到一个<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dvb2dsZUNocm9tZS9kZXZlbG9wZXIuY2hyb21lLmNvbS9pc3N1ZXMvMjYwMg==">GitHub issue<i class="fa fa-external-link-alt"></i></span>，发现这个问题从chrome99就存在了，而且这还是谷歌自己的问题。根据官方回复，这个API只能用在dev channel，然而定义出现在了文档上，把开发者都搞迷糊了。</p><p><img src="/2023-11-17-chrome-extension-switch-popup/img2.png"></p><p>后来他们修了一版，现在这个API可以用于policy-installed插件了。但很可惜个人插件依然无法使用，由于policy的原因。</p><p><img src="/2023-11-17-chrome-extension-switch-popup/img3.png"></p><p>不过好在讨论里有大佬给出了另一种解决方案，代码如下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setPopupForTab</span>(<span class="params">tab</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> url = tab.<span class="property">url</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/https:\/\/.*\.notion.so\/.*/</span>.<span class="title function_">test</span>(url)) &#123;</span><br><span class="line"><span class="comment">// 取消popup的弹出页面</span></span><br><span class="line">    chrome.<span class="property">action</span>.<span class="title function_">setPopup</span>(&#123;<span class="attr">tabId</span>: tab.<span class="property">id</span>, <span class="attr">popup</span>: <span class="string">&#x27;&#x27;</span>&#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    chrome.<span class="property">action</span>.<span class="title function_">setPopup</span>(&#123;<span class="attr">tabId</span>: tab.<span class="property">id</span>, <span class="attr">popup</span>: <span class="string">&#x27;popup.html&#x27;</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chrome.<span class="property">action</span>.<span class="property">onClicked</span>.<span class="title function_">addListener</span>(<span class="keyword">async</span> (tab) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> queryOptions = &#123;<span class="attr">active</span>: <span class="literal">true</span>, <span class="attr">lastFocusedWindow</span>: <span class="literal">true</span>&#125;</span><br><span class="line">  <span class="keyword">const</span> [currentTab] = <span class="keyword">await</span> chrome.<span class="property">tabs</span>.<span class="title function_">query</span>(queryOptions)</span><br><span class="line">  <span class="keyword">const</span> url = currentTab.<span class="property">url</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/https:\/\/.*\.notion.so\/.*/</span>.<span class="title function_">test</span>(url)) &#123;</span><br><span class="line">    chrome.<span class="property">tabs</span>.<span class="title function_">sendMessage</span>(currentTab.<span class="property">id</span>, &#123;<span class="attr">type</span>: <span class="string">&#x27;show-pop-content&#x27;</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切换tab事件，根据tab变更popup</span></span><br><span class="line">chrome.<span class="property">tabs</span>.<span class="property">onActivated</span>.<span class="title function_">addListener</span>(<span class="function">(<span class="params">activeInfo</span>) =&gt;</span> &#123;</span><br><span class="line">  chrome.<span class="property">tabs</span>.<span class="title function_">get</span>(activeInfo.<span class="property">tabId</span>, <span class="function">(<span class="params">tab</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setPopupForTab</span>(tab)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最后完美解决</p>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> ChromeExtension </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron react如何使用Node.js API</title>
      <link href="/2023-11-15-electron-react-nodejs-api.html"/>
      <url>/2023-11-15-electron-react-nodejs-api.html</url>
      
        <content type="html"><![CDATA[<p>最近在做一个编辑器项目，因为打算做跨平台应用，于是技术方案使用了electron，同时希望用React做渲染层，于是使用了<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cm9uLXJlYWN0LWJvaWxlcnBsYXRlL2VsZWN0cm9uLXJlYWN0LWJvaWxlcnBsYXRlJUU0JUJEJTlDJUU0JUI4JUJBJUU4JTg0JTlBJUU2JTg5JThCJUU2JTlFJUI2JUUzJTgwJTgyJUU1JTlDJUE4JUU1JUJDJTgwJUU1JThGJTkxJUU4JUJGJTg3JUU3JUE4JThCJUU0JUI4JUFEJUU5JTgxJTg3JUU1JTg4JUIwJUU0JUI4JTgwJUU0JUJBJTlCJUU5JTlDJTgwJUU4JUE2JTgxJUU4JUIwJTgzJUU3JTk0JUE4Tm9kZS5qcw==">https://github.com/electron-react-boilerplate/electron-react-boilerplate作为脚手架。在开发过程中遇到一些需要调用Node.js<i class="fa fa-external-link-alt"></i></span> api的场景，比如读写文件，与子进程交互。</p><p>一开始尝试直接在React层写<code>fs.readdir</code> ，发现会报错需要webpack5的polyfill。于是尝试搜索<strong>electron nodejs webpack polyfill</strong>，发现出来的结果都需要很复杂的配置，于是我尝试在脚手架仓库issue里搜索相关问题，还真找到一个相近的讨论，具体可以点<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cm9uLXJlYWN0LWJvaWxlcnBsYXRlL2VsZWN0cm9uLXJlYWN0LWJvaWxlcnBsYXRlL2lzc3Vlcy8zMzQw">这里<i class="fa fa-external-link-alt"></i></span>查看，总结如下：</p><span id="more"></span><p>Electron的架构有3个部分</p><ol><li>Main Thread：主线程，启动整个程序</li><li>Preload：胶水层，连接主线程和渲染层的通信</li><li>Web：渲染层，渲染UI用的</li></ol><p>因此如果希望在UI层使用Node.js的api，需要</p><ol><li><p>在preload.js，暴露出通信方法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; contextBridge, ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line">contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&#x27;electronAPI&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">ipcRenderer</span>: &#123;</span><br><span class="line">    <span class="title function_">sendMessage</span>(<span class="params">channel: Channels, ...args: unknown[]</span>) &#123;</span><br><span class="line">      ipcRenderer.<span class="title function_">send</span>(channel, ...args);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">on</span>(<span class="params">channel: Channels, func: (...args: unknown[]) =&gt; <span class="keyword">void</span></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">subscription</span> = (<span class="params">_event: IpcRendererEvent, ...args: unknown[]</span>) =&gt;</span><br><span class="line">        <span class="title function_">func</span>(...args);</span><br><span class="line">      ipcRenderer.<span class="title function_">on</span>(channel, subscription);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        ipcRenderer.<span class="title function_">removeListener</span>(channel, subscription);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">once</span>(<span class="params">channel: Channels, func: (...args: unknown[]) =&gt; <span class="keyword">void</span></span>) &#123;</span><br><span class="line">      ipcRenderer.<span class="title function_">once</span>(channel, <span class="function">(<span class="params">_event, ...args</span>) =&gt;</span> <span class="title function_">func</span>(...args));</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在main.js，监听事件，并作出响应</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;example&#x27;</span>, <span class="function">(<span class="params">event, title</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> webContents = event.<span class="property">sender</span></span><br><span class="line">    <span class="keyword">const</span> win = <span class="title class_">BrowserWindow</span>.<span class="title function_">fromWebContents</span>(webContents)</span><br><span class="line">    win.<span class="title function_">setTitle</span>(title)</span><br><span class="line">event.<span class="title function_">reply</span>(<span class="string">&#x27;ping&#x27;</span>, <span class="string">&#x27;ping&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在React里触发事件，并监听事件返回值</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="variable language_">window</span>.<span class="property">electronAPI</span>;</span><br><span class="line"><span class="keyword">const</span> setButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> titleInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">setButton.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> title = titleInput.<span class="property">value</span></span><br><span class="line">  <span class="comment">// Call the function registered in the window under &#x27;ElectronAPI&#x27;, as said you can change this by chagning the preload file </span></span><br><span class="line">  <span class="comment">// if you want to use something different from &#x27;ElectronAPI&#x27;</span></span><br><span class="line">  ipcRenderer.<span class="title function_">sendMessage</span>(<span class="string">&#x27;example&#x27;</span>)</span><br><span class="line">ipcRenderer.<span class="title function_">on</span>(<span class="string">&#x27;ping&#x27;</span>, <span class="function">(<span class="params">args</span>) =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(args)&#125;) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>这样就能完成从渲染层到主线程的通信了。因此之后所有关于Node.js api的部分都要放在main.js里。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Electron </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用vaadin接入pocivoice的坑</title>
      <link href="/2023-11-06-vaadin-with-picovoice-issue.html"/>
      <url>/2023-11-06-vaadin-with-picovoice-issue.html</url>
      
        <content type="html"><![CDATA[<p>最近接到一个需求，客户想要用<span class="exturl" data-url="aHR0cHM6Ly92YWFkaW4uY29tLw==">vaadin<i class="fa fa-external-link-alt"></i></span>（一个用Java构建web的框架）构建一个页面，然后接入<span class="exturl" data-url="aHR0cHM6Ly9waWNvdm9pY2UuYWkv">picovoice<i class="fa fa-external-link-alt"></i></span>，客户想要一个demo，能支持在网页上语音唤醒，音频识别，意图分析。</p><span id="more"></span><p>客户给了我一篇<span class="exturl" data-url="aHR0cHM6Ly92YWFkaW4uY29tL2Jsb2cvYWx3YXlzLWxpc3RlbmluZy12b2ljZS1jb21tYW5kcy1mb3ItdmFhZGluLXdlYi1hcHBsaWNhdGlvbnM=">博客<i class="fa fa-external-link-alt"></i></span>参考，于是按照博客里的步骤，1. 用vaadin创建一个空应用。2. 接入语音唤醒。很快代码就写完了，运行后点击按钮发现报错’pv_porcupine_init’ failed with status INVALID_ARGUMENT。尝试了谷歌搜索后，并没有找到有价值的信息。又去官方Github仓库issue里搜索，也搜不到类似的内容。搜索无果后尝试点开porcupine.pv文件，发现文件开头有版本信息</p><p><img src="/2023-11-06-vaadin-with-picovoice-issue/img1.png"></p><p>同时发现博客里的porcupine-web依赖版本是2.1.16，猜测依赖和模型版本需要一致，于是把porcupine-web版本改成2.2.0后运行，成功</p><p>接着按照picovoice的<span class="exturl" data-url="aHR0cHM6Ly9waWNvdm9pY2UuYWkvZG9jcy9xdWljay1zdGFydC9yaGluby13ZWIv">官方文档<i class="fa fa-external-link-alt"></i></span>指示，下载rhino_params.pv模型文件，和自定义的context模型文件，运行后报了和上面一样的INVALID_ARGUMENT错误。这次有经验了，查看pv文件版本是2.2.0，context模型版本是3.0.0，2个模型文件的版本居然不一致。很显然context模型版本是无法改的，毕竟是从他们提供的网页下载的，于是只能从pv文件下手。在经过仔细寻找后，从他们的Github仓库中找到了一个叫v3.0的pull request，点进去后找到rhino_params.pv文件，下载查看，确实是3.0.0版本</p><p><img src="/2023-11-06-vaadin-with-picovoice-issue/img2.png"></p><p>于是再次运行，结果又是另一个错误。</p><p>Uncaught (in promise) RhinoRuntimeError: Initialization failed:</p><p>[0] License is expired.</p><p>[1] Failed to allocate, out of memory.</p><p>[2] Failed to load context with OUT_OF_MEMORY.</p><p>这个错误实在找不到解决方法，于是只好在他们的Github仓库里开了<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1BpY292b2ljZS9yaGluby9pc3N1ZXMvNjMx">issue<i class="fa fa-external-link-alt"></i></span>询问，期间不断尝试，包括使用官方例子提供的模型运行也不行。折腾了好久，突发奇想通过隐私窗口运行居然成功了。</p><p><img src="/2023-11-06-vaadin-with-picovoice-issue/img3.png"></p><p>picovoice的web模型是使用wasm的技术，存在indexDB里的，猜测是最初运行了2.2.0版本的模型，导致数据已经存在indexDB里了，后面换成新模型后数据结构不兼容，才出现的这个错误。不过还是想说一下picovoice的speech-to-intent文档里模型版本不一致的问题，让新接入的用户很难排查。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Vaadin </tag>
            
            <tag> Picovoice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Manjaro谷歌浏览器设置代理</title>
      <link href="/2023-10-23-Manjaro-chrome-proxy.html"/>
      <url>/2023-10-23-Manjaro-chrome-proxy.html</url>
      
        <content type="html"><![CDATA[<p>最近安装了最新版本的google chrome浏览器后，运行后发现设置里的proxy选项没有了，于是就导致无法登录google账号，且无法科学上网。经过搜索后发现，在Arch Linux | Manjaro下，想要设置google chrome的代理，需要通过<code>/opt/google/chrome/chrome --proxy-server=&quot;[http://127.0.0.1:7890](http://127.0.0.1:7890/)&quot;</code> 启动后，才能正常科学上网。MacOS下的chrome目前没有这个问题。</p><p><img src="/2023-10-23-Manjaro-chrome-proxy/img1.png" alt="设置"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建指南</title>
      <link href="/2023-10-10-build-blog-guide.html"/>
      <url>/2023-10-10-build-blog-guide.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>目前我个人的博客是托管在Github Pages下，用的也是Github提供的免费域名，但每个程序员都有个梦想，就是有一个属于自己的博客。<br>于是就决定趁着这段时间不忙，把Github Pages上的博客迁移到自己的服务器上，同时把这个过程记录下来，也能帮助到想要拥有自己博客的人。</p><span id="more"></span><h1 id="需求清单"><a href="#需求清单" class="headerlink" title="需求清单"></a>需求清单</h1><p>这里先简单陈列一下，搭建一个个人博客所需要的所有东西</p><ol><li>云服务器，用于运行博客网站</li><li>域名，用于用户可以方便地访问你的博客，你也不想访问别人网站的时候，还要记住毫无规律的IP吧</li><li>备案（可选），如果服务器在大陆，那么这个是逃不了的，没有备案分分钟网站关停</li><li>Github账号，用于存储博客</li></ol><p>接下来按照优先等级一个个详细介绍</p><h1 id="博客仓库"><a href="#博客仓库" class="headerlink" title="博客仓库"></a>博客仓库</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>第一步我们先要有一个博客仓库，用来储存所有的文章，这里我选择的是<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo博客框架<i class="fa fa-external-link-alt"></i></span>，是最近比较热门的博客框架。Hexo可以选择网站的主题，<br>这里我选择的是<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy9kb2NzL2dldHRpbmctc3RhcnRlZC8=">nexT主题<i class="fa fa-external-link-alt"></i></span>，也是Hexo框架里非常热门的主题。<br>按照Hexo文档里的提示，我们执行</p><ol><li><code>npm install -g hexo-cli</code>，安装hexo命令行工具。注意Hexo要求系统已经安装Node.js和Git，如果没有安装过，<br>可以移步各自的官方文档进行安装。</li><li>接着执行<code>hexo init xxx-blog</code>，生成hexo项目</li><li><code>cd xxx-blog &amp;&amp; npm install</code>，然后用任意编辑器打开xxx-blog文件夹，你会看到这样的目录<img src="/2023-10-10-build-blog-guide/img1.png">，说明博客仓库初始化成功了</li><li><code>hexo s</code>，看到控制台打印的<img src="/2023-10-10-build-blog-guide/img3.png">，说明博客运行成功了，访问localhost:4000就能看到博客页面了</li><li><code>hexo g &amp;&amp; hexo d</code>，部署博客到Github仓库，这里hexo会把生成的静态文件push到另一个分支，默认是gh-pages，因此我们需要分清楚，<br>hexo的main分支是存放我们的md文章，以及hexo的配置，gh-pages分支是存放hexo generate后的html等静态文件，用于页面展示的。</li></ol><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>接着需要对hexo进行一些配置，hexo的配置文件在.&#x2F;_config.yml，下面列举几个比较重要的配置，其他配置都可以参考官方文档</p><ol><li><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvY29uZmlndXJhdGlvbiNTaXRl">网站基础信息配置<i class="fa fa-external-link-alt"></i></span>，这里需要配置网站标题，作者等信息</li><li><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvYXNzZXQtZm9sZGVycw==">静态资源配置<i class="fa fa-external-link-alt"></i></span>，这里配置文章里引用的图片</li><li><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudA==">Git部署配置<i class="fa fa-external-link-alt"></i></span>，这里配置博客部署发布的Git信息<br>如果需要 <strong>标签(tags)<strong>、</strong>关于(about)<strong>、</strong>搜索(search)</strong> 页面，需要在source下面新建文件夹，然后新建index.md文件，以标签为例子<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">// 路径：./source/tags/index.md</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line">title: tags</span><br><span class="line">date: 2023-09-13 15:35:31</span><br><span class="line"><span class="section">type: tags</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>nexT官方推荐的配置文件是.&#x2F;config.next.yml，如果懒得看官方文档，可以直接使用我这份<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pzaG5iL2Jsb2cvYmxvYi9tYWluL19jb25maWcubmV4dC55bWw=">配置文件<i class="fa fa-external-link-alt"></i></span></p><h2 id="SEO配置"><a href="#SEO配置" class="headerlink" title="SEO配置"></a>SEO配置</h2><p>参考<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy9kb2NzL3RoZW1lLXNldHRpbmdzL3Nlbw==">官方文档<i class="fa fa-external-link-alt"></i></span>进行基础配置，接着配置各个搜索引擎的收录，这方面的资料很多，可以参考<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmp1YW5lcnR1LmNvbS9hcmNoaXZlcy85MDEzYzhkOA==">这篇<i class="fa fa-external-link-alt"></i></span></p><h2 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h2><p>最开始打算用valine，毕竟是nexT主题用的最多的评论系统之一，但在nexT官方<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0L2lzc3Vlcy80">issue<i class="fa fa-external-link-alt"></i></span>下<br>提到由于valine不再开源，于是他们决定在8.1.0版本中移除valine的默认支持。所以我就把评论系统换成了disqus，可惜disqus被墙了，<br>所以最终换成了disqusjs，通过disqus api的方式接入disqus评论。</p><h1 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h1><p>有了博客仓库后，接下来要做的事就是把网站上线到互联网，让大家访问了</p><h2 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h2><p>国内可以选购腾讯云，阿里云，华为云等，一般博客不需要很好的配置，1核2G足以，这里我用的是腾讯云。购买成功后，需要将自己的ssh 公钥加进服务器里。<br>本地公钥文件在~&#x2F;.ssh&#x2F;id_rsa.pub里，然后在腾讯云云服务器里绑定<br><img src="/2023-10-10-build-blog-guide/img4.png" alt="绑定公钥"><br>创建成功后在密钥列表里选择刚才创建的密钥，绑定服务器即可</p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>最好在你购买的云服务器厂商里注册，绑定解析什么的比较方便，后缀推荐.com|.org，最好不要选择.cn，注册好之后在域名服务商里添加解析<br><img src="/2023-10-10-build-blog-guide/img2.png" alt="域名"></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>通过ssh登录服务器后</p><ol><li>首先安装nginx<code>sudo apt update &amp;&amp; sudo apt install nginx</code><br>接着启动nginx<code>sudo systemctl start nginx &amp;&amp; sudo systemctl enable nginx</code>。nginx的配置文件在&#x2F;etc&#x2F;nginx下</li><li>配置https证书，这里我们使用免费的<span class="exturl" data-url="aHR0cHM6Ly9jZXJ0Ym90LmVmZi5vcmcvaW5zdHJ1Y3Rpb25zP3dzPW5naW54Jm9zPXVidW50dWZvY2Fs">Let’s encrypt<i class="fa fa-external-link-alt"></i></span>，注意如果在这个步骤遇到了域名无法访问的问题，请先往下解决备案后，再回来生成证书。<br>按照Let’s encrypt的教程生成证书后，会自动在nginx&#x2F;sites-available目录下创建以域名为名称的配置文件，如下 <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    server_name blog.zshnb.com;</span><br><span class="line"></span><br><span class="line">    root /home/ubuntu/blog;</span><br><span class="line">    index index.html;</span><br><span class="line">    location ~* ^.+\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt)&#123;</span><br><span class="line">            root /home/ubuntu/blog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    listen [::]:443 ssl; # managed by Certbot</span><br><span class="line">    listen 443 ssl; # managed by Certbot</span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/blog.zshnb.com/fullchain.pem; # managed by Certbot</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/blog.zshnb.com/privkey.pem; # managed by Certbot</span><br><span class="line">    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot</span><br><span class="line">    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    if ($host = blog.zshnb.com) &#123;</span><br><span class="line">        return 301 https://$host$request_uri;</span><br><span class="line">    &#125; # managed by Certbot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    listen 80;</span><br><span class="line">    listen [::]:80;</span><br><span class="line"></span><br><span class="line">    server_name blog.zshnb.com;</span><br><span class="line">    return 404; # managed by Certbot</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 配置完毕后执行<code>sudo nginx -s reload</code></li><li>在服务器个人目录下拉取博客仓库，切换到gh-pages分支，然后便可以访问博客首页了，这里如果域名还未生效，可以通过访问ip的形式查看。</li></ol><h1 id="备案"><a href="#备案" class="headerlink" title="备案"></a>备案</h1><p>因为众所周知的原因，部署在国内服务器的网站，想要合法公开，必须经过工信部备案，如果部署在海外的服务器，可以跳过这一步</p><ol><li>云服务厂商备案，这里我以腾讯云为例子，你也可以根据自己购买的云服务厂商说明来做。<br>首先登录腾讯云，进入<span class="exturl" data-url="aHR0cHM6Ly9jb25zb2xlLmNsb3VkLnRlbmNlbnQuY29tL2JlaWFu">备案页面<i class="fa fa-external-link-alt"></i></span>，点击新增服务，填写好页面要求的信息，这里注意几个点，<ol><li>网站标题不要包含博客，个人姓名，容易过不了审核</li><li>在审核期间把服务器关了<br>腾讯云的审核大概1天就会通过，通过后会提交工信部管局审核，大约需要5个工作日，备案成功后会在腾讯云的备案里看到备案号，后面会用到</li></ol></li><li>公安局备案，登录<span class="exturl" data-url="aHR0cHM6Ly9iZWlhbi5tcHMuZ292LmNuLyMv">备案网站<i class="fa fa-external-link-alt"></i></span>，按照提示填写信息提交即可，备案成功后同样会有备案号</li><li>在nexT配置里添加备案信息，<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy9kb2NzL3RoZW1lLXNldHRpbmdzL2Zvb3RlciNTaXRlLUJlaWFuLUluZm9ybWF0aW9u">参考文档<i class="fa fa-external-link-alt"></i></span></li></ol><h1 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h1><p>按照上面的步骤，在备案通过后，博客已经成功上线了，不过这里还存在一个问题，当我们发布新文章时，我们先要在本地写好文章，然后提交GitHub，然后本地执行<code>hexo g &amp;&amp; hexo d</code>，<br>然后ssh登录服务器，更新gh-pages，这样才能同步发布最新文章到线上，那么我们能不能把这个过程自动化呢？也就是要做到当我们提交文章到GitHub后，有什么办法能自动部署hexo，且自动更新服务器上<br>的gh-pages分支。答案当然是有的，这里我们用GitHub action来完成这一自动化过程。<br>大概的思路如下</p><ol><li>把仓库clone下来</li><li>安装nodejs，进入仓库目录<code>npm install</code></li><li>执行<code>hexo g &amp;&amp; hexo d</code></li><li>ssh服务器，更新gh-pages分支</li></ol><p>这里我们需要准备一个新的ssh密钥对，用于action服务器提交GitHub和ssh服务器，一切准备完毕后，在根目录下新建.&#x2F;.github&#x2F;workflows&#x2F;deploy.yml，内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">checkout</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">prepare</span> <span class="string">node</span> <span class="string">env</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;18.18.0&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">webfactory/ssh-agent@v0.7.0</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ssh-private-key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SSH_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">set</span> <span class="string">github</span> <span class="string">profile</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git config --global user.name &#x27;zshnb&#x27;</span></span><br><span class="line"><span class="string">          git config --global user.email &#x27;a857681664@gmail.com&#x27;</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm i -g hexo</span></span><br><span class="line"><span class="string">          npm i</span></span><br><span class="line"><span class="string">          hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ssh</span> <span class="string">remove</span> <span class="string">server</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">appleboy/ssh-action@v1.0.0</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">host:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SERVER_HOST</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SERVER_USER</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SSH_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">port:</span> <span class="number">22</span></span><br><span class="line">          <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            cd blog</span></span><br><span class="line"><span class="string">            git pull origin gh-pages --rebase</span></span><br><span class="line"><span class="string">            sudo nginx -s reload</span></span><br></pre></td></tr></table></figure><p>action里用到的secrets在仓库的settings -&gt; secrets and variables -&gt; actions里添加<br><img src="/2023-10-10-build-blog-guide/img5.png" alt="action"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此一个个人博客就搭建完毕了，过程虽然比较多，但每个步骤都不算难，只是中间需要等待备案，比较磨人</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地编译最新版本ffmpeg，支持CUDA和zscale、libplacebo</title>
      <link href="/2023-08-05-compile-ffmpeg-with-CUDA-and-zscale-libplacebo.html"/>
      <url>/2023-08-05-compile-ffmpeg-with-CUDA-and-zscale-libplacebo.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近有一个需求，使用ffmpeg把非yuv420p色彩的视频转换成yuv420p bt709色彩，这个需求的具体解决过程放在下一篇文章，此文仅介绍本地ffmpeg编译内容。</p><p>因为在搜索色彩空间转换的过程中，发现了一些需要额外构建的filter，以及需要支持CUDA硬件加速，于是决定自己编译一个最新版本的ffmpeg，同时记录下此次编译的操作过程，希望可以帮到其他有需要的人。</p><span id="more"></span><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ol><li>一台带Nvidia GPU的机器，同时安装好CUDA</li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vdmlkZW8tdGVjaG5vbG9naWVzL3ZpZGVvLWNvZGVjLXNkay8xMS4xL2ZmbXBlZy13aXRoLW52aWRpYS1ncHUvaW5kZXguaHRtbCNjb21waWxpbmctZm9yLWxpbnV4">Nvidia官方教程<i class="fa fa-external-link-alt"></i></span>，如何编译开启CUDA的ffmpeg</li></ol><p>此处最重要的就是ffmpeg的.&#x2F;configure 后面跟着的参数了，上面官方教程里仅仅给了最基础的开启CUDA的参数，还有非常多基础参数没有加上去。我的做法是复制目前生产环境在用的ffmpeg里的参数，加上CUDA需要的参数，作为最终编译的参数。</p><h1 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h1><p>一切准备好之后，开始执行<code>./configure</code> ，ffmpeg会出现各种xxx not found in pkg-config的错误，这是因为本地没有对应的lib，需要一个个安装缺失的lib。我在搜索这个错误的时候，发现了<span class="exturl" data-url="aHR0cHM6Ly9mb3J1bXMucmFzcGJlcnJ5cGkuY29tL3ZpZXd0b3BpYy5waHA/dD0zMTYwNjU=">https://forums.raspberrypi.com/viewtopic.php?t=316065<i class="fa fa-external-link-alt"></i></span>，里面有最初出现的几个错误的解决办法，于是发现了一个规律，大部分的lib都是libxxxx-dev，一个个安装即可。但仍然有少数lib需要手动编译安装，比如<code>aom、chromaprint、libzimg、libplacebo</code> 。</p><h1 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h1><p>上面所有依赖全部安装完便可以开始编译ffmpeg了，一切顺利的话，编译完成后执行<code>./ffmpeg</code> 会看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg version N-111698-g9549712056 Copyright (c) 2000-2023 the FFmpeg developers</span><br><span class="line">  built with gcc 9 (Ubuntu 9.4.0-1ubuntu1~20.04.1)</span><br><span class="line">  configuration: --enable-nonfree --enable-cuda-nvcc --enable-libnpp </span><br><span class="line">--extra-cflags=-I/usr/local/cuda/include </span><br><span class="line">--extra-ldflags=-L/usr/local/cuda/lib64 </span><br><span class="line">--incdir=/usr/include/x86_64-linux-gnu </span><br><span class="line">--libdir=/usr/lib/x86_64-linux-gnu </span><br><span class="line">--disable-static --enable-shared --enable-cuvid --enable-decoder=aac </span><br><span class="line">--enable-decoder=h264 --enable-decoder=h264_cuvid --enable-demuxer=mov </span><br><span class="line">--enable-filter=scale --enable-gnutls --enable-gpl --enable-libass </span><br><span class="line">--enable-libfdk-aac --enable-libfreetype --enable-libmp3lame --enable-libopus </span><br><span class="line">--enable-libtheora --enable-libvorbis --enable-libvpx --enable-libx264 </span><br><span class="line">--enable-nonfree --enable-nvdec --enable-nvenc --enable-pic </span><br><span class="line">--enable-protocol=file --enable-protocol=https --enable-vaapi </span><br><span class="line">--enable-libplacebo --enable-vulkan --enable-ladspa --enable-libaom </span><br><span class="line">--enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio </span><br><span class="line">--enable-libcodec2 --enable-libflite --enable-libfontconfig --enable-libfribidi </span><br><span class="line">--enable-libzimg --enable-libgme --enable-libgsm --enable-libjack </span><br><span class="line">--enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libpulse </span><br><span class="line">--enable-librsvg --enable-librubberband --enable-libshine --enable-libsnappy </span><br><span class="line">--enable-libsoxr --enable-libspeex --enable-libssh --enable-libtwolame </span><br><span class="line">--enable-libvidstab --enable-libwebp --enable-libx265 --enable-libxml2 </span><br><span class="line">--enable-libxvid --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx </span><br><span class="line">--enable-openal --enable-opencl --enable-opengl --enable-sdl2 </span><br><span class="line">--enable-libdc1394 --enable-libdrm --enable-libiec61883 --enable-frei0r</span><br></pre></td></tr></table></figure><p>最后附上一键安装脚本的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pzaG5iL2ZmbXBlZy1ncHUtY29tcGlsZS1ndWlkZQ==">仓库地址<i class="fa fa-external-link-alt"></i></span>，有需要可以自取</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin实体使用JPA的save自动设置id问题</title>
      <link href="/2023-02-25-kotlin-spring-jpa-entity-save.html"/>
      <url>/2023-02-25-kotlin-spring-jpa-entity-save.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近打算把公司后端项目从Java迁移到Kotlin，在迁移JPA实体类的时候，用data class代替了Java定义的class，同时用var+默认值的方式改写了id的定义</p><span id="more"></span><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">User</span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GenerateStrategy(xxxStrategy.class)</span></span><br><span class="line">    <span class="keyword">var</span> id: String = <span class="string">&quot;&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>改完后上线发现jpaRepository.save方法不会对实体参数自动设置id了，于是便开始debug</p><h1 id="探寻"><a href="#探寻" class="headerlink" title="探寻"></a>探寻</h1><p>跟踪jpaRepository.save</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;S <span class="keyword">extends</span> <span class="title class_">T</span>&gt; S <span class="title function_">save</span><span class="params">(S entity)</span> &#123;</span><br><span class="line"></span><br><span class="line">    Assert.notNull(entity, <span class="string">&quot;Entity must not be null.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (entityInformation.isNew(entity)) &#123;</span><br><span class="line">        em.persist(entity);</span><br><span class="line">        <span class="keyword">return</span> entity;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> em.merge(entity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现有个isNew的判断，继续跟踪isNew</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isNew</span><span class="params">(T entity)</span> &#123;</span><br><span class="line">    <span class="type">ID</span> <span class="variable">id</span> <span class="operator">=</span> getId(entity);</span><br><span class="line">    Class&lt;ID&gt; idType = getIdType();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!idType.isPrimitive()) &#123;</span><br><span class="line">        <span class="keyword">return</span> id == <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (id <span class="keyword">instanceof</span> Number) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((Number) id).longValue() == <span class="number">0L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(String.format(<span class="string">&quot;Unsupported primitive id type %s!&quot;</span>, idType));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认实现是通过id类型判断，如果是number类型，判断是否为0，否则判断是否为null。<br>看到这思路已经出来大半了，上面data class定义的id类型是String，由于Kotlin语法要求，非空类型 设置了默认值，于是isNew先进入了第一个if，然后返回false，那么save方法就进入了merge的分支。<br>而Java版本没有设置默认值，所以默认为null，isNew返回true，区别就在这里。由于传入的实体已经存在id（虽然没有值）于是merge操作便不会给传入的实体赋值生成的id。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>问题都查清楚了，那要怎么解决这个问题呢</p><ol><li>使用number类型作为主键</li><li>使用Kotlin可空类型作为主键</li><li>不要依赖参数自动设置，强制使用返回值作为后续使用的实体</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Kotlin </tag>
            
            <tag> Spring JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm9.x安装本地文件依赖踩坑</title>
      <link href="/2023-02-02-npm-install-link-problem.html"/>
      <url>/2023-02-02-npm-install-link-problem.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>公司项目下有几个submodule的依赖，通过file协议安装，最近在开发新功能时发现本地更改submodule的代码，主项目无法引用到最新的代码，<br>同时webstorm的代码跳转会进入node_module目录下同名文件夹，而同事表示他们本地没有这种情况。</p><span id="more"></span><h1 id="探寻"><a href="#探寻" class="headerlink" title="探寻"></a>探寻</h1><p>经过对比发现我跟同事电脑开发环境只有npm版本不同，我安装的是最新9.2，他们的是8.11，于是我们开始了一番实验。</p><ul><li>同事升级npm到9，出现跟我一样的行为</li><li>我降低npm到8，问题消失</li></ul><p>于是确认是npm9导致的问题，我们又对比了8和9执行<code>npm install</code>命令所生成的package-lock.json不同处<br><img src="/2023-02-02-npm-install-link-problem/package-lock-diff.png" alt="diff"><br>可以看到左边的<code>link: true</code>消失了，取而代之的是<code>file:xxx</code>，这个不同意味着8安装的本地依赖为link类型的文件夹，node_module<br>中的依赖指向了外部源码文件夹，而9则变成了node_module中的依赖为独立文件夹，外部的更改无法同步，只能通过re-install同步。<br>然后我在npm的官方仓库里找到了这个行为的变更记录<br><img src="/2023-02-02-npm-install-link-problem/npm-changelog.jpeg" alt="change log"><br>可以看到第4条，更详细的还可以去看看对应的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25wbS9jbGkvcHVsbC81NDU4">PR<i class="fa fa-external-link-alt"></i></span></p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>问题都查清楚了，那要怎么解决这个问题呢</p><ol><li>降级8</li><li>npm install –install-links&#x3D;false</li><li>.npmrc文件中添加install-links&#x3D;false</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> NPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot import config属性加载顺序踩坑</title>
      <link href="/2022-12-18-spring-config-import.html"/>
      <url>/2022-12-18-spring-config-import.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>SpringBoot2.4.0添加了<code>spring.config.import</code>配置项，可以在配置文件里导入其他配置文件，通常用来抽取一些所有profile都会使用的配置，比如公共服务器之类的，下面用一个demo项目演示一下。</p><span id="more"></span><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p>首先有3个配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application-base.yml</span></span><br><span class="line"><span class="attr">common:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zsh</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application-dev.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">import:</span> <span class="string">application-base.yml</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application-prod.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">import:</span> <span class="string">application-base.yml</span></span><br></pre></td></tr></table></figure><p>然后指定profile为dev运行，打印common.name配置的值</p><p><img src="/2022-12-18-spring-config-import/img1.png" alt="结果"></p><p>可以看到打印出了我们配置的值。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>很多时候我们希望在active profile里覆盖公共的一些配置，比如MySQL url之类的，这里我们覆盖common.name，把上面3个配置文件稍作修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application-dev.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">import:</span> <span class="string">application-base.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">common:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">from</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>然后再次运行</p><p><img src="/2022-12-18-spring-config-import/img2.png" alt="结果"></p><p>奇怪的事情发生了，运行的结果并没有按照我们希望的输出”from dev”，依然还是”zsh”，这是为什么呢？我们来翻一下SpringBoot官方的说明：</p><blockquote><p>Imports can be considered as additional documents inserted just below the document that declares them. They follow the same top-down ordering as regular multi-document files: An import will only be imported once, no matter how many times it is declared.</p></blockquote><p>粗看官方的解释，第一反应是SpringBoot会按照下面的方式转换导入的配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application-dev.yml</span></span><br><span class="line"><span class="comment"># before</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">import:</span> <span class="string">application-base.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">common:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">from</span> <span class="string">dev</span></span><br><span class="line"><span class="comment"># after</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">import:</span> <span class="string">application-base.yml</span></span><br><span class="line"><span class="attr">common:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">zsh</span></span><br><span class="line"><span class="attr">common:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">from</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>按照上面的行为，最后打印出来的应该是”from dev”，但是实际结果好像是下面这样</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application-dev.yml</span></span><br><span class="line"><span class="comment"># before</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">import:</span> <span class="string">application-base.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">common:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">from</span> <span class="string">dev</span></span><br><span class="line"><span class="comment"># after</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">import:</span> <span class="string">application-base.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">common:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">from</span> <span class="string">dev</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">common:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">zsh</span></span><br></pre></td></tr></table></figure><p>于是我又去翻官方有关回答，找到了下面一段解释</p><blockquote><p>In  that example you only actually have one <code>spring.config.import</code>  statement. The second one in the properties file will replace the first.</p><p>Imports will always happen in the order that they are specified, but the  granularity is the current document being processed. So in your example, it wouldn’t matter if you had:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.config.import=my.propertiesmy.property=value</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my.property=valuespring.config.import=my.properties</span><br></pre></td></tr></table></figure><p>The result is the same. The <code>[my.property](http://disq.us/url?url=http%3A%2F%2Fmy.property%3A3zPwzcFT2x4NYuqlf_XVTdE2BeE&amp;cuid=2935315)</code> value will be <code>anotherValue</code>.</p><p>When working on the design, I liked to visualize this a deck of cards. As we read the files, we build up a stack of cards. The first card we process has a <code>spring.config.import</code> statement of <code>[my.properties](http://disq.us/url?url=http%3A%2F%2Fmy.properties%3AeHnV6OOS4iwu4hgYpanuM02s270&amp;cuid=2935315)</code>. You go and fetch the “<span class="exturl" data-url="aHR0cDovL2Rpc3EudXMvdXJsP3VybD1odHRwOi8vbXkucHJvcGVydGllczplSG5WNk9PUzRpd3U0aGdZcGFudU0wMnMyNzAmY3VpZD0yOTM1MzE1">my.properties<i class="fa fa-external-link-alt"></i></span>“ card and place it on top. When you’re done, there’s a stack of cards  and the first one you find containing the property name you want will  win. I hope that helps, and doesn’t make things more confusing :)</p></blockquote><p>明确说明import config的配置会覆盖当前配置文件中的配置。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>如果你的项目存在多套配置文件，且有公共配置文件，注意千万不要把会被覆盖的配置写在公共配置文件内，不然其他引用了公共配置文件的配置文件，将无法覆盖此配置，因此如果某个配置存在被覆盖的可能，请将它单独写在每个启动时引用的配置文件内。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git系列（3）合并冲突</title>
      <link href="/2022-09-18-merge-conflict.html"/>
      <url>/2022-09-18-merge-conflict.html</url>
      
        <content type="html"><![CDATA[<h1 id="合并冲突如何发生"><a href="#合并冲突如何发生" class="headerlink" title="合并冲突如何发生"></a>合并冲突如何发生</h1><p>看到<strong>合并冲突</strong>这4个字，很多人觉得肯定只有合并的时候才会发生。事实上只要你尝试把来自几个不同源的修改同时应用到同一个文件上，都可能发生冲突，这里的应用包括以下几种操作</p><ul><li>merge</li><li>rebase</li><li>cherry-pick</li><li>git stash pop<span id="more"></span>那么为什么会有冲突呢，简单来说就是2个对同一个文件的同一处修改不一致了，Git不知道该用哪一段修改，于是就标记出冲突行，让用户自行解决。</li></ul><p><img src="/2022-09-18-merge-conflict/img1.png" alt="merge branch"></p><p>首先在feature2分支删除change1文件，然后在master分支修改change1文件，最后合并feature2分支，此时git便会提示存在merge conflict，通过git status也能看到发生冲突的文件。git顺便提示了如何解决冲突，对于这个场景来说，解决冲突就意味着是留下还是删除文件，对应的git add&#x2F;git rm命令。</p><p><img src="/2022-09-18-merge-conflict/img2.png" alt="merge branch"></p><p>第2种情况是2个分支的提交同时修改同一个文件的同一处，此时git status提示冲突所在文件，打开文件可以看到git标注的冲突块</p><p><img src="/2022-09-18-merge-conflict/img3.png" alt="merge branch"></p><p>以&#x3D;&#x3D;&#x3D;分割，&lt;&lt;&lt;表示的是当前提交处的修改，&gt;&gt;&gt;表示的是导致冲突的其他操作的修改。这里解决冲突只需要删除git添加的冲突提示，然后正常git add . git commit即可。</p><p>如果出于某种理由不想解决冲突了怎么办？每种操作都可以撤销，比如merge对应的是git merge –abort，表示取消合并，其余几个命令同样。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git系列（2）分支策略</title>
      <link href="/2022-09-05-branch-strategy.html"/>
      <url>/2022-09-05-branch-strategy.html</url>
      
        <content type="html"><![CDATA[<h1 id="分支约定"><a href="#分支约定" class="headerlink" title="分支约定"></a>分支约定</h1><ul><li>Git提供了创建分支的功能，但是没有详细说明如何使用</li><li>需要有一个基于团队协作的最佳实践去避免错误和混淆</li><li>帮助新成员快速理解协作流程</li></ul><p>下面来具体说明。</p><span id="more"></span><h2 id="基于主线分支开发，短时分支策略"><a href="#基于主线分支开发，短时分支策略" class="headerlink" title="基于主线分支开发，短时分支策略"></a>基于主线分支开发，短时分支策略</h2><ul><li>只有极少数的分支</li><li>分支关联很小的提交</li><li>高质量的测试和QA</li><li>分支用后即删</li></ul><h2 id="基于阶段分支开发，长期存活分支策略"><a href="#基于阶段分支开发，长期存活分支策略" class="headerlink" title="基于阶段分支开发，长期存活分支策略"></a>基于阶段分支开发，长期存活分支策略</h2><ul><li>存在不同类型的分支</li><li>每个类型的分支有各自的用途</li><li>存在长期分支，比如master，release</li><li>开发分支往往不会直接在长期分支上直接提交，而是通过merge&#x2F;rebase的方式</li></ul><h2 id="GitHub-Flow"><a href="#GitHub-Flow" class="headerlink" title="GitHub Flow"></a>GitHub Flow</h2><ul><li>只存在一个长期存活分支（master）</li><li>对于新代码，基于master分支创建新分支，用后即删</li></ul><h2 id="Git-Flow"><a href="#Git-Flow" class="headerlink" title="Git Flow"></a>Git Flow</h2><ul><li>存在master和develop2个长期存活分支</li><li>对于新代码，基于master分支创建新分支，开发结束先合并develop分支，再把develop分支合并进master分支</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git系列（1）完美的提交</title>
      <link href="/2022-09-04-perfect-commit.html"/>
      <url>/2022-09-04-perfect-commit.html</url>
      
        <content type="html"><![CDATA[<h1 id="如何创建一个完美的提交"><a href="#如何创建一个完美的提交" class="headerlink" title="如何创建一个完美的提交"></a>如何创建一个完美的提交</h1><ol><li>添加正确，合适的更改内容到暂存区</li><li>编写易读的提交信息</li></ol><p>下面来具体说明。</p><span id="more"></span><p>很多时候我们经常有的一个问题是，更改了许多文件，并且文件之间彼此更改的目的不同，最后提交的时候，一股脑<code>git add . &amp;&amp; git commit -m &quot;update&quot;</code>，这种方式虽然方便快捷，可带来的后果是无法回溯，在未来的时间看到这段提交记录无法得知当时改动的目的。更好的做法是每一次提交所包含的更改是属于同一个主题的，且通过简洁清晰的提交信息记录。下面来看操作步骤。</p><ol><li>有如下3个文件的更改，分别属于3个topic，首先需要提交topic1的信息，注意，在change2文件中同时存在topic1和其他topic的更改</li></ol><p><img src="/2022-09-04-perfect-commit/img1.png" alt="commit"></p><p>可以看到在change2文件中存在2个修改块，分别属于2个topic，但第一个提交信息我们只需要上面的更改块，于是我们可以这样操作 <img src="/2022-09-04-perfect-commit/img4.png" alt="stage add"></p><p>通过执行<code>git add -p file</code>选择此次add的更改块，可以看到change2文件既存在工作区，又存在暂存区。</p><p><img src="/2022-09-04-perfect-commit/img2.png" alt="commit"></p><p>然后我们继续添加change1进入暂存区，此时topic1的所有改动都已经添加完毕，是时候准备提交了。事实上我们完全可以简单一句<code>git commit -m &quot;change1 topic&quot;</code>就完事，但这不符合我们今天的主题，一个完美的提交应该由<strong>主题（简介清晰的概述此次提交）和说明（此次提交修改了什么内容;为什么要修改;此次提交需要注意的点）</strong>组成。下面就是第一个提交的信息，注意第一行下面由一行空行，作用是用来分割主题和说明用的。</p><p><img src="/2022-09-04-perfect-commit/img3.png" alt="commit"></p><p>最后通过<code>git log</code>可以看到此次的提交信息，非常清晰地说明了当时提交的原因，更改内容，为之后的回溯提供非常大的便利。</p><p><img src="/2022-09-04-perfect-commit/img5.png" alt="log"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装Docker教程</title>
      <link href="/2022-05-03-ubuntu-install-docker.html"/>
      <url>/2022-05-03-ubuntu-install-docker.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近经常需要在云服务器上安装Docker，在安装过程中出现不少问题，遂记录下来供自己以及有需要的朋友查阅。<br>本教程适用于Ubuntu 18.04 Ubuntu 20.04 Ubuntu 22.04</p><span id="more"></span><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li><p>安装新版之前卸载旧版本</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br><span class="line">sudo rm -rf /var/lib/docker/ # 如果不打算留旧版本的镜像，容器等数据，可以删掉这个文件夹</span><br></pre></td></tr></table></figure></li><li><p>安装apt证书，更新源仓库，添加docker软件源</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg \</span><br><span class="line">    lsb-release</span><br><span class="line">    </span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="line">echo \</span><br><span class="line">  &quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \</span><br><span class="line"><span class="meta prompt_">  $</span><span class="language-bash">(lsb_release -cs) stable<span class="string">&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span></span></span><br></pre></td></tr></table></figure></li><li><p>安装docker</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure><p> 此时docker已经装好，可以输入<code>sudo docker version</code>验证安装结果，若打印出版本说明安装成功，但是目前所有docker命令均需要root权限，也就是需要sudo，为了去掉docker命令的sudo，还需要接下来的操作</p></li><li><p>去除sudo</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建立用户组（如果已经有可以忽略）</span></span><br><span class="line">sudo groupadd docker</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将当前用户加入docker用户组</span></span><br><span class="line">sudo usermod -aG docker $USER</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生效用户组改动</span></span><br><span class="line">newgrp docker</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启docker</span></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li><li><p>镜像加速</p><p>在&#x2F;etc&#x2F;docker下新建daemon.json（有就不需要创建了）, 然后在文件里输入<code>&#123;&quot;registry-mirrors&quot;: [&quot;https://registry.cn-hangzhou.aliyuncs.com&quot;, &quot;https://registry.docker-cn.com&quot;]&#125;</code>，重启docker服务即可</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle7多模块项目配置</title>
      <link href="/2022-03-23-multi-module-gradle-guide.html"/>
      <url>/2022-03-23-multi-module-gradle-guide.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近自己的项目全部使用Gradle构建，但是在使用的过程中踩了不少坑，因此打算把遇到的坑全部记录下来，方便自己回顾的同时，也能帮助其他人。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>这篇文章主要记录如何使用Gradle配置多模块项目。因为自己的项目采用微服务架构，因此每个服务除了本身业务逻辑模块，还会有对外提供的api模块，于是我把它们拆成了2个模块<br>api和service。</p><span id="more"></span><p>在根目录下的build.gradle的内容如下</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">id <span class="string">&#x27;org.springframework.boot&#x27;</span> version <span class="string">&#x27;2.6.3&#x27;</span></span><br><span class="line">id <span class="string">&#x27;io.spring.dependency-management&#x27;</span> version <span class="string">&#x27;1.0.11.RELEASE&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用所有子module</span></span><br><span class="line">subprojects &#123;</span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;java&#x27;</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;io.spring.dependency-management&#x27;</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;org.springframework.boot&#x27;</span></span><br><span class="line"></span><br><span class="line">jar &#123;</span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">archiveClassifier.set(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ext &#123;</span><br><span class="line">set(<span class="string">&#x27;springCloudVersion&#x27;</span>, <span class="string">&quot;2021.0.0&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">compileJava &#123;</span><br><span class="line">sourceCompatibility(JavaVersion.VERSION_11.toString())</span><br><span class="line">targetCompatibility(JavaVersion.VERSION_11.toString())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">implementation <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencyManagement &#123;</span><br><span class="line">imports &#123;</span><br><span class="line">mavenBom <span class="string">&quot;org.springframework.cloud:spring-cloud-dependencies:$&#123;springCloudVersion&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用到所有module，包括根module</span></span><br><span class="line">allprojects &#123;</span><br><span class="line">group = <span class="string">&#x27;&#x27;</span></span><br><span class="line">version = <span class="string">&#x27;0.0.1-SNAPSHOT&#x27;</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">maven &#123;</span><br><span class="line">allowInsecureProtocol <span class="literal">true</span></span><br><span class="line">url <span class="string">&#x27;http://xxx:8000/repository/maven-releases/&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">maven &#123;</span><br><span class="line">allowInsecureProtocol <span class="literal">true</span></span><br><span class="line">url <span class="string">&#x27;http://xxx:8000/repository/maven-snapshots/&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>api module的build.gradle如下</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为需要对外发布jar包，所以需要这2个plugin</span></span><br><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;java-library&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;maven-publish&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// api jar包没有main类</span></span><br><span class="line">bootJar &#123;</span><br><span class="line">    enabled = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体发布nexus配置</span></span><br><span class="line">publishing &#123;</span><br><span class="line">    publications &#123;</span><br><span class="line">        mavenJava(MavenPublication) &#123;</span><br><span class="line">            from components.java</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            <span class="keyword">def</span> releasesRepoUrl = <span class="string">&#x27;http://xxx:8000/repository/maven-releases/&#x27;</span></span><br><span class="line">            <span class="keyword">def</span> snapshotsRepoUrl = <span class="string">&#x27;http://xxx:8000/repository/maven-snapshots/&#x27;</span></span><br><span class="line">            url = version.endsWith(<span class="string">&#x27;SNAPSHOT&#x27;</span>) ? snapshotsRepoUrl : releasesRepoUrl</span><br><span class="line">            name <span class="string">&#x27;nexus&#x27;</span></span><br><span class="line">            url url</span><br><span class="line">            allowInsecureProtocol <span class="literal">true</span></span><br><span class="line">            credentials &#123;</span><br><span class="line">                username <span class="string">&#x27;&#x27;</span></span><br><span class="line">                password <span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>service module的build.gradle如下</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比较简单，都是定义了一些依赖</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;cn.dev33:sa-token-dao-redis-jackson:1.29.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;cn.dev33:sa-token-spring-boot-starter:1.29.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.apache.commons:commons-pool2&#x27;</span></span><br><span class="line">    runtimeOnly <span class="string">&#x27;mysql:mysql-connector-java&#x27;</span></span><br><span class="line">    annotationProcessor <span class="string">&#x27;org.mapstruct:mapstruct-processor:1.4.2.Final&#x27;</span></span><br><span class="line">    testImplementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span></span><br><span class="line">    testAnnotationProcessor <span class="string">&#x27;org.mapstruct:mapstruct-processor:1.4.2.Final&#x27;</span></span><br><span class="line">    testImplementation <span class="string">&#x27;org.junit.jupiter:junit-jupiter-api:5.8.2&#x27;</span></span><br><span class="line">    testRuntimeOnly <span class="string">&#x27;org.junit.jupiter:junit-jupiter-engine:5.8.2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Protobuf结合Gradle最佳实践</title>
      <link href="/2022-01-22-protobuf-with-gradle.html"/>
      <url>/2022-01-22-protobuf-with-gradle.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近打算实践一下Spring Cloud微服务，完整做一个系统。此次打算全部服务采用Gradle构建，微服务之间通信协议采用Protobuf，因此在系统架构上有2种方案</p><span id="more"></span><ol><li>微服务自己定义message，需要对外提供api的进行单独打包并发布</li><li>所有message定义在独立的项目中打包并发布，所有微服务引用该jar包</li></ol><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>经过一番考虑后选择了第2种，使用这种方案在每个微服务中可以不需要单独定义对外发布模块，比较省事。<br>首先使用IDEA新建1个Gradle项目，然后编辑build.gradle</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义protobuf插件</span></span><br><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;java-library&#x27;</span></span><br><span class="line">    id <span class="string">&quot;com.google.protobuf&quot;</span> version <span class="string">&quot;0.8.18&quot;</span></span><br><span class="line">    id <span class="string">&#x27;maven-publish&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;java&#x27;</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.google.protobuf&#x27;</span></span><br><span class="line"></span><br><span class="line">group <span class="string">&#x27;com.zshnb.mall&#x27;</span></span><br><span class="line">version <span class="string">&#x27;0.0.1-SNAPSHOT&#x27;</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">compileJava &#123;</span><br><span class="line">    sourceCompatibility(JavaVersion.VERSION_11.toString())</span><br><span class="line">    targetCompatibility(JavaVersion.VERSION_11.toString())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;com.google.protobuf:protobuf-java:3.19.3&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.google.protobuf:protobuf-gradle-plugin:0.8.18&#x27;</span></span><br><span class="line">    testImplementation <span class="string">&#x27;org.junit.jupiter:junit-jupiter-api:5.8.2&#x27;</span></span><br><span class="line">    testRuntimeOnly <span class="string">&#x27;org.junit.jupiter:junit-jupiter-engine:5.8.2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        proto &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">protobuf &#123;</span><br><span class="line">    protoc &#123;</span><br><span class="line">        <span class="comment">// 使用官方的protoc编译器</span></span><br><span class="line">        artifact = <span class="string">&#x27;com.google.protobuf:protoc:3.0.0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">publishing &#123;</span><br><span class="line">    publications &#123;</span><br><span class="line">        mavenJava(MavenPublication) &#123;</span><br><span class="line">            from components.java</span><br><span class="line"><span class="comment">//            artifact file(&quot;build/libs/protoss-0.0.1-SNAPSHOT.jar&quot;) // 最初尝试的方法，但是发布的jar包无法使用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            <span class="keyword">def</span> releasesRepoUrl = <span class="string">&#x27;http://localhost:8000/repository/maven-releases/&#x27;</span></span><br><span class="line">            <span class="keyword">def</span> snapshotsRepoUrl = <span class="string">&#x27;http://localhost:8000/repository/maven-snapshots/&#x27;</span></span><br><span class="line">            url = version.endsWith(<span class="string">&#x27;SNAPSHOT&#x27;</span>) ? snapshotsRepoUrl : releasesRepoUrl</span><br><span class="line">            name <span class="string">&#x27;nexus&#x27;</span></span><br><span class="line">            url url</span><br><span class="line">            allowInsecureProtocol <span class="literal">true</span></span><br><span class="line">            credentials &#123;</span><br><span class="line">                username <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">                password <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上设置，运行<code>./gradle clean build publish</code>后会自动把proto编译为class文件，构建成jar包后发布到自己的nexus私服中。经过此次项目搭建，发现还是官方文档靠谱<br>网上的文档要么版本太旧，要么有错误。</p><p>最后，附上此次搭建过程中参考文档</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdyYWRsZS5vcmcvY3VycmVudC91c2VyZ3VpZGUvcHVibGlzaGluZ19tYXZlbi5odG1s">gradle maven publish plugin<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9wcm90b2J1Zi1ncmFkbGUtcGx1Z2lu">gradle protobuf plugin<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzOTkxNjAwNDgwMjY5I2hlYWRpbmctMTM=">windows安装nexus<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Protobuf </tag>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin实现Rust风格的Result</title>
      <link href="/2021-12-04-rust-style.html"/>
      <url>/2021-12-04-rust-style.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>前段时间看到rust的错误处理方式，觉得十分优雅，于是就想能不能用Kotlin模仿一个版本。</p><span id="more"></span><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>先看原版</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">f</span> = File::<span class="title function_ invoke__">open</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">f</span> = <span class="keyword">match</span> f &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(file) =&gt; file,</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(error) =&gt; &#123;</span><br><span class="line">            <span class="built_in">panic!</span>(<span class="string">&quot;Problem opening the file: &#123;:?&#125;&quot;</span>, error)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后看看我用Kotlin实现的版本</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> fileUtil = FileUtil()</span><br><span class="line">    <span class="keyword">val</span> result = fileUtil.openFile(<span class="string">&quot;error&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> content = result match &#123;</span><br><span class="line">        OK &#123; str -&gt;</span><br><span class="line">            str</span><br><span class="line">        &#125;</span><br><span class="line">        Error &#123; error -&gt;</span><br><span class="line">            <span class="keyword">throw</span> error</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    println(content)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在语法结构上看起来已经十分接近了，可惜的是最后返回的content是可用类型，在后续使用的时候必须带上<code>!!</code>或者<code>?:</code>操作符，<br>下面我们来看看如何通过Kotlin的语法实现这样的错误处理。</p><p>首先Kotlin没有<code>match</code>关键字，但是Kotlin有infix函数，可以在语法上形成rust这样的视觉效果。OK和Err分支操作的实现可以通过<code>sealed class</code>基类和子类完成，在返回<code>KResult</code>的函数中根据具体逻辑返回OK或者Err。<br>下面是具体代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">KResult</span>&lt;<span class="type">T, E : Throwable</span>&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isOk</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = <span class="keyword">this</span> <span class="keyword">is</span> OK</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isError</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = <span class="keyword">this</span> <span class="keyword">is</span> Error</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, E : Throwable&gt;</span> KResult<span class="type">&lt;T, E&gt;</span>.<span class="title">OK</span><span class="params">(block: (<span class="type">T</span>) -&gt; <span class="type">T</span>)</span></span>: T? &#123;</span><br><span class="line">        <span class="keyword">return</span> block((<span class="keyword">this</span> <span class="keyword">as</span> OK).<span class="keyword">data</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, E : Throwable&gt;</span> KResult<span class="type">&lt;T, E&gt;</span>.<span class="title">Error</span><span class="params">(block: (<span class="type">E</span>) -&gt; <span class="type">Unit</span>)</span></span>: T? &#123;</span><br><span class="line">        <span class="keyword">this</span> <span class="keyword">as</span> Error</span><br><span class="line">        block(<span class="keyword">this</span>.error)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">data</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OK</span>&lt;<span class="type">T, E : Throwable</span>&gt;(<span class="keyword">val</span> <span class="keyword">data</span>: T): KResult&lt;T, E&gt;() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Error</span>&lt;<span class="type">T, E : Throwable</span>&gt;(<span class="keyword">val</span> <span class="keyword">data</span>: T?, <span class="keyword">val</span> error: E): KResult&lt;T, E&gt;() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span><span class="type">&lt;T, E: Throwable&gt;</span> KResult<span class="type">&lt;T, E&gt;</span>.<span class="title">match</span><span class="params">(block: <span class="type">KResult</span>&lt;<span class="type">T</span>, E&gt;.()</span></span> -&gt; T): T? &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isOk()) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span> <span class="keyword">as</span> OK).<span class="keyword">data</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> (<span class="keyword">this</span> <span class="keyword">as</span> Error).error</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>函数中的使用如下</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">openFile</span><span class="params">(fileName: <span class="type">String</span>)</span></span>: KResult&lt;String?, Throwable&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (fileName == <span class="string">&quot;error&quot;</span>) <span class="keyword">return</span> Error(<span class="literal">null</span>, IOException(<span class="string">&quot;io exception&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> OK(<span class="string">&quot;content&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于双写缓存一致性的思考</title>
      <link href="/2021-10-04-cache-consistency.html"/>
      <url>/2021-10-04-cache-consistency.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>缓存数据库双写一致性一直是面试的一个高频问题，网上关于这个问题的文章也非常多，大家的观点都不一致。这几天在看了十几篇文章后，再加上一些自己的思考，决定写下来供大家一起讨论。</p><p>双写缓存一致性通常指的是1份数据要往缓存（Redis）和数据库（MySQL）里写，本质就是2个写的操作不是原子性的。因此我们可以从下面2个角度去思考</p><ol><li>在无法达到原子性的前提下，哪一步操作失败危害最低？在高并发下的情况哪一种又会更好？</li><li>让2个写的操作原子性</li></ol><p>下面我们分别展开</p><span id="more"></span><h1 id="危害性低"><a href="#危害性低" class="headerlink" title="危害性低"></a>危害性低</h1><p>通用的数据库缓存读写模型大致是这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">read=&gt;start: 读请求</span><br><span class="line">exist=&gt;condition: 缓存中有数据？</span><br><span class="line">no=&gt;inputoutput: 读取数据库数据并放入缓存</span><br><span class="line">yes=&gt;inputoutput: 返回缓存中数据</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">read-&gt;exist</span><br><span class="line">exist(no)-&gt;no-&gt;e</span><br><span class="line">exist(yes)-&gt;yes-&gt;e</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">read=&gt;start: 写请求</span><br><span class="line">write_db=&gt;inputoutput: 操作数据库</span><br><span class="line">write_cache=&gt;inputoutput: 操作缓存</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">read-&gt;write_db</span><br><span class="line">write_db-&gt;write_cache</span><br><span class="line">write_cache-&gt;e</span><br></pre></td></tr></table></figure><p>在写请求里的操作缓存有2种策略，删除或者更新。如果缓存的数据是很简单的计算结果，那可以选择更新，防止miss，如果缓存数据需要很复杂的计算，那可以选择删除，可以节省cpu资源，缺点是会有miss，目前绝大多数都会选择删除缓存，下文也默认使用删除缓存策略。</p><p>除了缓存操作策略，还有1个讨论的点是缓存的删除是在操作数据库前还是后。我们用开头提到的<code>哪一步操作失败危害最低？在高并发下的情况哪一种又会更好？</code>这2个问题分别讨论一下。</p><ul><li>哪一步操作失败危害最低<ul><li>先删缓存失败，缓存里是旧数据，数据库里是新数据，缓存不一致，需要等待缓存过期或者下次触发缓存删除才能让数据一致</li><li>操作数据库失败，数据库里是旧数据，缓存里是旧数据，缓存一致</li><li>因此从这个角度看先操作数据库危害最低</li></ul></li><li>高并发下<ul><li>先删除缓存。线程A发起写请求，删除了缓存，此时线程B发起读请求，读取数据库旧数据并放入缓存，线程A操作完数据库，缓存里为旧数据，缓存不一致</li><li>先操作数据库。线程A发起写请求，线程B发起读请求，此时缓存刚好失效，线程B读取数据库旧数据，线程A操作完数据库后删除缓存，线程B将旧数据放入缓存，缓存不一致</li><li>第2种情况发生的条件是数据库写请求要比读请求先完成，这种情况发生的概率是很小的，一般情况下数据库读肯定是比写要快，所以我认为先操作数据库优于先删除缓存</li></ul></li></ul><p>上面2个问题得出的都是先操作数据库优于先删除缓存，目前大多数人都是认为该方案较优。<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pzaG5iL2ludGVydmlld3ByYWN0aWNlL2Jsb2IvbWFzdGVyL3NyYy9tYWluL2phdmEvY29tL3pzaG5iL2ludGVydmlld3ByYWN0aWNlL2NhY2hlX2NvbnNpc3RlbmN5L0RlbGF5ZWREZWxldGVDYWNoZVN0cmF0ZWd5LmphdmE=">代码实现<i class="fa fa-external-link-alt"></i></span><br>同时对缓存key的删除失败情况，可以选择简单重试，也就是延迟双删，或者使用消息队列记录删除失败的key，待后续继续处理</p><h1 id="排他性"><a href="#排他性" class="headerlink" title="排他性"></a>排他性</h1><ol><li><p>读写都加排他锁</p><p>通过redis分布式锁，在读和写之前都要加锁，只有获取到锁才可以进行下一步操作，优点是简单，缺点是并发度较差。<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pzaG5iL2ludGVydmlld3ByYWN0aWNlL2Jsb2IvbWFzdGVyL3NyYy9tYWluL2phdmEvY29tL3pzaG5iL2ludGVydmlld3ByYWN0aWNlL2NhY2hlX2NvbnNpc3RlbmN5L1dpdGhMb2NrU3RyYXRlZ3kuamF2YQ==">代码实现<i class="fa fa-external-link-alt"></i></span></p></li><li><p>订阅binlog</p><p>写数据库操作后不执行删除缓存，通过另外的线程或者服务订阅binlog，一旦有缓存需求的表发生数据变动，删除缓存，优点是对业务无侵入，缺点是需要额外维护binlog服务。<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pzaG5iL2ludGVydmlld3ByYWN0aWNlL2Jsb2IvbWFzdGVyL3NyYy9tYWluL2phdmEvY29tL3pzaG5iL2ludGVydmlld3ByYWN0aWNlL2NhY2hlX2NvbnNpc3RlbmN5L0JpbmxvZ1N0cmF0ZWd5LmphdmE=">代码实现<i class="fa fa-external-link-alt"></i></span></p></li><li><p>标记失效</p><p>借鉴volatile的思想，在数据库中新建一张<code>cache_info</code>表，有<code>cache_key</code>和<code>valid</code>列，分别表示缓存key名字和是否有效。写数据库操作后将缓存的<code>valid</code>设置为<code>false</code>，读缓存前先去查找缓存<code>key</code>对应的<code>valid</code>，如果是<code>false</code>表示缓存失效，需要重新计算缓存，如果是<code>true</code>则返回缓存值。<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pzaG5iL2ludGVydmlld3ByYWN0aWNlL2Jsb2IvbWFzdGVyL3NyYy9tYWluL2phdmEvY29tL3pzaG5iL2ludGVydmlld3ByYWN0aWNlL2NhY2hlX2NvbnNpc3RlbmN5L0Rpc2FibGVJbkRhdGFiYXNlU3RyYXRlZ3kuamF2YQ==">代码实现<i class="fa fa-external-link-alt"></i></span></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写基于编译期的建造者模式实体类生成器</title>
      <link href="/2021-07-31-builder-design-pattern.html"/>
      <url>/2021-07-31-builder-design-pattern.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>今天我们来聊聊建造者模式，对于建造者模式的理论和一些描述代码网上已经有非常多的文章了，在这里也就不重复赘述了，所以今天来聊聊不一样的。<br><span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0bG9tYm9rLm9yZy9mZWF0dXJlcy9CdWlsZGVy">Lombok<i class="fa fa-external-link-alt"></i></span>想必大家都听说过，就是通过注解，在编译期间修改语法树，最后javac再将修改后的语法树编译成class文件。<br>Lombok有一个@Builder注解，其作用是为添加了该注解的类生成建造者模式的api，例如有以下类</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要在类上方添加@Builder注解，就可以像下面这样创建User对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> User.builder()</span><br><span class="line">    .id(<span class="number">1</span>)</span><br><span class="line">    .name(<span class="string">&quot;name&quot;</span>).build();</span><br></pre></td></tr></table></figure><p>这样的api用起来比传入参数进构造器和手动setXXX优雅多了，当然Lombok在背后都做了什么我们不得而知，感兴趣的同学可以深入了解一下。<br>我们今天要模仿Lombok的api手写一个带Builder模式的实体类，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器中需要为所有属性设置默认值，这步很重要，不然下面的set可能会出现NPE</span></span><br><span class="line">    <span class="comment">// 同时构造方法设置为私有，防止被外部私自实例化对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        id = <span class="number">0</span>;</span><br><span class="line">        name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        sex = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        address = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态内部建造类，所有对对象属性的操作均由该类完成，同时建造类的构造方法也为私有，目的同上</span></span><br><span class="line">    <span class="comment">// setXX为设置属性值，clearXX为恢复属性默认值，setXX和clearXX会返回Builder自己，所以可以做到链式调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> User user;</span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">Builder</span> <span class="params">(User user)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.user = user;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">            user.id = id;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            user.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">            user.sex = sex;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">            user.address = address;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">clearId</span><span class="params">()</span> &#123;</span><br><span class="line">            user.id = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">clearName</span><span class="params">()</span> &#123;</span><br><span class="line">            user.name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">clearAddress</span><span class="params">()</span> &#123;</span><br><span class="line">            user.address = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">clearSex</span><span class="params">()</span> &#123;</span><br><span class="line">            user.sex = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回构建好的对象</span></span><br><span class="line">        <span class="keyword">public</span> User <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建建造者对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title function_">newBuilder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Builder</span>(<span class="keyword">new</span> <span class="title class_">User</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将当前对象转为建造者对象</span></span><br><span class="line">    <span class="keyword">public</span> Builder <span class="title function_">toBuilder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Builder</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">            <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> User.newBuilder()</span><br><span class="line">    .setId(<span class="number">1</span>)</span><br><span class="line">    .setName(<span class="string">&quot;name&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">user = user.toBuilder()</span><br><span class="line">    .clearName().build();</span><br></pre></td></tr></table></figure><p>可以看到我们手写的类功能比Lombok的还要丰富，不仅可以设置对象属性的值，还可以清除对象属性的值，甚至可以将建造者和对象互相转换。但是写这样一个类工作量太大，<br>一个项目中往往有几十个类，如果每个类都这么写，那其他事都干不了了，所以借鉴Lombok的思想，我们通过代码生成这样的类不就解放了吗。</p><p>工具思路是通过一个json描述文件描述一个类的信息，然后使用<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NxdWFyZS9qYXZhcG9ldA==">JavaPoet<i class="fa fa-external-link-alt"></i></span>生成一个Java文件。（注.JavaPoet是一个通过api组装Java源代码，最后生成Java文件的lib）<br>核心生成代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generate</span><span class="params">(String json)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">    <span class="type">Entity</span> <span class="variable">entity</span> <span class="operator">=</span> gson.fromJson(json, Entity.class);</span><br><span class="line">    <span class="type">String</span> <span class="variable">entityClassName</span> <span class="operator">=</span> WordUtils.capitalize(entity.getName());</span><br><span class="line">    <span class="type">String</span> <span class="variable">entityObjectLiteral</span> <span class="operator">=</span> WordUtils.uncapitalize(entityClassName);</span><br><span class="line">    <span class="type">ClassName</span> <span class="variable">className</span> <span class="operator">=</span> ClassName.get(entity.getPackageName(), entityClassName);</span><br><span class="line"></span><br><span class="line">    TypeSpec.<span class="type">Builder</span> <span class="variable">entityTypeBuilder</span> <span class="operator">=</span> TypeSpec.classBuilder(entityClassName)</span><br><span class="line">        .addModifiers(Modifier.PUBLIC);</span><br><span class="line">    <span class="type">MethodSpec</span> <span class="variable">entityConstructor</span> <span class="operator">=</span> MethodSpec.constructorBuilder()</span><br><span class="line">        .addModifiers(Modifier.PRIVATE).build();</span><br><span class="line">    entityTypeBuilder.addMethod(entityConstructor);</span><br><span class="line"></span><br><span class="line">    TypeSpec.<span class="type">Builder</span> <span class="variable">builderTypeBuilder</span> <span class="operator">=</span> TypeSpec.classBuilder(<span class="string">&quot;Builder&quot;</span>)</span><br><span class="line">        .addModifiers(Modifier.PUBLIC, Modifier.STATIC)</span><br><span class="line">        .addField(className, entityObjectLiteral, Modifier.PRIVATE);</span><br><span class="line">    <span class="type">MethodSpec</span> <span class="variable">builderConstructor</span> <span class="operator">=</span> MethodSpec.constructorBuilder()</span><br><span class="line">        .addParameter(className, entityObjectLiteral)</span><br><span class="line">        .addStatement(<span class="string">&quot;this.$N = $N&quot;</span>, entityObjectLiteral, entityObjectLiteral)</span><br><span class="line">        .addModifiers(Modifier.PRIVATE).build();</span><br><span class="line">    builderTypeBuilder.addMethod(builderConstructor);</span><br><span class="line"></span><br><span class="line">    entity.getFields().forEach(it -&gt; &#123;</span><br><span class="line">        <span class="type">FieldTypeFormatAndValue</span> <span class="variable">fieldTypeFormatAndValue</span> <span class="operator">=</span> fieldNameWithInitializeValue.get(it.getType());</span><br><span class="line">        <span class="type">FieldSpec</span> <span class="variable">fieldSpec</span> <span class="operator">=</span> FieldSpec.builder(fieldTypeNameWithTypeName.get(it.getType()), it.getName(), Modifier.PRIVATE)</span><br><span class="line">            .initializer(fieldTypeFormatAndValue.getFormat(), fieldTypeFormatAndValue.getValue()).build();</span><br><span class="line">        entityTypeBuilder.addField(fieldSpec);</span><br><span class="line">        <span class="type">MethodSpec</span> <span class="variable">setMethod</span> <span class="operator">=</span> MethodSpec.methodBuilder(String.format(<span class="string">&quot;set%s&quot;</span>, WordUtils.capitalize(it.getName())))</span><br><span class="line">            .addModifiers(Modifier.PUBLIC)</span><br><span class="line">            .addParameter(fieldTypeNameWithTypeName.get(it.getType()), it.getName())</span><br><span class="line">            .returns(ClassName.get(<span class="string">&quot;&quot;</span>, <span class="string">&quot;Builder&quot;</span>))</span><br><span class="line">            .addStatement(<span class="string">&quot;$N.$N = $N&quot;</span>, entityObjectLiteral, it.getName(), it.getName())</span><br><span class="line">            .addStatement(<span class="string">&quot;return this&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">        builderTypeBuilder.addMethod(setMethod);</span><br><span class="line">        <span class="type">MethodSpec</span> <span class="variable">clearMethod</span> <span class="operator">=</span> MethodSpec.methodBuilder(String.format(<span class="string">&quot;clear%s&quot;</span>, WordUtils.capitalize(it.getName())))</span><br><span class="line">            .addModifiers(Modifier.PUBLIC)</span><br><span class="line">            .returns(ClassName.get(<span class="string">&quot;&quot;</span>, <span class="string">&quot;Builder&quot;</span>))</span><br><span class="line">            .addStatement(String.format(<span class="string">&quot;$N.$N = %s&quot;</span>, fieldTypeFormatAndValue.getFormat()), entityObjectLiteral, it.getName(), fieldTypeFormatAndValue.getValue())</span><br><span class="line">            .addStatement(<span class="string">&quot;return this&quot;</span>).build();</span><br><span class="line">        builderTypeBuilder.addMethod(clearMethod);</span><br><span class="line"></span><br><span class="line">        <span class="type">MethodSpec</span> <span class="variable">getMethod</span> <span class="operator">=</span> MethodSpec.methodBuilder(String.format(<span class="string">&quot;get%s&quot;</span>, WordUtils.capitalize(it.getName())))</span><br><span class="line">            .addModifiers(Modifier.PUBLIC)</span><br><span class="line">            .returns(fieldTypeNameWithTypeName.get(it.getType()))</span><br><span class="line">            .addStatement(<span class="string">&quot;return $N&quot;</span>, it.getName()).build();</span><br><span class="line">        entityTypeBuilder.addMethod(getMethod);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">MethodSpec</span> <span class="variable">buildMethod</span> <span class="operator">=</span> MethodSpec.methodBuilder(<span class="string">&quot;build&quot;</span>)</span><br><span class="line">        .addModifiers(Modifier.PUBLIC)</span><br><span class="line">        .returns(ClassName.get(<span class="string">&quot;&quot;</span>, entityClassName))</span><br><span class="line">        .addStatement(<span class="string">&quot;return $N&quot;</span>, entityObjectLiteral).build();</span><br><span class="line">    builderTypeBuilder.addMethod(buildMethod);</span><br><span class="line"></span><br><span class="line">    <span class="type">MethodSpec</span> <span class="variable">newBuilderMethod</span> <span class="operator">=</span> MethodSpec.methodBuilder(<span class="string">&quot;newBuilder&quot;</span>)</span><br><span class="line">        .addModifiers(Modifier.PUBLIC, Modifier.STATIC)</span><br><span class="line">        .returns(ClassName.get(<span class="string">&quot;&quot;</span>, <span class="string">&quot;Builder&quot;</span>))</span><br><span class="line">        .addStatement(<span class="string">&quot;return new $N(new $N())&quot;</span>, <span class="string">&quot;Builder&quot;</span>, entityClassName).build();</span><br><span class="line">    entityTypeBuilder.addMethod(newBuilderMethod);</span><br><span class="line"></span><br><span class="line">    <span class="type">MethodSpec</span> <span class="variable">toBuilderMethod</span> <span class="operator">=</span> MethodSpec.methodBuilder(<span class="string">&quot;toBuilder&quot;</span>)</span><br><span class="line">        .addModifiers(Modifier.PUBLIC)</span><br><span class="line">        .returns(ClassName.get(<span class="string">&quot;&quot;</span>, <span class="string">&quot;Builder&quot;</span>))</span><br><span class="line">        .addStatement(<span class="string">&quot;return new $N(this)&quot;</span>, <span class="string">&quot;Builder&quot;</span>).build();</span><br><span class="line">    entityTypeBuilder.addMethod(toBuilderMethod);</span><br><span class="line"></span><br><span class="line">    entityTypeBuilder.addType(builderTypeBuilder.build());</span><br><span class="line">    <span class="type">JavaFile</span> <span class="variable">javaFile</span> <span class="operator">=</span> JavaFile.builder(entity.getPackageName(), entityTypeBuilder.build())</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    javaFile.writeToFile(<span class="keyword">new</span> <span class="title class_">File</span>(String.format(<span class="string">&quot;src/main/java&quot;</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给定一段json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;student&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;packageName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.zshnb.patterndesign.builder&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;id&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;int&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;String&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>执行完会在给定的package下生成Java文件，然后我们运行测试看一下结果<br><img src="/2021-07-31-builder-design-pattern/img1.png" alt="测试"><br><img src="/2021-07-31-builder-design-pattern/img2.png" alt="结果"><br>测试通过，说明我们生成的Java文件跟上面手写的类结构一致，当然这个生成器可以加入更多功能，比如为List类型的属性生成addXXX以及addAllXXX等方法，感兴趣的同学可以自行扩展一下。<br>以及这里的读取是通过JSON，也可以通过读取Typescript的类型文件，或者protobuf的定义文件，生成最终的Java类<br>最后贴上项目的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pzaG5iL25ldy1wYXR0ZXJuLWRlc2lnbg==">github地址<i class="fa fa-external-link-alt"></i></span></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot配置ElasticsearchRestTemplate</title>
      <link href="/2021-05-18-springboot-with-es.html"/>
      <url>/2021-05-18-springboot-with-es.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近项目中用到了Elasticsearch，需要在SpringBoot项目上配置，网上找了一圈发现都是使用<code>ElasticsearchTemplate</code>操作，官方最新的推荐是使用<br><code>ElasticsearchRestTemplate</code>，基于HTTP协议与es交互。于是各种查资料，踩坑，在这里把一步步配置的过程记录一下。</p><span id="more"></span><h1 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h1><ol><li><p>首先创建一个SpringBoot项目，添加最基本的依赖和es的依赖(SpringBoot版本为2.3.3)</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建es配置Bean类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ESConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ElasticsearchRestTemplate <span class="title function_">elasticsearchRestTemplate</span><span class="params">(RestHighLevelClient client)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ElasticsearchRestTemplate</span>(client);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在配置文件添加es的配置</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">rest:</span></span><br><span class="line">      <span class="attr">uris:</span> <span class="string">http://ip:9200</span></span><br></pre></td></tr></table></figure></li><li><p>创建es的实体类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Document(indexName = &quot;test-user&quot;, createIndex = false)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserForSearch</span> &#123;</span><br><span class="line">        <span class="meta">@Id</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">        <span class="meta">@Field(type = FieldType.Keyword)</span></span><br><span class="line">        <span class="keyword">private</span> String nickname;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.id = id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getNickname</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> nickname;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNickname</span><span class="params">(String nickname)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.nickname = nickname;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;UserForSearch&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, nickname=&#x27;&quot;</span> + nickname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ```   </span><br><span class="line"><span class="number">5.</span> 使用`ElasticsearchTemplate`添加，查询数据</span><br><span class="line">    ```java</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">EsService</span> &#123;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> ElasticsearchRestTemplate elasticsearchRestTemplate;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEs</span><span class="params">()</span> &#123;</span><br><span class="line">            elasticsearchRestTemplate.delete(<span class="string">&quot;1&quot;</span>, UserForSearch.class);</span><br><span class="line">            <span class="type">UserForSearch</span> <span class="variable">userForSearch</span> <span class="operator">=</span> elasticsearchRestTemplate.get(<span class="string">&quot;1&quot;</span>, UserForSearch.class);</span><br><span class="line">            System.out.println(userForSearch);</span><br><span class="line"></span><br><span class="line">            userForSearch = <span class="keyword">new</span> <span class="title class_">UserForSearch</span>();</span><br><span class="line">            userForSearch.setId(<span class="number">1</span>);</span><br><span class="line">            userForSearch.setNickname(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            elasticsearchRestTemplate.save(userForSearch);</span><br><span class="line">            userForSearch = elasticsearchRestTemplate.get(<span class="string">&quot;1&quot;</span>, UserForSearch.class);</span><br><span class="line"></span><br><span class="line">            System.out.println(userForSearch);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">null</span><br><span class="line">UserForSearch&#123;id=1, nickname=&#x27;name&#x27;&#125;</span><br></pre></td></tr></table></figure></li></ol><p>第一次查询没有数据，输出null，然后调用save方法保存一条数据，接着查询并打印输出，刚才添加的数据成功显示。这样SpringBoot和es的配置就完成了，后面的<br>使用Repository也都大同小异，查找一下资料即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>layui文件上传进度条踩踩坑记</title>
      <link href="/2021-04-05-layui-upload-process.html"/>
      <url>/2021-04-05-layui-upload-process.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近手里一个项目用到了layui，遇到了一个需求，上传文件的时候需要显示进度条，但是layui的上传模块没有提供进度条回调</p><span id="more"></span><h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><p>于是谷歌了一圈，发现一个大神魔改了layui的upload.js，加上了进度条回调功能 <span class="exturl" data-url="aHR0cHM6Ly93d3cuMzV5b3V0aC5jbi82NDQuaHRtbA==">访问原文<i class="fa fa-external-link-alt"></i></span>，可惜原文的代码是不能直接复制使用的，于是我又找了一篇<br><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlhbmd6bC5jb20vZ2V0LWFydGljbGUtZGV0YWlsLTE2Mjg2OC5odG1s">踩坑帖子<i class="fa fa-external-link-alt"></i></span>，这篇文章修复了很多错误，可以使用魔改的upload.js上传文件了<br>(之前文章的写法连上传都会报错)，可惜最重要的进度条显示还是没有修复，于是我又在魔改的upload.js基础上进行了修复。这里我放上经我本人修复并测试的最终版本。(layui版本为2.5.5)，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;</span>上传信息<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-upload&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-normal&quot;</span> <span class="attr">id</span>=<span class="string">&quot;upload-people-btn&quot;</span>&gt;</span>选择文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-upload-list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;layui-table&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>文件名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>大小<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>上传进度<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>状态<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;demoListPeople&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fileListActionPeople&quot;</span>&gt;</span>开始上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/lib/layui-v2.5.5/layui.js&#125;&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">//这里要引入魔改后的js文件，下载地址在下面，同时注意layui.use中删掉引入的upload，引入的upload.js要在layui.js下面</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/lib/layui-v2.5.5/lay/modules/upload.js&#125;&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> element = layui.<span class="property">element</span></span><br><span class="line"><span class="keyword">let</span> demoListPeople = $(<span class="string">&#x27;#demoListPeople&#x27;</span>)</span><br><span class="line">upload.<span class="title function_">render</span>(&#123;</span><br><span class="line">    <span class="attr">elem</span>: <span class="string">&#x27;#upload-people-btn&#x27;</span>,</span><br><span class="line">    <span class="attr">size</span>: <span class="number">102400</span>, <span class="comment">//限制文件大小，单位 KB</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/import-people&#x27;</span>,</span><br><span class="line">    <span class="attr">accept</span>: <span class="string">&#x27;file&#x27;</span>,</span><br><span class="line">    <span class="attr">multiple</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">auto</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">bindAction</span>: <span class="string">&#x27;#fileListActionPeople&#x27;</span>,</span><br><span class="line">    <span class="comment">// 第二篇文章xhr重复，而且progress回调也是错的</span></span><br><span class="line">    <span class="attr">xhr</span>: <span class="keyword">function</span> (<span class="params">index, e</span>) &#123;</span><br><span class="line">        <span class="comment">// e: xhr上传请求回调，返回loaded和</span></span><br><span class="line">        $(<span class="string">&#x27;#demoListPeople&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.layui-progress &#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> progressBarName = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;lay-filter&#x27;</span>)</span><br><span class="line">            <span class="keyword">let</span> percent = <span class="title class_">Math</span>.<span class="title function_">floor</span>((e.<span class="property">loaded</span> / e.<span class="property">total</span>) * <span class="number">100</span>)<span class="comment">//计算百分比</span></span><br><span class="line">            element.<span class="title function_">progress</span>(progressBarName, percent + <span class="string">&#x27;%&#x27;</span>)<span class="comment">//设置页面进度条</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">choose</span>: <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> files = <span class="variable language_">this</span>.<span class="property">files</span> = obj.<span class="title function_">pushFile</span>() <span class="comment">//将每次选择的文件追加到文件队列</span></span><br><span class="line">        <span class="comment">//读取本地文件</span></span><br><span class="line">        obj.<span class="title function_">preview</span>(<span class="keyword">function</span> (<span class="params">index, file, result</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> tr = $(<span class="string">`</span></span><br><span class="line"><span class="string">                &lt;tr id=&quot;upload-<span class="subst">$&#123;index&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;td&gt;<span class="subst">$&#123;file.name&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                    &lt;td&gt;<span class="subst">$&#123;(file.size / <span class="number">1024</span>).toFixed(<span class="number">1</span>)&#125;</span>kb&lt;/td&gt;</span></span><br><span class="line"><span class="string">                    &lt;td&gt;</span></span><br><span class="line"><span class="string">                        &lt;div class=&quot;layui-progress layui-progress-big&quot; lay-filter=&quot;progress_<span class="subst">$&#123;index&#125;</span>&quot; lay-showPercent=&quot;true&quot;&gt;</span></span><br><span class="line"><span class="string">                            &lt;div class=&quot;layui-progress-bar&quot; lay-percent=&quot;0%&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">                        &lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;/td&gt;</span></span><br><span class="line"><span class="string">                    &lt;td&gt;等待上传&lt;/td&gt;</span></span><br><span class="line"><span class="string">                    &lt;td&gt;</span></span><br><span class="line"><span class="string">                        &lt;div&gt;</span></span><br><span class="line"><span class="string">                            &lt;button class=&quot;layui-btn layui-btn-xs demo-reload-people layui-hide&quot;&gt;重传&lt;/button&gt;</span></span><br><span class="line"><span class="string">                            &lt;button class=&quot;layui-btn layui-btn-xs layui-btn-danger demo-delete-people&quot;&gt;删除&lt;/button&gt;</span></span><br><span class="line"><span class="string">                        &lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;/tr&gt;</span></span><br><span class="line"><span class="string">            `</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">//单个重传</span></span><br><span class="line">            tr.<span class="title function_">find</span>(<span class="string">&#x27;.demo-reload-people&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                obj.<span class="title function_">upload</span>(index, file)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            <span class="comment">//删除</span></span><br><span class="line">            tr.<span class="title function_">find</span>(<span class="string">&#x27;.demo-delete-people&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">delete</span> files[index] <span class="comment">//删除对应的文件</span></span><br><span class="line">                tr.<span class="title function_">remove</span>()</span><br><span class="line">            &#125;)</span><br><span class="line">            demoListPeople.<span class="title function_">append</span>(tr)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">done</span>: <span class="keyword">function</span> (<span class="params">res, index, upload</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> tr = demoListPeople.<span class="title function_">find</span>(<span class="string">`#upload-<span class="subst">$&#123;index&#125;</span>`</span>),</span><br><span class="line">            tds = tr.<span class="title function_">children</span>()</span><br><span class="line">        tds.<span class="title function_">eq</span>(<span class="number">3</span>).<span class="title function_">html</span>(<span class="string">&#x27;&lt;span style=&quot;color: #5FB878;&quot;&gt;上传成功&lt;/span&gt;&#x27;</span>)</span><br><span class="line">        tds.<span class="title function_">eq</span>(<span class="number">4</span>).<span class="title function_">html</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">//清空操作</span></span><br><span class="line">        layer.<span class="title function_">msg</span>(<span class="string">&#x27;上传成功&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">index, upload</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> tr = demoListPeople.<span class="title function_">find</span>(<span class="string">&#x27;tr#upload-&#x27;</span> + index)</span><br><span class="line">            , tds = tr.<span class="title function_">children</span>()</span><br><span class="line">        tds.<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">html</span>(<span class="string">&#x27;&lt;span style=&quot;color: #FF5722;&quot;&gt;上传失败&lt;/span&gt;&#x27;</span>)</span><br><span class="line">        tds.<span class="title function_">eq</span>(<span class="number">3</span>).<span class="title function_">find</span>(<span class="string">&#x27;.demo-reload&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;layui-hide&#x27;</span>) <span class="comment">//显示重传</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最后出来结果如下：<br><img src="/2021-04-05-layui-upload-process/img1.png" alt="结果"></p><p>最后附上魔改后的js: <a href="/2021-04-05-layui-upload-process/upload.js" target="_blank">附件1</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Layui </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何复制Jar包内资源到其他地方</title>
      <link href="/2020-12-03-jar-resource-copy.html"/>
      <url>/2020-12-03-jar-resource-copy.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近一直在做自己的代码生成器项目，遇到一个需求，需要把线上运行Jar包里resources文件夹下的某些文件夹按照原本的文件结构，复制到Jar包外的另一处位置。</p><span id="more"></span><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>一开始在IDEA里开发很简单，调用<code>FileUtils.copyDirectory(src, dest)</code>就解决了，本地调试运行也很顺利，文件都按照预想的复制过去了，接下来准备打包部署到服务器上试一下，这一试就试出问题了，直接抛了异常如下<br><strong>class path resource xxx cannot be resolved to absolute file path because it does not reside in the file system</strong><br>搜索了一下，才知道Jar包里的文件是不能被当作文件系统里的文件来处理的，而只能用流的方式去处理。但试了一圈也没发现有什么简单的方法可以把Jar包下某个文件夹的流复制到Jar包外，<br>不过倒是让我找到一个方法<code>FileUtils.copyURLToFile(url, file)</code>，按着这个方法想到了一个思路，<strong>不关心文件夹，而是把文件夹下的文件独立地通过流复制到目的地。</strong><br>spring本身有许多方便的方法去处理ClassPathResource，通过ClassPathResource可以拿到对应的InputStream，于是便有了以下思路</p><ol><li>获取Jar包某些文件夹下所有文件的流</li><li>筛选需要复制的流</li><li>复制<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过spring提供的方法，用匹配路径字符串获取需要复制的resources</span></span><br><span class="line"><span class="keyword">val</span> resourceResolver = PathMatchingResourcePatternResolver()</span><br><span class="line"><span class="keyword">val</span> resources = resourceResolver.getResources(<span class="string">&quot;/templates/layui/**&quot;</span>)</span><br><span class="line">resources.filter &#123; ReUtil.isMatch(<span class="string">&quot;.*?\\.[a-zA-Z]*?&quot;</span>, it.filename!!) &#125; <span class="comment">// 进一步筛选需要复制哪些文件，同时过滤掉文件夹路径的resource</span></span><br><span class="line">    .forEach &#123;</span><br><span class="line">        <span class="keyword">val</span> url = it.url</span><br><span class="line">        <span class="keyword">val</span> filePath = url.path.substring(url.path.indexOf(<span class="string">&quot;layui&quot;</span>) + <span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> (!filePath.contains(<span class="string">&quot;page&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">val</span> destination = File(<span class="string">&quot;<span class="subst">$&#123;pathConstant.resourcesDirPath()&#125;</span>/templates/<span class="variable">$filePath</span>&quot;</span>)</span><br><span class="line">            FileUtils.copyURLToFile(url, destination) <span class="comment">// 复制</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p>最后打包测试，一切OK。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次线上SQL评测机的阻塞排查</title>
      <link href="/2020-02-24-sql-judger-bugs.html"/>
      <url>/2020-02-24-sql-judger-bugs.html</url>
      
        <content type="html"><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>昨天线上的MySQL评测机的rabbitMQ消息队列时不时就会出现消息堆积的现象，影响了正常学生的提交，这个问题比较紧急，因此马上就着手排查。</p><h1 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h1><p>首先检查是否是rabbitMQ本身的问题，进入rabbitMQ的管理页面，发现一切正常，排除。</p><p>然后就怀疑是否消费者不消化消息了，这里消费者是SQL评测机，是在k8s集群上运行的一个容器，通过<code>kubectl exec -it</code>进入容器后，我们想到了用阿里巴巴的arthas工具，通过trace方法追踪阻塞原因，<br>在经过几个小时的trace后，终于找到执行慢的方法是在<code>JdbcTemplate.execute()</code>，卡在了执行sql语句的地方，于是我们怀疑是不是MySQL卡住了。</p><span id="more"></span><p>连上评测机的MySQL，执行命令<code>show processlist</code>，发现一个疑似异常的query，描述是waiting for table metadata lock。经过一阵搜索后大概了解到这个错误的出现情景是ddl语句所操作的表在一个进行中的事务里。<br>仔细排查了评测机的代码，发现并没有任何手动控制事务的代码，于是我们怀疑是不是学生提交的内容中开启了事务。</p><p>查看容器日志，找到让评测卡住的最近几个提交id，捞出了学生的提交内容，发现有一个提交是这样的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">delete</span> xxxx</span><br><span class="line"><span class="keyword">commit</span></span><br></pre></td></tr></table></figure><p>这几行会手动开启事务，然后删除数据，最后提交事务，看起来一切都很正常，但是由于后面2句没有加分号，因此执行的时候报错了，commit根本没有执行，意味着此次事务没有提交。<br>由于评测机的评测过程中会删除表， 于是后面所有同一个题目的提交都会卡住。因为拿不到表的锁</p><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><ol><li>在本地数据库随便新建一张表user</li><li>开启session1，然后手动<code>start transaction;</code></li><li>开启session2. 然后执行语句<code>drop table user;</code></li><li>开启session3，执行<code>show processlist</code>查看结果<br>最后结果如图</li></ol><p><img src="/2020-02-24-sql-judger-bugs/img1.png" alt="结果"></p><p>可以看到drop table语句一直在卡着，直到等待时间超过lock timeout或者在开启事务的session里commit;</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>当时想了2个方案</p><ol><li>设置lock timeout。这个方案不会让评测机卡住，但是会把被手动开启事务提交影响的提交的答案误评，因此pass。</li><li>评测机来控制事务，因为mysql的commit与transaction没有一一对应，因此只要在评测结束后commit就可以了。</li></ol><p>临时修复：在评测结束后无论有没有开启事务，都用<code>jdbcTemplate.execute(&quot;commit;&quot;)</code>，保证每次评测后都会手动提交一次事务。<br>当然此方案是临时性的修复，因为执行学生提交的连接和最后我们提交事务的连接有可能不是同一个连接。所以有偶然的概率依然会触发之前的bug。</p><p>最终修复方案：在评测前先手动获取连接，之后在过程中一直使用这个连接去执行学生的提交以及提交事务，因为是同一个连接，可以保证事务提交生效。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>此次排查耗时一天，并且由于bug无法复现，偶然性太强，只能开着trace一直等待异常再次出现。好在功夫不负有心人，最后也是成功捕捉到了异常发生的原因，圆满修复异常。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Manjaro安装指南</title>
      <link href="/2020-08-06-manjaro-install-guide.html"/>
      <url>/2020-08-06-manjaro-install-guide.html</url>
      
        <content type="html"><![CDATA[<p>本文为个人安装并配置Manjaro系统的指南，可供后人安装学习指导用</p><span id="more"></span><h1 id="源设置"><a href="#源设置" class="headerlink" title="源设置"></a>源设置</h1><ol><li><p>首先更换源地址为国内地址，执行完会弹出一个框选择，一般选择前3个即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Syy</span><br><span class="line">sudo pacman-mirrors -i -c China -m rank</span><br><span class="line">sudo pacman -Syyu</span><br></pre></td></tr></table></figure></li><li><p>添加aur的源，aur就是各种第三方软件包的源，正是因为aur，arch linux才有如此多的软件可供下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">编辑/etc/pacman.conf文件，加入下面的内容：</span><br><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Optional TrustAll</span><br><span class="line">Server = https://mirrors.sjtug.sjtu.edu.cn/archlinux-cn/$arch</span><br></pre></td></tr></table></figure><p>执行<code>sudo pacman -Syu &amp;&amp; sudo pacman -S archlinux-keyring &amp;&amp; sudo pacman -Syyu</code>此时系统更新完毕，接下来需要安装必需软件</p></li></ol><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h2><ol><li><p>安装fcitx5：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx5-im fcitx5-chinese-addons fcitx5-pinyin-zhwiki</span><br></pre></td></tr></table></figure></li><li><p>设置环境变量，在<code>~/.pam_environment</code>文件（如果文件不存在就新建一个）末尾加上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GTK_IM_MODULE DEFAULT=fcitx</span><br><span class="line">QT_IM_MODULE  DEFAULT=fcitx</span><br><span class="line">XMODIFIERS    DEFAULT=\@im=fcitx</span><br><span class="line">SDL_IM_MODULE DEFAULT=fcitx</span><br><span class="line">export QT_IM_MODULE=fcitx5</span><br></pre></td></tr></table></figure></li><li><p>在<code>~/.xprofile</code>文件中添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GTK_IM_MODULE=fcitx5</span><br><span class="line">export QT_IM_MODULE=fcitx5</span><br><span class="line">export XMODIFIERS=&quot;@im=fcitx5&quot;</span><br></pre></td></tr></table></figure></li><li><p>安装系统依赖库 <code>pacman -S --needed base-devel</code></p></li><li><p>卸载iBus <code>pacman -Rs iBus</code></p></li><li><p>重启电脑后打开fcitx5的设置，添加输入法</p></li></ol><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ol><li>git config –global credential.helper store</li><li>git config –global https.proxy 127.0.0.1:7890</li><li>git config –global user.name “”</li><li>git config –global user.email “”</li></ol><h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><ol><li><p>安装oh my zsh <code>sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></p></li><li><p>安装powerline shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S python-pip</span><br><span class="line">pip install powerline-shell</span><br></pre></td></tr></table></figure><p>然后在.zshrc文件中添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function powerline_precmd() &#123;</span><br><span class="line">    PS1=&quot;$(powerline-shell --shell zsh $?)&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function install_powerline_precmd() &#123;</span><br><span class="line">  for s in &quot;$&#123;precmd_functions[@]&#125;&quot;; do</span><br><span class="line">    if [ &quot;$s&quot; = &quot;powerline_precmd&quot; ]; then</span><br><span class="line">      return</span><br><span class="line">    fi</span><br><span class="line">  done</span><br><span class="line">  precmd_functions+=(powerline_precmd)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if [ &quot;$TERM&quot; != &quot;linux&quot; ]; then</span><br><span class="line">    install_powerline_precmd</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>执行 <code>source .zshrc</code></p><p>安装自动补全和高亮插件</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><p>编辑.zshrc，添加 <code>plugins=(zsh-autosuggestions zsh-syntax-highlighting)</code></p></li></ol><h2 id="Nvidia独显驱动"><a href="#Nvidia独显驱动" class="headerlink" title="Nvidia独显驱动"></a>Nvidia独显驱动</h2><p>update: 2023年开始不需要在手动安装驱动了，系统安装完会自带</p><ol><li>查询可用驱动<code>mhwd -l -d --pci</code></li><li>安装驱动<code>sudo mhwd -i pci video-nvidia</code></li><li>重启</li></ol><h2 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h2><h3 id="shadowsocks"><a href="#shadowsocks" class="headerlink" title="shadowsocks"></a>shadowsocks</h3><ol><li><p>下载ShadowSocks-qt5</p></li><li><p>添加代理服务器</p></li><li><p>浏览器下载switchyOmega插件，设置代理地址端口为软件里配置的地址</p></li><li><p>在&#x2F;etc&#x2F;profiles或者.zshrc里添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=&quot;socks5://127.0.0.1:7890&quot;</span><br><span class="line">export https_proxy=&quot;socks5://127.0.0.1:7890&quot;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Clash"><a href="#Clash" class="headerlink" title="Clash"></a>Clash</h3><ol start="5"><li><p>下载Clash for windows</p></li><li><p>导入配置文件</p></li><li><p>设置系统代理</p></li><li><p>在&#x2F;etc&#x2F;profiles或者.zshrc里添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=&quot;https://127.0.0.1:7890&quot;</span><br><span class="line">export https_proxy=&quot;https://127.0.0.1:7890&quot;</span><br></pre></td></tr></table></figure></li></ol><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><h3 id="Gnome-exteison"><a href="#Gnome-exteison" class="headerlink" title="Gnome exteison"></a>Gnome exteison</h3><ol><li><p>Gnome-tweaks里设置合盖不睡眠（如果硬件睡眠会导致无法唤醒）</p></li><li><p>Gnome-extension里设置dock栏位置和大小</p></li><li><p>Gnome-extension里开启places status indicator</p></li><li><p>Gnome-extension安装Clipboard Indicator</p></li><li><p>Gnome-extension开启ArcMenu</p></li><li><p>Gnome-extension安装Vitals</p></li><li><p>禁用Ctrl + alt + left or right，与IDEA上一个光标快捷键冲突</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gsettings set &quot;org.gnome.desktop.wm.keybindings&quot; switch-to-workspace-left &quot;[&#x27;&#x27;]&quot;</span><br><span class="line">gsettings set &quot;org.gnome.desktop.wm.keybindings&quot; switch-to-workspace-right &quot;[&#x27;&#x27;]&quot;</span><br><span class="line">gsettings set &quot;org.gnome.desktop.wm.keybindings&quot; move-to-workspace-right &quot;[&#x27;&#x27;]&quot;</span><br><span class="line">gsettings set &quot;org.gnome.desktop.wm.keybindings&quot; move-to-workspace-left &quot;[&#x27;&#x27;]&quot;</span><br></pre></td></tr></table></figure></li><li><p>tmux.conf里加上set -g escape-time 0，消除tmux里neovim切换模式时的延迟</p></li></ol><h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><ul><li>Firefox（自带）</li><li>JDK</li><li>Docker</li><li><del>Electron-ssr</del> &#x2F;&#x2F; 已不维护</li><li>ShadowSocks-qt5</li><li>Clash for windows（推荐）</li><li>Typora</li><li>VLC</li><li>Telegram</li><li>Jetbrains toolbox </li><li>Dbeaver</li><li>Apifox</li><li>Deepin-wine-wechat</li><li>Chrome，&#x2F;opt&#x2F;google&#x2F;chrome&#x2F;chrome –proxy-server&#x3D;”<span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo3ODkwLw==">http://127.0.0.1:7890<i class="fa fa-external-link-alt"></i></span>“ </li><li>Albert</li><li>Onedrive</li><li>Wps</li><li><del>Flameshot</del></li><li>tmux</li><li>Neovide，专门为neovim做的gui，设置字体在keybindings.lua里输入<code>$fontName:style=Regular,Regular:h12</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Manjaro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux实用命令行工具</title>
      <link href="/2022-02-20-linux-useful-tools.html"/>
      <url>/2022-02-20-linux-useful-tools.html</url>
      
        <content type="html"><![CDATA[<h1 id="fzf"><a href="#fzf" class="headerlink" title="fzf"></a>fzf</h1><p>fzf是一个模糊搜索文件&#x2F;文件夹的命令行工具，通过标准输入传入的内容，在交互式窗口输入搜索的关键字，即可高亮显示符合的文件名，用法如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name &quot;*.py&quot; | fzf</span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="shellcheck"><a href="#shellcheck" class="headerlink" title="shellcheck"></a>shellcheck</h1><p>shellcheck是一个用来检查sh文件语法的命令行工具，用法如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shellcheck example.sh</span><br></pre></td></tr></table></figure><h1 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h1><p>tree是一个以树型显示文件夹信息的命令行工具，用法如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree dir</span><br></pre></td></tr></table></figure><h1 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h1><p>tmux是终端会话复用工具</p><h1 id="tig"><a href="#tig" class="headerlink" title="tig"></a>tig</h1><p>tig是一个在终端上可视化查看git各种状态，diff,文件的工具</p><h1 id="WindTerm"><a href="#WindTerm" class="headerlink" title="WindTerm"></a>WindTerm</h1><p>WindTerm是一个跨平台的终端工具</p><h1 id="jq"><a href="#jq" class="headerlink" title="jq"></a>jq</h1><p>jq是一个命令行读写JSON工具</p><h1 id="riggrep"><a href="#riggrep" class="headerlink" title="riggrep"></a>riggrep</h1><p>riggrep是一个性能更好的grep工具</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号开发踩坑记</title>
      <link href="/2019-07-21-wechat-official-development.html"/>
      <url>/2019-07-21-wechat-official-development.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近业务经常需要针对微信公众号开发，比如处理用户关注公众号事件，微信网页扫码登录及绑定帐号等。在开发过程中遇到许多问题，搜索了许多前人的文章，加上自己开发过程中的一些思考，特此来做个总结。</p><span id="more"></span><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>首先我们需要申请一个公众号，申请成功后进入<strong>开发&#x2F;基本配置</strong>页面</li></ol><p><img src="/2019-07-21-wechat-official-development/img1.png" alt="基本配置"></p><p>AppID，AppSecret：用来获取accessToken，accessToken是调用微信一切接口的凭证</p><p>IP白名单：当服务端在本地调试时想调用微信接口时，需把本地ip地址加入白名单中</p><p>URL：服务器上暴露的接口地址，必须是域名形式，不能是IP</p><p>令牌：任意值，后续解析加密消息用</p><p>密钥：随机生成值，后续解析加密消息用。如果要使用<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1dlY2hhdC1Hcm91cC9XeEphdmE=">weixin-mp-java<i class="fa fa-external-link-alt"></i></span> sdk开发，不能直接使用公众号网页上生成的随机key，解决办法是使用<code>Base64.encodeBase64String(UUID.randomUUID().toString().replaceAll(&quot;-&quot;,&quot;&quot;).getBytes()); </code>生成44位的字符串，然后去除末尾&#x3D;号作为key</p><p>消息加密方式：是否加密传输的消息，可选择明文，明文密文，仅密文</p><p>准备工作已完成，然后就可以开发了</p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><ol start="2"><li><p>在<span class="exturl" data-url="aHR0cHM6Ly9zdGFydC5zcHJpbmcuaW8v">springboot初始化项目生成页<i class="fa fa-external-link-alt"></i></span>生成一个项目，然后加入以下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.binarywang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>weixin-java-mp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>公众号接入指南中提到微信会往上一步填写的URL上发送校验签名请求，服务器必须对请求作出响应，才能完成接入。新建<code>WechatController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此接口的作用是接收微信校验签名以及消息请求</span></span><br><span class="line"><span class="comment">// msgSignature：加密的消息参数，当加密方式设置为密文时，微信会在请求里带上此参数</span></span><br><span class="line"><span class="comment">// 其余参数请参考https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Access_Overview.html接入指南</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/wechat&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">wechat</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                     <span class="meta">@RequestParam(value = &quot;msg_signature&quot;, required = false)</span> String msgSignature,</span></span><br><span class="line"><span class="params">                     <span class="meta">@RequestParam(&quot;signature&quot;)</span> String signature,</span></span><br><span class="line"><span class="params">                     <span class="meta">@RequestParam(&quot;timestamp&quot;)</span> String timestamp,</span></span><br><span class="line"><span class="params">                     <span class="meta">@RequestParam(&quot;nonce&quot;)</span> String nonce,</span></span><br><span class="line"><span class="params">                     <span class="meta">@RequestParam(value = &quot;echostr&quot;, required = false)</span> String echostr)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (wxMpService.checkSignature(timestamp, nonce, signature)) &#123;</span><br><span class="line">        <span class="comment">// GET请求味校验签名接口</span></span><br><span class="line">        <span class="keyword">if</span> (request.getMethod().equals(<span class="string">&quot;GET&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> echostr;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 接收微信消息请求根据WxMpXmlMessage的msgType判断消息类型，然后根据类型处理相应业务逻辑</span></span><br><span class="line">            <span class="type">WxMpXmlMessage</span> <span class="variable">inMessage</span> <span class="operator">=</span> WxMpXmlMessage.fromEncryptedXml(request.getInputStream(), wxMpConfigStorage,</span><br><span class="line">                                                                       timestamp, nonce, msgSignature);</span><br><span class="line">            System.out.println(inMessage.toString());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>接下来是网页授权和扫码功能的开发，场景一般是微信内访问网页以及网页上提供微信扫码服务</p><p>根据<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vZG9jL29mZmlhY2NvdW50L09BX1dlYl9BcHBzL1dlY2hhdF93ZWJwYWdlX2F1dGhvcml6YXRpb24uaHRtbA==">网页授权<i class="fa fa-external-link-alt"></i></span>里的说明，需要以下几个接口</p><ul><li><p>生成提示用户授权的链接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// redirectUrl：用户同意授权后重定向的链接，可以为html地址或者服务端处理后续业务接口，重定向链接中会携带code，作为获取accessToken的凭据</span></span><br><span class="line"><span class="comment">// state：随机数，可以用来存储用户状态，扫码登录的时候会用到</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/authorization-url&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getAuthorizationUrl</span><span class="params">(<span class="meta">@RequestParam(&quot;redirectUrl&quot;)</span> String redirectUrl,</span></span><br><span class="line"><span class="params">  <span class="meta">@RequestParam(&quot;state&quot;)</span> String state)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> wxMpService.oauth2buildAuthorizationUrl(redirectUrl, <span class="string">&quot;snsapi_userinfo&quot;</span>, state);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取用户信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">xxx</span><span class="params">(<span class="meta">@RequestParam(&quot;code&quot;)</span> String code)</span> <span class="keyword">throws</span> WxErrorException &#123;</span><br><span class="line">    <span class="type">WxMpOAuth2AccessToken</span> <span class="variable">accessToken</span> <span class="operator">=</span> wxMpService.oauth2getAccessToken(code);</span><br><span class="line">    <span class="type">WxMpUser</span> <span class="variable">wxMpUser</span> <span class="operator">=</span> wxMpService.oauth2getUserInfo(accessToken, <span class="string">&quot;zh_CN&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">openId</span> <span class="operator">=</span> wxMpUser.getOpenId();</span><br><span class="line">    <span class="type">String</span> <span class="variable">unionId</span> <span class="operator">=</span> wxMpUser.getUnionId();</span><br><span class="line">    <span class="comment">// 拿到openId和unionId之后，可以做相应的业务逻辑，比如绑定微信帐号，用微信登录等等</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>扫码功能。关于扫码具体代码就不贴了，说下思路，结合上述代码实现也很简单</p><ol><li>前端调用生成提示用户授权的链接，然后把链接变成二维码，展示给用户，同时生成一个随机数，存入map中</li><li>服务端提供一个检查扫码状态接口，检查随机数对应的微信unionId是否为空，并返回相应的状态给前端</li><li>如果用户确认授权，微信会调用服务端确认授权的回调接口，把随机数对应的微信unionId设置好</li><li>前端轮询扫码状态接口，并在网页上作出相应的提示</li></ol></li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Wechat </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
